{"version":3,"sources":["..\\..\\lib\\enyo-ilib\\ilib\\lib\\ilib.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\MathUtils.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Path.js","..\\..\\lib\\enyo-ilib\\src\\packedbuffer.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\SearchUtils.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\JulianDay.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Calendar.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\JSUtils.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Loader.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\HebrewCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\IslamicCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\JulianCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\PersianAlgoCal.js","..\\..\\lib\\enyo-ilib\\src\\zoneinfo.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Locale.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\RataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Utils.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\HebrewRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\IslamicRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\JulianRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\PersAlgoRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\IString.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\LocaleInfo.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\ScriptInfo.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\GregorianCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\EthiopicCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\CaseMapper.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\CType.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\ResBundle.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\IDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\CalendarFactory.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\GregRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\ThaiSolarCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\EthiopicRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\CopticCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\isIdeo.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\isAscii.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\isDigit.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\isAlpha.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\isPunct.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\isSpace.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Currency.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\TimeZone.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\CopticRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Address.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Name.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\INumber.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\GregorianDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\EthiopicDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\HebrewDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\IslamicDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\JulianDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\PersianAlgoDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\AddressFmt.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\NameFmt.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\NumFmt.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\Astro.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\ThaiSolarDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\CopticDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\HanCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\PersRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\HanRataDie.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\PersianCal.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\HanDate.js","..\\..\\lib\\enyo-ilib\\ilib\\lib\\PersianDate.js","..\\..\\lib\\enyo-ilib\\src\\dates.js","..\\..\\lib\\enyo-ilib\\src\\glue.js","..\\..\\lib\\enyo-ilib\\index.js"],"names":[],"mappingstqjnnjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvxjxhjncxxhzkpktvplnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrppvpnhwnghvnxolzhxgvXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfpdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/*\r\n * ilib.js - define the ilib name space\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @namespace The global namespace that contains general ilib functions useful\r\n * to all of ilib\r\n * \r\n * @version // !macro ilibVersion\r\n */\r\nvar ilib = ilib || {};\r\n\r\n/** @private */\r\nilib._ver = function() {\r\n    return // !macro ilibVersion\r\n    ;\r\n};\r\n\r\n/**\r\n * Return the current version of ilib.\r\n * \r\n * @static\r\n * @return {string} a version string for this instance of ilib\r\n */\r\nilib.getVersion = function () {\r\n\t// TODO: need some way of getting the version number under dynamic load code\r\n    return ilib._ver() || \"11.0\"; \r\n};\r\n\r\n/**\r\n * Place where resources and such are eventually assigned.\r\n */\r\nilib.data = {\r\n\t/** @type {{ccc:Object.<string,number>,nfd:Object.<string,string>,nfc:Object.<string,string>,nfkd:Object.<string,string>,nfkc:Object.<string,string>}} */\r\n    norm: {\r\n    \tccc: {},\r\n    \tnfd: {},\r\n    \tnfc: {},\r\n    \tnfkd: {},\r\n    \tnfkc: {}\r\n    },\r\n    zoneinfo: {\r\n        \"Etc/UTC\":{\"o\":\"0:0\",\"f\":\"UTC\"},\r\n        \"local\":{\"f\":\"local\"}\r\n    },\r\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype: null,\r\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_c: null,\r\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_l: null,\r\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_m: null,\r\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_p: null,\r\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_z: null,\r\n    /** @type {null|Object.<string,Array.<Array.<number>>>} */ scriptToRange: null,\r\n    /** @type {null|Object.<string,string|Object.<string|Object.<string,string>>>} */ dateformats: null,\r\n    /** @type {null|Array.<string>} */ timezones: []\r\n};\r\n\r\n/*\r\nif (typeof(window) !== 'undefined') {\r\n    window[\"ilib\"] = ilib;\r\n}\r\n*/\r\n\r\n// export ilib for use as a module in nodejs\r\nif (typeof(module) !== 'undefined') {\r\n    module.exports = ilib;\r\n    module.exports.ilib = ilib;  // for backwards compatibility with older versions of ilib\r\n}\r\n\r\n/**\r\n * Sets the pseudo locale. Pseudolocalization (or pseudo-localization) is used for testing\r\n * internationalization aspects of software. Instead of translating the text of the software\r\n * into a foreign language, as in the process of localization, the textual elements of an application\r\n * are replaced with an altered version of the original language.These specific alterations make\r\n * the original words appear readable, but include the most problematic characteristics of \r\n * the world's languages: varying length of text or characters, language direction, and so on.\r\n * Regular Latin pseudo locale: eu-ES and RTL pseudo locale: ps-AF\r\n * \r\n * @param {string|undefined|null} localename the locale specifier for the pseudo locale\r\n */\r\nilib.setAsPseudoLocale = function (localename) {\r\n   if (localename) {\r\n\t   ilib.pseudoLocales.push(localename)\r\n   }\r\n};\r\n\r\n/**\r\n * Reset the list of pseudo locales back to the default single locale of zxx-XX.\r\n * @static\r\n */\r\nilib.clearPseudoLocales = function() {\r\n\tilib.pseudoLocales = [\r\n        \"zxx-XX\",\r\n        \"zxx-Cyrl-XX\",\r\n        \"zxx-Hans-XX\",\r\n        \"zxx-Hebr-XX\"\r\n    ];\r\n};\r\n\r\nilib.clearPseudoLocales();\r\n\r\n/**\r\n * Return the name of the platform\r\n * @private\r\n * @static\r\n * @return {string} string naming the platform\r\n */\r\nilib._getPlatform = function () {\r\n    if (!ilib._platform) {\r\n    \ttry {\r\n    \t\tif (typeof(java.lang.Object) !== 'undefined') {\r\n    \t\t\tilib._platform = (typeof(process) !== 'undefined') ? \"trireme\" : \"rhino\";\r\n    \t\t\treturn ilib._platform;\r\n    \t\t}\r\n    \t} catch (e) {}\r\n    \t\r\n        if (typeof(process) !== 'undefined' && typeof(module) !== 'undefined') {\r\n            ilib._platform = \"nodejs\";\r\n        } else if (typeof(Qt) !== 'undefined') {\r\n            ilib._platform = \"qt\";\r\n        } else if (typeof(window) !== 'undefined') {\r\n            ilib._platform = (typeof(PalmSystem) !== 'undefined') ? \"webos\" : \"browser\";\r\n        } else {\r\n            ilib._platform = \"unknown\";\r\n        }\r\n    }    \r\n    return ilib._platform;\r\n};\r\n\r\n/**\r\n * If this ilib is running in a browser, return the name of that browser.\r\n * @private\r\n * @static\r\n * @return {string|undefined} the name of the browser that this is running in (\"firefox\", \"chrome\", \"ie\", \r\n * \"safari\", or \"opera\"), or undefined if this is not running in a browser or if\r\n * the browser name could not be determined \r\n */\r\nilib._getBrowser = function () {\r\n\tvar browser = undefined;\r\n\tif (ilib._getPlatform() === \"browser\") {\r\n\t\tif (navigator && navigator.userAgent) {\r\n\t\t\tif (navigator.userAgent.indexOf(\"Firefox\") > -1) {\r\n\t\t\t\tbrowser = \"firefox\";\r\n\t\t\t}\r\n\t\t\tif (navigator.userAgent.indexOf(\"Opera\") > -1) {\r\n\t\t\t\tbrowser = \"opera\";\r\n\t\t\t}\r\n\t\t\tif (navigator.userAgent.indexOf(\"Chrome\") > -1) {\r\n\t\t\t\tbrowser = \"chrome\";\r\n\t\t\t}\r\n\t\t\tif (navigator.userAgent.indexOf(\" .NET\") > -1) {\r\n\t\t\t\tbrowser = \"ie\";\r\n\t\t\t}\r\n\t\t\tif (navigator.userAgent.indexOf(\"Safari\") > -1) {\r\n\t\t\t\t// chrome also has the string Safari in its userAgent, but the chrome case is \r\n\t\t\t\t// already taken care of above\r\n\t\t\t\tbrowser = \"safari\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn browser;\r\n};\r\n\r\n/**\r\n * Return true if the global variable is defined on this platform.\r\n * @private\r\n * @static\r\n * @param {string} name the name of the variable to check\r\n * @return {boolean} true if the global variable is defined on this platform, false otherwise\r\n */\r\nilib._isGlobal = function(name) {\r\n    switch (ilib._getPlatform()) {\r\n        case \"rhino\":\r\n            var top = (function() {\r\n              return (typeof global === 'object') ? global : this;\r\n            })();\r\n            return typeof(top[name]) !== 'undefined';\r\n        case \"nodejs\":\r\n        case \"trireme\":\r\n            var root = typeof(global) !== 'undefined' ? global : this;\r\n            return root && typeof(root[name]) !== 'undefined';\r\n        case \"qt\":\r\n        \treturn false;\r\n        default:\r\n        \ttry {\r\n        \t\treturn window && typeof(window[name]) !== 'undefined';\r\n        \t} catch (e) {\r\n        \t\treturn false;\r\n        \t}\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the default locale for all of ilib. This locale will be used\r\n * when no explicit locale is passed to any ilib class. If the default\r\n * locale is not set, ilib will attempt to use the locale of the\r\n * environment it is running in, if it can find that. If not, it will\r\n * default to the locale \"en-US\". If a type of parameter is string, \r\n * ilib will take only well-formed BCP-47 tag  <p>\r\n * \r\n * \r\n * @static\r\n * @param {string|undefined|null} spec the locale specifier for the default locale\r\n */\r\nilib.setLocale = function (spec) {\r\n    if (typeof(spec) === 'string' || !spec) {\r\n        ilib.locale = spec;\r\n    }\r\n    // else ignore other data types, as we don't have the dependencies\r\n    // to look into them to find a locale\r\n};\r\n\r\n/**\r\n * Return the default locale for all of ilib if one has been set. This \r\n * locale will be used when no explicit locale is passed to any ilib \r\n * class. If the default\r\n * locale is not set, ilib will attempt to use the locale of the\r\n * environment it is running in, if it can find that. If not, it will\r\n * default to the locale \"en-US\".<p>\r\n * \r\n * \r\n * @static\r\n * @return {string} the locale specifier for the default locale\r\n */\r\nilib.getLocale = function () {\r\n    if (typeof(ilib.locale) !== 'string') {\r\n    \tvar plat = ilib._getPlatform();\r\n    \tswitch (plat) {\r\n    \t\tcase 'browser':\r\n            \t// running in a browser\r\n                if(typeof(navigator.language) !== 'undefined'){\r\n                    ilib.locale = navigator.language.substring(0,3) + navigator.language.substring(3,5).toUpperCase();  // FF/Opera/Chrome/Webkit\r\n                }\r\n                if (!ilib.locale) {\r\n                    // IE on Windows\r\n                    var lang = typeof(navigator.browserLanguage) !== 'undefined' ? \r\n                        navigator.browserLanguage :\r\n                        (typeof(navigator.userLanguage) !== 'undefined' ? \r\n                            navigator.userLanguage :\r\n                            (typeof(navigator.systemLanguage) !== 'undefined' ?\r\n                                navigator.systemLanguage :\r\n                                undefined));\r\n                    if (typeof(lang) !== 'undefined' && lang) {\r\n                        // for some reason, MS uses lower case region tags\r\n                        ilib.locale = lang.substring(0,3) + lang.substring(3,5).toUpperCase();\r\n                    }\r\n                }\r\n                break;\r\n    \t\tcase 'webos':\r\n                // webOS\r\n                if (typeof(PalmSystem.locales) !== 'undefined' && \r\n                \t\ttypeof(PalmSystem.locales.UI) != 'undefined' && \r\n                \t\tPalmSystem.locales.UI.length > 0) {\r\n                    ilib.locale = PalmSystem.locales.UI;\r\n                } else if (typeof(PalmSystem.locale) !== 'undefined') {\r\n                \tilib.locale = PalmSystem.locale;\r\n                }\r\n    \t\t\tbreak;\r\n    \t\tcase 'rhino':\r\n                if (typeof(environment) !== 'undefined' && environment.user && typeof(environment.user.language) === 'string' && environment.user.language.length > 0) {\r\n                \t// running under plain rhino\r\n                    ilib.locale = environment.user.language;\r\n                    if (typeof(environment.user.country) === 'string' && environment.user.country.length > 0) {\r\n                        ilib.locale += '-' + environment.user.country;\r\n                    }\r\n                }\r\n                break;\r\n    \t\tcase \"trireme\":\r\n            \t// under trireme on rhino emulating nodejs\r\n            \tvar lang = process.env.LANG || process.env.LANGUAGE || process.env.LC_ALL;\r\n                // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\r\n                // where language and region are the correct ISO codes separated by\r\n                // an underscore. This translate it back to the BCP-47 form.\r\n                if (lang && typeof(lang) !== 'undefined') {\r\n                    ilib.locale = lang.substring(0,2).toLowerCase() + '-' + lang.substring(3,5).toUpperCase();\r\n                }\r\n            \tbreak;\r\n    \t\tcase 'nodejs':\r\n                // running under nodejs\r\n                var lang = process.env.LANG || process.env.LC_ALL;\r\n                // the LANG variable on unix is in the form \"lang_REGION.CHARSET\"\r\n                // where language and region are the correct ISO codes separated by\r\n                // an underscore. This translate it back to the BCP-47 form.\r\n                if (lang && typeof(lang) !== 'undefined') {\r\n                    ilib.locale = lang.substring(0,2).toLowerCase() + '-' + lang.substring(3,5).toUpperCase();\r\n                }\r\n    \t\t\tbreak;\r\n    \t\tcase 'qt':\r\n            \t// running in the Javascript engine under Qt/QML\r\n            \tvar locobj = Qt.locale();\r\n            \tvar lang = locobj.name && locobj.name.replace(\"_\", \"-\") || \"en-US\";\r\n    \t\t\tbreak;\r\n    \t}\r\n        ilib.locale = typeof(ilib.locale) === 'string' ? ilib.locale : 'en-US';\r\n    }\r\n    return ilib.locale;\r\n};\r\n\r\n/**\r\n * Sets the default time zone for all of ilib. This time zone will be used when\r\n * no explicit time zone is passed to any ilib class. If the default time zone\r\n * is not set, ilib will attempt to use the time zone of the\r\n * environment it is running in, if it can find that. If not, it will\r\n * default to the the UTC zone \"Etc/UTC\".<p>\r\n * \r\n * \r\n * @static\r\n * @param {string} tz the name of the time zone to set as the default time zone\r\n */\r\nilib.setTimeZone = function (tz) {\r\n    ilib.tz = tz || ilib.tz;\r\n};\r\n\r\n/**\r\n * Return the default time zone for all of ilib if one has been set. This \r\n * time zone will be used when no explicit time zone is passed to any ilib \r\n * class. If the default time zone\r\n * is not set, ilib will attempt to use the locale of the\r\n * environment it is running in, if it can find that. If not, it will\r\n * default to the the zone \"local\".<p>\r\n * \r\n * \r\n * @static\r\n * @return {string} the default time zone for ilib\r\n */\r\nilib.getTimeZone = function() {\r\n    if (typeof(ilib.tz) === 'undefined') {\r\n        if (typeof(navigator) !== 'undefined' && typeof(navigator.timezone) !== 'undefined') {\r\n            // running in a browser\r\n            if (navigator.timezone.length > 0) {\r\n                ilib.tz = navigator.timezone;\r\n            }\r\n        } else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.timezone) !== 'undefined') {\r\n            // running in webkit on webOS\r\n            if (PalmSystem.timezone.length > 0) {\r\n                ilib.tz = PalmSystem.timezone;\r\n            }\r\n        } else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {\r\n            // running under rhino\r\n            if (typeof(environment.user.timezone) !== 'undefined' && environment.user.timezone.length > 0) {\r\n                ilib.tz = environment.user.timezone;\r\n            }\r\n        } else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {\r\n            // running in nodejs\r\n            if (process.env.TZ && typeof(process.env.TZ) !== \"undefined\") {\r\n                ilib.tz = process.env.TZ;\r\n            }\r\n        }\r\n        \r\n        ilib.tz = ilib.tz || \"local\"; \r\n    }\r\n\r\n    return ilib.tz;\r\n};\r\n\r\n/**\r\n * @class\r\n * Defines the interface for the loader class for ilib. The main method of the\r\n * loader object is loadFiles(), which loads a set of requested locale data files\r\n * from where-ever it is stored.\r\n * @interface\r\n */\r\nilib.Loader = function() {};\r\n\r\n/**\r\n * Load a set of files from where-ever it is stored.<p>\r\n * \r\n * This is the main function define a callback function for loading missing locale \r\n * data or resources.\r\n * If this copy of ilib is assembled without including the required locale data\r\n * or resources, then that data can be lazy loaded dynamically when it is \r\n * needed by calling this method. Each ilib class will first\r\n * check for the existence of data under ilib.data, and if it is not there, \r\n * it will attempt to load it by calling this method of the laoder, and then place\r\n * it there.<p>\r\n * \r\n * Suggested implementations of this method might load files \r\n * directly from disk under nodejs or rhino, or within web pages, to load \r\n * files from the server with XHR calls.<p>\r\n * \r\n * The first parameter to this method, paths, is an array of relative paths within \r\n * the ilib dir structure for the \r\n * requested data. These paths will already have the locale spec integrated \r\n * into them, so no further tweaking needs to happen to load the data. Simply\r\n * load the named files. The second\r\n * parameter tells the loader whether to load the files synchronously or asynchronously.\r\n * If the sync parameters is false, then the onLoad function must also be specified.\r\n * The third parameter gives extra parameters to the loader passed from the calling\r\n * code. This may contain any property/value pairs.  The last parameter, callback,\r\n * is a callback function to call when all of the data is finishing loading. Make\r\n * sure to call the callback with the context of \"this\" so that the caller has their \r\n * context back again.<p>\r\n * \r\n * The loader function must be able to operate either synchronously or asychronously. \r\n * If the loader function is called with an undefined callback function, it is\r\n * expected to load the data synchronously, convert it to javascript\r\n * objects, and return the array of json objects as the return value of the \r\n * function. If the loader \r\n * function is called with a callback function, it may load the data \r\n * synchronously or asynchronously (doesn't matter which) as long as it calls\r\n * the callback function with the data converted to a javascript objects\r\n * when it becomes available. If a particular file could not be loaded, the \r\n * loader function should put undefined into the corresponding entry in the\r\n * results array. \r\n * Note that it is important that all the data is loaded before the callback\r\n * is called.<p>\r\n * \r\n * An example implementation for nodejs might be:\r\n * \r\n * <pre>\r\n * var fs = require(\"fs\");\r\n * \r\n * var myLoader = function() {};\r\n * myLoader.prototype = new Loader();\r\n * myLoader.prototype.constructor = myLoader;\r\n * myLoader.prototype.loadFiles = function(paths, sync, params, callback) {\r\n *    if (sync) {\r\n *        var ret = [];\r\n *        // synchronous load -- just return the result\r\n *        paths.forEach(function (path) {\r\n *            var json = fs.readFileSync(path, \"utf-8\");\r\n *            ret.push(json ? JSON.parse(json) : undefined);\r\n *        });\r\n *        \r\n *        return ret;\r\n *    }\r\n *    this.callback = callback;\r\n *\r\n *    // asynchronous\r\n *    this.results = [];\r\n *    this._loadFilesAsync(paths);\r\n * }\r\n * myLoader.prototype._loadFilesAsync = function (paths) {\r\n *    if (paths.length > 0) {\r\n *        var file = paths.shift();\r\n *        fs.readFile(file, \"utf-8\", function(err, json) {\r\n *            this.results.push(err ? undefined : JSON.parse(json));\r\n *            // call self recursively so that the callback is only called at the end\r\n *            // when all the files are loaded sequentially\r\n *            if (paths.length > 0) {\r\n *                this._loadFilesAsync(paths);\r\n *            } else {\r\n *                this.callback(this.results);\r\n *            }\r\n *        });\r\n *     }\r\n * }\r\n * \r\n * // bind to \"this\" so that \"this\" is relative to your own instance\r\n * ilib.setLoaderCallback(new myLoader());\r\n * </pre>\r\n\r\n * @param {Array.<string>} paths An array of paths to load from wherever the files are stored \r\n * @param {Boolean} sync if true, load the files synchronously, and false means asynchronously\r\n * @param {Object} params an object with any extra parameters for the loader. These can be \r\n * anything. The caller of the ilib class passes these parameters in. Presumably, the code that\r\n * calls ilib and the code that provides the loader are together and can have a private \r\n * agreement between them about what the parameters should contain.\r\n * @param {function(Object)} callback function to call when the files are all loaded. The \r\n * parameter of the callback function is the contents of the files.\r\n */\r\nilib.Loader.prototype.loadFiles = function (paths, sync, params, callback) {};\r\n\r\n/**\r\n * Return all files available for loading using this loader instance.\r\n * This method returns an object where the properties are the paths to\r\n * directories where files are loaded from and the values are an array\r\n * of strings containing the relative paths under the directory of each\r\n * file that can be loaded.<p>\r\n * \r\n * Example:\r\n *  <pre>\r\n *  {\r\n *      \"/usr/share/javascript/ilib/locale\": [\r\n *          \"dateformats.json\",\r\n *          \"aa/dateformats.json\",\r\n *          \"af/dateformats.json\",\r\n *          \"agq/dateformats.json\",\r\n *          \"ak/dateformats.json\",\r\n *          ...\r\n *          \"zxx/dateformats.json\"\r\n *      ]\r\n *  }\r\n *  </pre>\r\n * @returns {Object} a hash containing directory names and\r\n * paths to file that can be loaded by this loader \r\n */\r\nilib.Loader.prototype.listAvailableFiles = function() {};\r\n\r\n/**\r\n * Return true if the file in the named path is available for loading using\r\n * this loader. The path may be given as an absolute path, in which case\r\n * only that file is checked, or as a relative path, in which case, the\r\n * relative path may appear underneath any of the directories that the loader\r\n * knows about.\r\n * @returns {boolean} true if the file in the named path is available for loading, and\r\n * false otherwise\r\n */\r\nilib.Loader.prototype.isAvailable = function(path) {};\r\n\r\n/**\r\n * Set the custom loader used to load ilib's locale data in your environment. \r\n * The instance passed in must implement the Loader interface. See the\r\n * Loader class documentation for more information about loaders. \r\n * \r\n * @static\r\n * @param {ilib.Loader} loader class to call to access the requested data.\r\n * @return {boolean} true if the loader was installed correctly, or false\r\n * if not\r\n */\r\nilib.setLoaderCallback = function(loader) {\r\n    // only a basic check\r\n    if ((typeof(loader) === 'object' && typeof(loader.loadFiles) === 'function') || \r\n            typeof(loader) === 'function' || typeof(loader) === 'undefined') {\r\n        //console.log(\"setting callback loader to \" + (loader ? loader.name : \"undefined\"));\r\n        ilib._load = loader;\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Return the custom Loader instance currently in use with this instance \r\n * of ilib. If there is no loader, this method returns undefined.\r\n * \r\n * @protected\r\n * @static\r\n * @return {ilib.Loader|undefined} the loader instance currently in use, or \r\n * undefined if there is no such loader\r\n */\r\nilib.getLoader = function() {\r\n\treturn ilib._load;\r\n};\r\n\r\n/**\r\n * Test whether an object in an javascript array. \r\n * \r\n * @static\r\n * @param {*} object The object to test\r\n * @return {boolean} return true if the object is an array\r\n * and false otherwise\r\n */\r\nilib.isArray = function(object) {\r\n\tvar o;\r\n\tif (typeof(object) === 'object') {\r\n\t\to = /** @type {Object|null|undefined} */ object;\r\n\t\treturn Object.prototype.toString.call(o) === '[object Array]';\r\n\t}\r\n\treturn false; \r\n};\r\n\r\n/**\r\n * Extend object1 by mixing in everything from object2 into it. The objects\r\n * are deeply extended, meaning that this method recursively descends the\r\n * tree in the objects and mixes them in at each level. Arrays are extended\r\n * by concatenating the elements of object2 onto those of object1.  \r\n * \r\n * @static\r\n * @param {Object} object1 the target object to extend\r\n * @param {Object=} object2 the object to mix in to object1\r\n * @return {Object} returns object1\r\n */\r\nilib.extend = function (object1, object2) {\r\n\tvar prop = undefined;\r\n\tif (object2) {\r\n\t\tfor (prop in object2) {\r\n\t\t\tif (prop && typeof(object2[prop]) !== 'undefined') {\r\n\t\t\t\tif (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {\r\n\t\t\t\t\t//console.log(\"Merging array prop \" + prop);\r\n\t\t\t\t\tobject1[prop] = object1[prop].concat(object2[prop]);\r\n\t\t\t\t} else if (typeof(object1[prop]) === 'object' && typeof(object2[prop]) === 'object') {\r\n\t\t\t\t\t//console.log(\"Merging object prop \" + prop);\r\n\t\t\t\t\tif (prop !== \"ilib\") {\r\n\t\t\t\t\t\tobject1[prop] = ilib.extend(object1[prop], object2[prop]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//console.log(\"Copying prop \" + prop);\r\n\t\t\t\t\t// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\r\n\t\t\t\t\tobject1[prop] = object2[prop];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn object1;\r\n};\r\n\r\n/**\r\n * If Function.prototype.bind does not exist in this JS engine, this\r\n * function reimplements it in terms of older JS functions.\r\n * bind() doesn't exist in many older browsers.\r\n * \r\n * @static\r\n * @param {Object} scope object that the method should operate on\r\n * @param {function(...)} method method to call\r\n * @return {function(...)|undefined} function that calls the given method \r\n * in the given scope with all of its arguments properly attached, or\r\n * undefined if there was a problem with the arguments\r\n */\r\nilib.bind = function(scope, method/*, bound arguments*/){\r\n\tif (!scope || !method) {\r\n\t\treturn undefined;\r\n\t}\r\n\t\r\n\t/** @protected \r\n\t * @param {Arguments} inArrayLike\r\n\t * @param {number=} inOffset\r\n\t */\r\n\tfunction cloneArray(inArrayLike, inOffset) {\r\n\t\tvar arr = [];\r\n\t\tfor(var i = inOffset || 0, l = inArrayLike.length; i<l; i++){\r\n\t\t\tarr.push(inArrayLike[i]);\r\n\t\t}\r\n\t\treturn arr;\r\n\t}\r\n\r\n\tif (typeof(method) === 'function') {\r\n\t\tvar func, args = cloneArray(arguments, 2);\r\n\t\tif (typeof(method.bind) === 'function') {\r\n\t\t\tfunc = method.bind.apply(method, [scope].concat(args));\r\n\t\t} else {\r\n\t\t\tfunc = function() {\r\n\t\t\t\tvar nargs = cloneArray(arguments);\r\n\t\t\t\t// invoke with collected args\r\n\t\t\t\treturn method.apply(scope, args.concat(nargs));\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn func;\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nilib._dyncode = false;\r\n\r\n/**\r\n * Return true if this copy of ilib is using dynamically loaded code. It returns\r\n * false for pre-assembled code.\r\n * \r\n * @static\r\n * @return {boolean} true if this ilib uses dynamically loaded code, and false otherwise\r\n */\r\nilib.isDynCode = function() {\r\n\treturn ilib._dyncode;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nilib._dyndata = false;\r\n\r\n/**\r\n * Return true if this copy of ilib is using dynamically loaded locale data. It returns\r\n * false for pre-assembled data.\r\n * \r\n * @static\r\n * @return {boolean} true if this ilib uses dynamically loaded locale data, and false otherwise\r\n */\r\nilib.isDynData = function() {\r\n\treturn ilib._dyndata;\r\n};\r\n\r\nilib._loadtime = new Date().getTime();\r\n","/*\r\n * MathUtils.js - Misc math utility routines\r\n * \r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar MathUtils = {};\r\n\r\n/**\r\n * Return the sign of the given number. If the sign is negative, this function\r\n * returns -1. If the sign is positive or zero, this function returns 1.\r\n * @static\r\n * @param {number} num the number to test\r\n * @return {number} -1 if the number is negative, and 1 otherwise\r\n */\r\nMathUtils.signum = function (num) {\r\n\tvar n = num;\r\n\tif (typeof(num) === 'string') {\r\n\t\tn = parseInt(num, 10);\r\n\t} else if (typeof(num) !== 'number') {\r\n\t\treturn 1;\r\n\t}\r\n\treturn (n < 0) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} num number to round\r\n * @return {number} rounded number\r\n */\r\nMathUtils.floor = function (num) {\r\n\treturn Math.floor(num);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} num number to round\r\n * @return {number} rounded number\r\n */\r\nMathUtils.ceiling = function (num) {\r\n\treturn Math.ceil(num);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} num number to round\r\n * @return {number} rounded number\r\n */\r\nMathUtils.down = function (num) {\r\n\treturn (num < 0) ? Math.ceil(num) : Math.floor(num);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} num number to round\r\n * @return {number} rounded number\r\n */\r\nMathUtils.up = function (num) {\r\n\treturn (num < 0) ? Math.floor(num) : Math.ceil(num);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} num number to round\r\n * @return {number} rounded number\r\n */\r\nMathUtils.halfup = function (num) {\r\n\treturn (num < 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} num number to round\r\n * @return {number} rounded number\r\n */\r\nMathUtils.halfdown = function (num) {\r\n\treturn (num < 0) ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} num number to round\r\n * @return {number} rounded number\r\n */\r\nMathUtils.halfeven = function (num) {\r\n\treturn (Math.floor(num) % 2 === 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} num number to round\r\n * @return {number} rounded number\r\n */\r\nMathUtils.halfodd = function (num) {\r\n\treturn (Math.floor(num) % 2 !== 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);\r\n};\r\n\r\n/**\r\n * Do a proper modulo function. The Javascript % operator will give the truncated\r\n * division algorithm, but for calendrical calculations, we need the Euclidean\r\n * division algorithm where the remainder of any division, whether the dividend\r\n * is negative or not, is always a positive number in the range [0, modulus).<p>\r\n * \r\n * \r\n * @static\r\n * @param {number} dividend the number being divided\r\n * @param {number} modulus the number dividing the dividend. This should always be a positive number.\r\n * @return the remainder of dividing the dividend by the modulus.  \r\n */\r\nMathUtils.mod = function (dividend, modulus) {\r\n\tif (modulus == 0) {\r\n\t\treturn 0;\r\n\t}\r\n\tvar x = dividend % modulus;\r\n\treturn (x < 0) ? x + modulus : x;\r\n};\r\n\r\n/**\r\n * Do a proper adjusted modulo function. The Javascript % operator will give the truncated\r\n * division algorithm, but for calendrical calculations, we need the Euclidean\r\n * division algorithm where the remainder of any division, whether the dividend\r\n * is negative or not, is always a positive number in the range (0, modulus]. The adjusted\r\n * modulo function differs from the regular modulo function in that when the remainder is\r\n * zero, the modulus should be returned instead.<p>\r\n * \r\n * \r\n * @static\r\n * @param {number} dividend the number being divided\r\n * @param {number} modulus the number dividing the dividend. This should always be a positive number.\r\n * @return the remainder of dividing the dividend by the modulus.  \r\n */\r\nMathUtils.amod = function (dividend, modulus) {\r\n\tif (modulus == 0) {\r\n\t\treturn 0;\r\n\t}\r\n\tvar x = dividend % modulus;\r\n\treturn (x <= 0) ? x + modulus : x;\r\n};\r\n\r\nmodule.exports = MathUtils;\r\n","/*\r\n * Path.js - minimal pure js implementation of the nodejs path module\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar Path = {\r\n\t/**\r\n\t * Return the parent directory of the given pathname\r\n\t * similar to the dirname shell function.  \r\n\t * @static\r\n\t * @param {string} pathname path to check\r\n\t * @return {string} the parent dir of the given pathname\r\n\t */\r\n\tdirname: function(pathname) {\r\n\t\tpathname = pathname.replace(/\\\\/g, \"/\");\r\n\t\tvar i = pathname.lastIndexOf(\"/\");\r\n\t\treturn i !== -1 ? pathname.substring(0,i) : pathname;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the normalized version of the given pathname. This\r\n\t * cleans up things like double directory separators and such.\r\n\t * @static\r\n\t * @param {string} pathname path to check\r\n\t * @return {string} the normalized version of the given pathname\r\n\t */\r\n\tnormalize: function(pathname) {\r\n\t\tif (pathname) {\r\n\t\t\tpathname = pathname.replace(/\\\\/g, \"/\");\r\n\t\t\tpathname = pathname.replace(/\\/\\//g, \"/\");\r\n\t\t\tpathname = pathname.replace(/\\/[^/]*[^\\./]\\/\\.\\./g, \"/.\");\r\n\t\t\tpathname = pathname.replace(/\\/\\//g, \"/\");\r\n\t\t\tpathname = pathname.replace(/\\/\\.\\//g, \"/\");\r\n\t\t\tpathname = pathname.replace(/^\\.\\//, \"\");\r\n\t\t\tpathname = pathname.replace(/\\/\\//g, \"/\");\r\n\t\t\tpathname = pathname.replace(/\\/\\.$/, \"/\");\r\n\t\t\tpathname = pathname.replace(/\\/\\//g, \"/\");\r\n\t\t\tif (pathname.length > 1) pathname = pathname.replace(/\\/$/, \"\");\r\n\t\t\tif (pathname.length === 0) pathname = '.';\r\n\t\t}\r\n\t\treturn pathname;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return a path that is the concatenation of all the of the arguments\r\n\t * which each name a path segment.\r\n\t * @static\r\n\t * @param {...string} var_args\r\n\t * @return {string} the concatenated pathname\r\n\t */\r\n\tjoin: function(var_args) {\r\n\t\tvar arr = [];\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tarr.push(arguments[i] && arguments[i].length > 0 ? arguments[i] : \".\");\r\n\t\t}\r\n\t\treturn Path.normalize(arr.join(\"/\"));\r\n\t}\r\n};\r\n\r\nmodule.exports = Path;\r\n","/*\r\n * packedbuffer.js - represent a packed buffer of bytes\r\n * \r\n * Copyright © 2014 LG Electronics, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/**\r\n * @constructor\r\n * Represents a binary buffer of unsigned bytes that will be parsed in various ways. The buffer \r\n * can be decoded by reading various lengths of bytes and interpretting them as longs\r\n * or unsigned bytes, etc. The bytes are interpretted in big-endian (network) format.\r\n * @param {string} buffer the binary buffer represented as a string\r\n */\r\nvar PackedBuffer = function (buffer) {\r\n\tthis.buffer = buffer;\r\n\tthis.index = 0;\r\n};\r\n\r\n/**\r\n * Return the specified number of signed long integers from the current location in\r\n * the buffer as an array of numbers and advance the current pointer in the buffer.\r\n * This method will only return as many longs as are available in the rest of the\r\n * buffer.\r\n * \r\n * @param {number} num The number of longs to return\r\n * @returns {Array.<number>} the array of signed long integers\r\n */\r\nPackedBuffer.prototype.getLongs = function(num) {\r\n\tvar result = undefined;\r\n\tif (this.buffer && this.index < this.buffer.length) {\r\n\t\tresult = [];\r\n\t\tfor (var i = 0; i < num && this.index+3 < this.buffer.length; i++) {\r\n\t\t\tvar longnum = this.buffer[this.index] << 24 | \r\n\t\t\t\tthis.buffer[this.index+1] << 16 | \r\n\t\t\t\tthis.buffer[this.index+2] << 8 | \r\n\t\t\t\tthis.buffer[this.index+3];\r\n\t\t\tresult.push(longnum);\r\n\t\t\tthis.index += 4;\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Return a signed long integer from the current location in\r\n * the buffer as an array of numbers and advance the current pointer in the buffer.\r\n * This method will only return a long if it is available in the buffer, otherwise\r\n * it will return undefined.\r\n * \r\n * @returns {number} the long at the current point in the buffer, or undefined if\r\n * there is not enough bytes left in the buffer to form a long\r\n */\r\nPackedBuffer.prototype.getLong = function() {\r\n\tvar longs = this.getLongs(1);\r\n\tif (longs && longs.length > 0) {\r\n\t\treturn longs[0];\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\n/**\r\n * Return the specified number of signed byte integers from the current location in\r\n * the buffer as an array of numbers and advance the current pointer in the buffer.\r\n * This method will only return as many bytes as are available in the rest of the\r\n * buffer.\r\n * \r\n * @param {number|undefined} num The number of bytes to return\r\n * @returns {Array.<number>} the array of signed byte integers\r\n */\r\nPackedBuffer.prototype.getBytes = function(num) {\r\n\tvar result = undefined;\r\n\tif (this.buffer && this.index < this.buffer.length) {\r\n\t\tresult = [];\r\n\t\tfor (var i = 0; i < num && this.index < this.buffer.length; i++) {\r\n\t\t\tvar bytenum = this.buffer[this.index++];\r\n\t\t\tif (bytenum & 0x80) {\r\n\t\t\t\tbytenum -= 0x100;\r\n\t\t\t}\r\n\t\t\tresult.push(bytenum);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Return a signed byte integer from the current location in\r\n * the buffer as an array of numbers and advance the current pointer in the buffer.\r\n * This method will only return a byte if it is available in the buffer, otherwise\r\n * it will return undefined.\r\n * \r\n * @returns {number} the byte at the current point in the buffer, or undefined if\r\n * there is not enough bytes left in the buffer to form a byte\r\n */\r\nPackedBuffer.prototype.getByte = function() {\r\n\tvar bytes = this.getBytes(1);\r\n\tif (bytes && bytes.length > 0) {\r\n\t\treturn bytes[0];\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\n/**\r\n * Return the specified number of unsigned byte integers from the current location in\r\n * the buffer as an array of numbers and advance the current pointer in the buffer.\r\n * This method will only return as many bytes as are available in the rest of the\r\n * buffer.\r\n * \r\n * @param {number} num The number of bytes to return\r\n * @returns {Array.<number>} the array of unsigned byte integers\r\n */\r\nPackedBuffer.prototype.getUnsignedBytes = function(num) {\r\n\tvar result = undefined;\r\n\tif (this.buffer && this.index < this.buffer.length) {\r\n\t\tresult = [];\r\n\t\tfor (var i = 0; i < num && this.index < this.buffer.length; i++) {\r\n\t\t\tresult.push(this.buffer[this.index++]);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n\t\r\n};\r\n\r\n/**\r\n * Return a string made out of the given number of bytes and convert\r\n * from UTF-8 to UTF-16.\r\n * \r\n * @param {number} num The number of bytes to make a string out of\r\n * @returns {string} a string made out of the given bytes\r\n */\r\nPackedBuffer.prototype.getString = function(num) {\r\n\tvar arr = this.getUnsignedBytes(num);\r\n\tvar str = \"\";\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tstr += String.fromCharCode(arr[i]);\r\n\t}\r\n\treturn str;\r\n\t\r\n};\r\n\r\n/**\r\n * Advance the current pointer in the buffer by the specified number of\r\n * bytes in the string.\r\n * \r\n * @param {number} num The number of bytes to skip\r\n */\r\nPackedBuffer.prototype.skip = function(num) {\r\n\tthis.index += num;\r\n};\r\n\r\nmodule.exports = PackedBuffer;","/*\r\n * SearchUtils.js - Misc search utility routines\r\n * \r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar SearchUtils = {};\r\n\r\n/**\r\n * Binary search a sorted array for a particular target value.\r\n * If the exact value is not found, it returns the index of the smallest \r\n * entry that is greater than the given target value.<p> \r\n * \r\n * The comparator\r\n * parameter is a function that knows how to compare elements of the \r\n * array and the target. The function should return a value greater than 0\r\n * if the array element is greater than the target, a value less than 0 if\r\n * the array element is less than the target, and 0 if the array element \r\n * and the target are equivalent.<p>\r\n * \r\n * If the comparator function is not specified, this function assumes\r\n * the array and the target are numeric values and should be compared \r\n * as such.<p>\r\n * \r\n * \r\n * @static\r\n * @param {*} target element being sought \r\n * @param {Array} arr the array being searched\r\n * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries\r\n * in the array  \r\n * @return the index of the array into which the value would fit if \r\n * inserted, or -1 if given array is not an array or the target is not \r\n * a number\r\n */\r\nSearchUtils.bsearch = function(target, arr, comparator) {\r\n\tif (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined') {\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\tvar high = arr.length - 1,\r\n\t\tlow = 0,\r\n\t\tmid = 0,\r\n\t\tvalue,\r\n\t\tcmp = comparator || SearchUtils.bsearch.numbers;\r\n\t\r\n\twhile (low <= high) {\r\n\t\tmid = Math.floor((high+low)/2);\r\n\t\tvalue = cmp(arr[mid], target);\r\n\t\tif (value > 0) {\r\n\t\t\thigh = mid - 1;\r\n\t\t} else if (value < 0) {\r\n\t\t\tlow = mid + 1;\r\n\t\t} else {\r\n\t\t\treturn mid;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn low;\r\n};\r\n\r\n/**\r\n * Returns whether or not the given element is greater than, less than,\r\n * or equal to the given target.<p>\r\n * \r\n * @private\r\n * @static\r\n * @param {number} element the element being tested\r\n * @param {number} target the target being sought\r\n */\r\nSearchUtils.bsearch.numbers = function(element, target) {\r\n\treturn element - target;\r\n};\r\n\r\n/**\r\n * Do a bisection search of a function for a particular target value.<p> \r\n * \r\n * The function to search is a function that takes a numeric parameter, \r\n * does calculations, and returns gives a numeric result. The \r\n * function should should be smooth and not have any discontinuities \r\n * between the low and high values of the parameter.\r\n *  \r\n * \r\n * @static\r\n * @param {number} target value being sought\r\n * @param {number} low the lower bounds to start searching\r\n * @param {number} high the upper bounds to start searching\r\n * @param {number} precision minimum precision to support. Use 0 if you want to use the default.\r\n * @param {?function(number)=} func function to search \r\n * @return an approximation of the input value to the function that gives the desired\r\n * target output value, correct to within the error range of Javascript floating point \r\n * arithmetic, or NaN if there was some error\r\n */\r\nSearchUtils.bisectionSearch = function(target, low, high, precision, func) {\r\n\tif (typeof(target) !== 'number' || \r\n\t\t\ttypeof(low) !== 'number' || \r\n\t\t\ttypeof(high) !== 'number' || \r\n\t\t\ttypeof(func) !== 'function') {\r\n\t\treturn NaN;\r\n\t}\r\n\t\r\n\tvar mid = 0,\r\n\t\tvalue,\r\n\t\tpre = precision > 0 ? precision : 1e-13;\r\n\t\r\n\tdo {\r\n\t\tmid = (high+low)/2;\r\n\t\tvalue = func(mid);\r\n\t\tif (value > target) {\r\n\t\t\thigh = mid;\r\n\t\t} else if (value < target) {\r\n\t\t\tlow = mid;\r\n\t\t}\r\n\t} while (high - low > pre);\r\n\t\r\n\treturn mid;\r\n};\r\n\r\nmodule.exports = SearchUtils;\r\n","/*\r\n * JulianDay.js - A Julian Day object.\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @class\r\n * A Julian Day class. A Julian Day is a date based on the Julian Day count\r\n * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations. \r\n * Do not confuse it with a date in the Julian calendar, which it has very\r\n * little in common with. The naming is unfortunately close, and comes from history.<p>\r\n * \r\n * \r\n * @constructor\r\n * @param {number} num the Julian Day expressed as a floating point number \r\n */\r\nvar JulianDay = function(num) {\r\n\tthis.jd = num;\r\n\tthis.days = Math.floor(this.jd);\r\n\tthis.frac = num - this.days;\r\n};\r\n\r\nJulianDay.prototype = {\r\n\t/**\r\n\t * Return the integral portion of this Julian Day instance. This corresponds to\r\n\t * the number of days since the beginning of the epoch.\r\n\t * \r\n\t * @return {number} the integral portion of this Julian Day\r\n\t */\r\n\tgetDays: function() {\r\n\t\treturn this.days;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Set the date of this Julian Day instance.\r\n\t * \r\n\t * @param {number} days the julian date expressed as a floating point number\r\n\t */\r\n\tsetDays: function(days) {\r\n\t\tthis.days = Math.floor(days);\r\n\t\tthis.jd = this.days + this.frac;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the fractional portion of this Julian Day instance. This portion \r\n\t * corresponds to the time of day for the instance.\r\n\t */\r\n\tgetDayFraction: function() {\r\n\t\treturn this.frac;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Set the fractional part of the Julian Day. The fractional part represents\r\n\t * the portion of a fully day. Julian dates start at noon, and proceed until\r\n\t * noon of the next day. That would mean midnight is represented as a fractional\r\n\t * part of 0.5.\r\n\t * \r\n\t * @param {number} fraction The fractional part of the Julian date\r\n\t */\r\n\tsetDayFraction: function(fraction) {\r\n\t\tvar t = Math.floor(fraction);\r\n\t\tthis.frac = fraction - t;\r\n\t\tthis.jd = this.days + this.frac;\r\n\t},\r\n\t\r\n\t/** \r\n\t * Return the Julian Day expressed as a floating point number.\r\n\t * @return {number} the Julian Day as a number\r\n\t */\r\n\tgetDate: function () {\r\n\t\treturn this.jd;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Set the date of this Julian Day instance.\r\n\t * \r\n\t * @param {number} num the numeric Julian Day to set into this instance\r\n\t */\r\n\tsetDate: function (num) {\r\n\t\tthis.jd = num;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Add an offset to the current date instance. The offset should be expressed in\r\n\t * terms of Julian days. That is, each integral unit represents one day of time, and\r\n\t * fractional part represents a fraction of a regular 24-hour day.\r\n\t * \r\n\t * @param {number} offset an amount to add (or subtract) to the current result instance.\r\n\t */\r\n\taddDate: function(offset) {\r\n\t\tif (typeof(offset) === 'number') {\r\n\t\t\tthis.jd += offset;\r\n\t\t\tthis.days = Math.floor(this.jd);\r\n\t\t\tthis.frac = this.jd - this.days;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = JulianDay;\r\n","/*\r\n * Calendar.js - Represent a calendar object.\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @class\r\n * Superclass for all calendar subclasses that contains shared \r\n * functionality. This class is never instantiated on its own. Instead,\r\n * you should use the {@link CalendarFactory} function to manufacture a new\r\n * instance of a subclass of Calendar. \r\n * \r\n * @private\r\n * @constructor\r\n */\r\nvar Calendar = function() {\r\n};\r\n\r\n/* place for the subclasses to put their constructors so that the factory method\r\n * can find them. Do this to add your calendar after it's defined: \r\n * Calendar._constructors[\"mytype\"] = Calendar.MyTypeConstructor;\r\n */\r\nCalendar._constructors = {};\r\n\r\nCalendar.prototype = {\r\n\t/**\r\n\t * Return the type of this calendar.\r\n\t * \r\n\t * @return {string} the name of the type of this calendar \r\n\t */\r\n\tgetType: function() {\r\n\t\tthrow \"Cannot call methods of abstract class Calendar\";\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the number of months in the given year. The number of months in a year varies\r\n\t * for some luni-solar calendars because in some years, an extra month is needed to extend the \r\n\t * days in a year to an entire solar year. The month is represented as a 1-based number\r\n\t * where 1=first month, 2=second month, etc.\r\n\t * \r\n\t * @param {number} year a year for which the number of months is sought\r\n\t * @return {number} The number of months in the given year\r\n\t */\r\n\tgetNumMonths: function(year) {\r\n\t\tthrow \"Cannot call methods of abstract class Calendar\";\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the number of days in a particular month in a particular year. This function\r\n\t * can return a different number for a month depending on the year because of things\r\n\t * like leap years.\r\n\t * \r\n\t * @param {number} month the month for which the length is sought\r\n\t * @param {number} year the year within which that month can be found\r\n\t * @return {number} the number of days within the given month in the given year\r\n\t */\r\n\tgetMonLength: function(month, year) {\r\n\t\tthrow \"Cannot call methods of abstract class Calendar\";\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return true if the given year is a leap year in this calendar.\r\n\t * The year parameter may be given as a number.\r\n\t * \r\n\t * @param {number} year the year for which the leap year information is being sought\r\n\t * @return {boolean} true if the given year is a leap year\r\n\t */\r\n\tisLeapYear: function(year) {\r\n\t\tthrow \"Cannot call methods of abstract class Calendar\";\r\n\t}\r\n};\r\n\r\nmodule.exports = Calendar;","/*\r\n * JSUtils.js - Misc utilities to work around Javascript engine differences\r\n * \r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js\r\n\r\nvar ilib = require(\"./ilib.js\");\r\n\r\nvar JSUtils = {};\r\n\r\n/**\r\n * Perform a shallow copy of the source object to the target object. This only \r\n * copies the assignments of the source properties to the target properties, \r\n * but not recursively from there.<p>\r\n * \r\n * \r\n * @static\r\n * @param {Object} source the source object to copy properties from\r\n * @param {Object} target the target object to copy properties into\r\n */\r\nJSUtils.shallowCopy = function (source, target) {\r\n\tvar prop = undefined;\r\n\tif (source && target) {\r\n\t\tfor (prop in source) {\r\n\t\t\tif (prop !== undefined && typeof(source[prop]) !== 'undefined') {\r\n\t\t\t\ttarget[prop] = source[prop];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Perform a recursive deep copy from the \"from\" object to the \"deep\" object.\r\n * \r\n * @static\r\n * @param {Object} from the object to copy from\r\n * @param {Object} to the object to copy to\r\n * @return {Object} a reference to the the \"to\" object\r\n */\r\nJSUtils.deepCopy = function(from, to) {\r\n\tvar prop;\r\n\r\n\tfor (prop in from) {\r\n\t\tif (prop) {\r\n\t\t\tif (typeof(from[prop]) === 'object') {\r\n\t\t\t\tto[prop] = {};\r\n\t\t\t\tJSUtils.deepCopy(from[prop], to[prop]);\r\n\t\t\t} else {\r\n\t\t\t\tto[prop] = from[prop];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn to;\r\n};\r\n\r\n/**\r\n * Map a string to the given set of alternate characters. If the target set\r\n * does not contain a particular character in the input string, then that\r\n * character will be copied to the output unmapped.\r\n * \r\n * @static\r\n * @param {string} str a string to map to an alternate set of characters\r\n * @param {Array.<string>|Object} map a mapping to alternate characters\r\n * @return {string} the source string where each character is mapped to alternate characters\r\n */\r\nJSUtils.mapString = function (str, map) {\r\n\tvar mapped = \"\";\r\n\tif (map && str) {\r\n\t\tfor (var i = 0; i < str.length; i++) {\r\n\t\t\tvar c = str.charAt(i); // TODO use a char iterator?\r\n\t\t\tmapped += map[c] || c; \r\n\t\t}\r\n\t} else {\r\n\t\tmapped = str;\r\n\t}\r\n\treturn mapped;\r\n};\r\n\r\n/**\r\n * Check if an object is a member of the given array. If this javascript engine\r\n * support indexOf, it is used directly. Otherwise, this function implements it\r\n * itself. The idea is to make sure that you can use the quick indexOf if it is\r\n * available, but use a slower implementation in older engines as well.\r\n * \r\n * @static\r\n * @param {Array.<Object>} array array to search\r\n * @param {Object} obj object being sought. This should be of the same type as the\r\n * members of the array being searched. If not, this function will not return\r\n * any results.\r\n * @return {number} index of the object in the array, or -1 if it is not in the array.\r\n */\r\nJSUtils.indexOf = function(array, obj) {\r\n\tif (!array || !obj) {\r\n\t\treturn -1;\r\n\t}\r\n\tif (typeof(array.indexOf) === 'function') {\r\n\t\treturn array.indexOf(obj);\r\n\t} else {\r\n\t\tfor (var i = 0; i < array.length; i++) {\r\n\t        if (array[i] === obj) {\r\n\t            return i;\r\n\t        }\r\n\t    }\r\n\t    return -1;\r\n\t}\r\n};\r\n\r\n/**\r\n * Convert a string into the hexadecimal representation\r\n * of the Unicode characters in that string.\r\n * \r\n * @static\r\n * @param {string} string The string to convert\r\n * @param {number=} limit the number of digits to use to represent the character (1 to 8)\r\n * @return {string} a hexadecimal representation of the\r\n * Unicode characters in the input string\r\n */\r\nJSUtils.toHexString = function(string, limit) {\r\n\tvar i, \r\n\t\tresult = \"\", \r\n\t\tlim = (limit && limit < 9) ? limit : 4;\r\n\t\r\n\tif (!string) {\r\n\t\treturn \"\";\r\n\t}\r\n\tfor (i = 0; i < string.length; i++) {\r\n\t\tvar ch = string.charCodeAt(i).toString(16);\r\n\t\tresult += \"00000000\".substring(0, lim-ch.length) + ch;\r\n\t}\r\n\treturn result.toUpperCase();\r\n};\r\n\r\n/**\r\n * Test whether an object in a Javascript Date. \r\n * \r\n * @static\r\n * @param {*} object The object to test\r\n * @return {boolean} return true if the object is a Date\r\n * and false otherwise\r\n */\r\nJSUtils.isDate = function(object) {\r\n\tvar o;\r\n\tif (typeof(object) === 'object') {\r\n\t\to = /** @type {Object|null|undefined} */ object;\r\n\t\treturn Object.prototype.toString.call(o) === '[object Date]';\r\n\t}\r\n\treturn false; \r\n};\r\n\r\n/**\r\n * Merge the properties of object2 into object1 in a deep manner and return a merged\r\n * object. If the property exists in both objects, the value in object2 will overwrite \r\n * the value in object1. If a property exists in object1, but not in object2, its value\r\n * will not be touched. If a property exists in object2, but not in object1, it will be \r\n * added to the merged result.<p>\r\n * \r\n * Name1 and name2 are for creating debug output only. They are not necessary.<p>\r\n * \r\n * \r\n * @static\r\n * @param {*} object1 the object to merge into\r\n * @param {*} object2 the object to merge\r\n * @param {boolean=} replace if true, replace the array elements in object1 with those in object2.\r\n * If false, concatenate array elements in object1 with items in object2.\r\n * @param {string=} name1 name of the object being merged into\r\n * @param {string=} name2 name of the object being merged in\r\n * @return {Object} the merged object\r\n */\r\nJSUtils.merge = function (object1, object2, replace, name1, name2) {\r\n\tvar prop = undefined,\r\n\t\tnewObj = {};\r\n\tfor (prop in object1) {\r\n\t\tif (prop && typeof(object1[prop]) !== 'undefined') {\r\n\t\t\tnewObj[prop] = object1[prop];\r\n\t\t}\r\n\t}\r\n\tfor (prop in object2) {\r\n\t\tif (prop && typeof(object2[prop]) !== 'undefined') {\r\n\t\t\tif (ilib.isArray(object1[prop]) && ilib.isArray(object2[prop])) {\r\n\t\t\t\tif (typeof(replace) !== 'boolean' || !replace) {\r\n\t\t\t\t\tnewObj[prop] = [].concat(object1[prop]);\r\n\t\t\t\t\tnewObj[prop] = newObj[prop].concat(object2[prop]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewObj[prop] = object2[prop];\r\n\t\t\t\t}\r\n\t\t\t} else if (typeof(object1[prop]) === 'object' && typeof(object2[prop]) === 'object') {\r\n\t\t\t\tnewObj[prop] = JSUtils.merge(object1[prop], object2[prop], replace);\r\n\t\t\t} else {\r\n\t\t\t\t// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily\r\n\t\t\t\tif (name1 && name2 && newObj[prop] == object2[prop]) {\r\n\t\t\t\t\tconsole.log(\"Property \" + prop + \" in \" + name1 + \" is being overridden by the same value in \" + name2);\r\n\t\t\t\t}\r\n\t\t\t\tnewObj[prop] = object2[prop];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn newObj;\r\n};\r\n\r\n/**\r\n * Return true if the given object has no properties.<p>\r\n * \r\n * \r\n * @static\r\n * @param {Object} obj the object to check\r\n * @return {boolean} true if the given object has no properties, false otherwise\r\n */\r\nJSUtils.isEmpty = function (obj) {\r\n\tvar prop = undefined;\r\n\t\r\n\tif (!obj) {\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfor (prop in obj) {\r\n\t\tif (prop && typeof(obj[prop]) !== 'undefined') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * @static\r\n */\r\nJSUtils.hashCode = function(obj) {\r\n\tvar hash = 0;\r\n\t\r\n\tfunction addHash(hash, newValue) {\r\n\t\t// co-prime numbers creates a nicely distributed hash\r\n\t\thash *= 65543;\r\n\t\thash += newValue;\r\n\t\thash %= 2147483647; \r\n\t\treturn hash;\r\n\t}\r\n\t\r\n\tfunction stringHash(str) {\r\n\t\tvar hash = 0;\r\n\t\tfor (var i = 0; i < str.length; i++) {\r\n\t\t\thash = addHash(hash, str.charCodeAt(i));\r\n\t\t}\r\n\t\treturn hash;\r\n\t}\r\n\t\r\n\tswitch (typeof(obj)) {\r\n\t\tcase 'undefined':\r\n\t\t\thash = 0;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\thash = stringHash(obj);\r\n\t\t\tbreak;\r\n\t\tcase 'function':\r\n\t\tcase 'number':\r\n\t\tcase 'xml':\r\n\t\t\thash = stringHash(String(obj));\r\n\t\t\tbreak;\r\n\t\tcase 'boolean':\r\n\t\t\thash = obj ? 1 : 0;\r\n\t\t\tbreak;\r\n\t\tcase 'object':\r\n\t\t\tvar props = [];\r\n\t\t\tfor (var p in obj) {\r\n\t\t\t\tif (obj.hasOwnProperty(p)) {\r\n\t\t\t\t\tprops.push(p);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// make sure the order of the properties doesn't matter\r\n\t\t\tprops.sort();\r\n\t\t\tfor (var i = 0; i < props.length; i++) {\r\n\t\t\t\thash = addHash(hash, stringHash(props[i]));\r\n\t\t\t\thash = addHash(hash, JSUtils.hashCode(obj[props[i]]));\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\treturn hash;\r\n};\r\n\r\n\r\nmodule.exports = JSUtils;\r\n","/*\r\n * Loader.js - shared loader implementation\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar Path = require(\"./Path.js\");\r\nvar ilib = require(\"./ilib.js\");\r\n\r\n/** \r\n * @class\r\n * Superclass of the loader classes that contains shared functionality.\r\n * \r\n * @private\r\n * @constructor\r\n */\r\nvar Loader = function() {\r\n\t// console.log(\"new Loader instance\");\r\n\r\n\tthis.protocol = \"file://\";\r\n\tthis.includePath = [];\r\n};\r\n\r\nLoader.prototype = new ilib.Loader();\r\nLoader.prototype.parent = ilib.Loader;\r\nLoader.prototype.constructor = Loader;\r\n\r\n/** @abstract */\r\nLoader.prototype._loadFile = function (pathname, sync, cb) {};\r\n\r\nLoader.prototype._exists = function(dir, file) {\r\n\tvar fullpath = Path.normalize(Path.join(dir, file));\r\n\tif (this.protocol !== \"http://\") {\r\n\t\tvar text = this._loadFile(fullpath, true);\r\n\t\tif (text) {\r\n\t\t\tthis.includePath.push(dir);\r\n\t\t}\r\n\t} else {\r\n\t\t// put the dir on the list now assuming it exists, and check for its availability \r\n\t\t// later so we can avoid the 404 errors eventually\r\n\t\tthis.includePath.push(dir);\r\n\t\tthis._loadFile(fullpath, false, ilib.bind(this, function(text) {\r\n\t\t\tif (!text) {\r\n\t\t\t\t//console.log(\"Loader._exists: removing \" + dir + \" from the include path because it doesn't exist.\");\r\n\t\t\t\tthis.includePath = this.includePath.slice(-1);\r\n\t\t\t}\r\n\t\t}));\r\n\t}\r\n};\r\n\r\nLoader.prototype._loadFileAlongIncludePath = function(includePath, pathname) {\r\n\tfor (var i = 0; i < includePath.length; i++) {\r\n\t\tvar manifest = this.manifest[includePath[i]];\r\n\t\tif (!manifest || Loader.indexOf(manifest, pathname) > -1) {\r\n\t\t\tvar filepath = Path.join(includePath[i], pathname);\r\n\t\t\t//console.log(\"Loader._loadFileAlongIncludePath: attempting sync load \" + filepath);\r\n\t\t\tvar text = this._loadFile(filepath, true);\r\n\t\t\tif (text) {\r\n\t\t\t\t//console.log(\"Loader._loadFileAlongIncludePath: succeeded\");\r\n\t\t\t\treturn text;\r\n\t\t\t} \r\n\t\t\t//else {\r\n\t\t\t\t//console.log(\"Loader._loadFileAlongIncludePath: failed\");\r\n\t\t\t//} \r\n\t\t} \r\n\t\t//else {\r\n\t\t\t//console.log(\"Loader._loadFileAlongIncludePath: \" + pathname + \" not in manifest for \" + this.includePath[i]);\r\n\t\t//}\r\n\t}\r\n\t\r\n\t//console.log(\"Loader._loadFileAlongIncludePath: file not found anywhere along the path.\");\r\n\treturn undefined;\r\n};\r\n\r\nLoader.prototype.loadFiles = function(paths, sync, params, callback) {\r\n\tvar includePath = params && params.base ? [params.base].concat(this.includePath) : this.includePath;\r\n\r\n\t//console.log(\"Loader loadFiles called\");\r\n\t// make sure we know what we can load\r\n\tif (!paths) {\r\n\t\t// nothing to load\r\n\t\t//console.log(\"nothing to load\");\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tif (params && params.returnOne) {\r\n\t\t// Only return the most locale-specific data. Do this by searching backwards\r\n\t\t// in the list of paths.\r\n\t\tvar pathname;\r\n\t\tvar tmp = [];\r\n\t\twhile ((pathname = paths.pop()) !== undefined) {\r\n\t\t\ttmp.push(pathname);\r\n\t\t}\r\n\t\tpaths = tmp;\r\n\t}\r\n\t\r\n\t//console.log(\"generic loader: attempting to load these files: \" + JSON.stringify(paths) + \"\\n\");\r\n\tif (sync) {\r\n\t\tvar ret = [];\r\n\t\t\r\n\t\t// synchronous\r\n\t\tthis._loadManifests(true);\r\n\t\t\r\n\t\tfor (var i = 0; i < paths.length; i++) {\r\n\t\t\tvar text = this._loadFileAlongIncludePath(includePath, Path.normalize(paths[i]));\r\n\t\t\tret.push(text ? JSON.parse(text) : undefined);\r\n\t\t\tif (params && params.returnOne && text) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// only call the callback at the end of the chain of files\r\n\t\tif (typeof(callback) === 'function') {\r\n\t\t\tcallback(ret);\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t// asynchronous\r\n\tthis._loadManifests(false, ilib.bind(this, function() {\r\n\t\t//console.log(\"Loader.loadFiles: now loading files asynchronously\");\r\n\t\tthis.results = [];\r\n\t\tthis._loadFilesAsync(includePath, paths, callback);\r\n\t}));\r\n};\r\n\r\nLoader.prototype._loadFilesAsyncAlongIncludePath = function (includes, filename, cb) {\r\n\tvar text = undefined;\r\n\t\r\n\tif (includes.length > 0) {\r\n\t\tvar root = includes[0];\r\n\t\tincludes = includes.slice(1);\r\n\t\t\r\n\t\tvar manifest = this.manifest[root];\r\n\t\tif (!manifest || Loader.indexOf(manifest, filename) > -1) {\r\n\t\t\tvar filepath = Path.join(root, filename);\r\n\t\t\tthis._loadFile(filepath, false, ilib.bind(this, function(t) {\r\n\t\t\t\t//console.log(\"Loader._loadFilesAsyncAlongIncludePath: loading \" + (t ? \" success\" : \" failed\"));\r\n\t\t\t\tif (t) {\r\n\t\t\t\t\tcb(t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._loadFilesAsyncAlongIncludePath(includes, filename, cb);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t} else {\r\n\t\t\t//console.log(\"Loader._loadFilesAsyncAlongIncludePath: \" + filepath + \" not in manifest for \" + root);\r\n\t\t\tthis._loadFilesAsyncAlongIncludePath(includes, filename, cb);\r\n\t\t}\r\n\t} else {\r\n\t\tcb();\r\n\t}\r\n};\r\n\r\nLoader.prototype._loadFilesAsync = function (includePath, paths, callback) {\r\n\tif (paths.length > 0) {\r\n\t\tvar filename = paths[0];\r\n\t\tpaths = paths.slice(1);\r\n\t\t\r\n\t\t//console.log(\"Loader._loadFilesAsync: attempting to load \" + filename + \" along the include path.\");\r\n\t\tthis._loadFilesAsyncAlongIncludePath(includePath, filename, ilib.bind(this, function (json) {\r\n\t\t\tthis.results.push(json ? JSON.parse(json) : undefined);\r\n\t\t\tthis._loadFilesAsync(includePath, paths, callback);\r\n\t\t}));\r\n\t} else {\r\n\t\t// only call the callback at the end of the chain of files\r\n\t\tif (typeof(callback) === 'function') {\r\n\t\t\tcallback(this.results);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nLoader.prototype._loadManifestFile = function(i, sync, cb) {\r\n\t//console.log(\"Loader._loadManifestFile: Checking include path \" + i + \" \" + this.includePath[i]);\r\n\tif (i < this.includePath.length) {\r\n\t\tvar filepath = Path.join(this.includePath[i], \"ilibmanifest.json\");\r\n\t\t//console.log(\"Loader._loadManifestFile: Loading manifest file \" + filepath);\r\n\t\tvar text = this._loadFile(filepath, sync, ilib.bind(this, function(text) {\r\n\t\t\tif (text) {\r\n\t\t\t\t//console.log(\"Loader._loadManifestFile: success!\");\r\n\t\t\t\tthis.manifest[this.includePath[i]] = JSON.parse(text).files;\r\n\t\t\t}\r\n\t\t\t//else console.log(\"Loader._loadManifestFile: failed...\");\r\n\t\t\tthis._loadManifestFile(i+1, sync, cb);\r\n\t\t}));\r\n\t} else {\r\n\t\tif (typeof(cb) === 'function') {\r\n\t\t\t//console.log(\"Loader._loadManifestFile: now calling callback function\");\r\n\t\t\tcb();\r\n\t\t}\r\n\t}\r\n};\r\n\r\nLoader.prototype._loadManifests = function(sync, cb) {\r\n\t//console.log(\"Loader._loadManifests: called \" + (sync ? \"synchronously\" : \"asychronously.\"));\r\n\tif (!this.manifest) {\r\n\t\t//console.log(\"Loader._loadManifests: attempting to find manifests\");\r\n\t\tthis.manifest = {};\r\n\t\tif (typeof(sync) !== 'boolean') {\r\n\t\t\tsync = true;\r\n\t\t}\r\n\t\t\t\r\n\t\tthis._loadManifestFile(0, sync, cb);\r\n\t} else {\r\n\t\t//console.log(\"Loader._loadManifests: already loaded\");\r\n\t\tif (typeof(cb) === 'function') {\r\n\t\t\t//console.log(\"Loader._loadManifests: now calling callback function\");\r\n\t\t\tcb();\r\n\t\t}\r\n\t}\r\n};\r\n\r\nLoader.prototype.listAvailableFiles = function(sync, cb) {\r\n\t//console.log(\"generic loader: list available files called\");\r\n\tthis._loadManifests(sync, ilib.bind(this, function () {\r\n\t\tif (typeof(cb) === 'function') {\r\n\t\t\t//console.log(\"generic loader: now calling caller's callback function\");\r\n\t\t\tcb(this.manifest);\r\n\t\t}\r\n\t}));\r\n\treturn this.manifest;\r\n};\r\n\r\nLoader.indexOf = function(array, obj) {\r\n\tif (!array || !obj) {\r\n\t\treturn -1;\r\n\t}\r\n\tif (typeof(array.indexOf) === 'function') {\r\n\t\treturn array.indexOf(obj);\r\n\t} else {\r\n\t\tfor (var i = 0; i < array.length; i++) {\r\n\t        if (array[i] === obj) {\r\n\t            return i;\r\n\t        }\r\n\t    }\r\n\t    return -1;\r\n\t}\r\n};\r\n\r\nLoader.prototype.checkAvailability = function(file) {\r\n\tfor (var dir in this.manifest) {\r\n\t\tif (Loader.indexOf(this.manifest[dir], file) !== -1) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn false;\r\n};\r\n\r\nLoader.prototype.isAvailable = function(file, sync, cb) {\r\n\t//console.log(\"Loader.isAvailable: called\");\r\n\tif (typeof(sync) !== 'boolean') {\r\n\t\tsync = true;\r\n\t}\r\n\tif (sync) {\r\n\t\tthis._loadManifests(sync);\r\n\t\treturn this.checkAvailability(file);\r\n\t}\r\n\t\r\n\tthis._loadManifests(false, ilib.bind(this, function () {\r\n\t\t// console.log(\"generic loader: isAvailable \" + path + \"? \");\r\n\t\tif (typeof(cb) === 'function') {\r\n\t\t\tcb(this.checkAvailability(file));\r\n\t\t}\r\n\t}));\r\n};\r\n\r\nmodule.exports = Loader;","/*\r\n * hebrew.js - Represent a Hebrew calendar object.\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* !depends ilib.js Calendar.js MathUtils.js */\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Hebrew calendar object. This class encodes information about\r\n * the Hebrew (Jewish) calendar. The Hebrew calendar is a tabular hebrew \r\n * calendar where the dates are calculated by arithmetic rules. This differs from \r\n * the religious Hebrew calendar which is used to mark the beginning of particular \r\n * holidays. The religious calendar depends on the first sighting of the new \r\n * crescent moon to determine the first day of the new month. Because humans and \r\n * weather are both involved, the actual time of sighting varies, so it is not \r\n * really possible to precalculate the religious calendar. Certain groups, such \r\n * as the Hebrew Society of North America, decreed in in 2007 that they will use\r\n * a calendar based on calculations rather than observations to determine the \r\n * beginning of lunar months, and therefore the dates of holidays.<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends Calendar\r\n */\r\nvar HebrewCal = function() {\r\n\tthis.type = \"hebrew\";\r\n};\r\n\r\n/**\r\n * Return the number of days elapsed in the Hebrew calendar before the\r\n * given year starts.\r\n * @private\r\n * @param {number} year the year for which the number of days is sought\r\n * @return {number} the number of days elapsed in the Hebrew calendar before the\r\n * given year starts\r\n */\r\nHebrewCal.elapsedDays = function(year) {\r\n\tvar months = Math.floor(((235*year) - 234)/19);\r\n\tvar parts = 204 + 793 * MathUtils.mod(months, 1080);\r\n\tvar hours = 11 + 12 * months + 793 * Math.floor(months/1080) + \r\n\t\tMath.floor(parts/1080);\r\n\tvar days = 29 * months + Math.floor(hours/24);\r\n\treturn (MathUtils.mod(3 * (days + 1), 7) < 3) ? days + 1 : days;\r\n};\r\n\r\n/**\r\n * Return the number of days that the New Year's (Rosh HaShanah) in the Hebrew \r\n * calendar will be corrected for the given year. Corrections are caused because New \r\n * Year's is not allowed to start on certain days of the week. To deal with \r\n * it, the start of the new year is corrected for the next year by adding a \r\n * day to the 8th month (Heshvan) and/or the 9th month (Kislev) in the current\r\n * year to make them 30 days long instead of 29.\r\n * \r\n * @private\r\n * @param {number} year the year for which the correction is sought\r\n * @param {number} elapsed number of days elapsed up to this year\r\n * @return {number} the number of days correction in the current year to make sure\r\n * Rosh HaShanah does not fall on undesirable days of the week\r\n */\r\nHebrewCal.newYearsCorrection = function(year, elapsed) {\r\n\tvar lastYear = HebrewCal.elapsedDays(year-1),\r\n\t\tthisYear = elapsed,\r\n\t\tnextYear = HebrewCal.elapsedDays(year+1);\r\n\t\r\n\treturn (nextYear - thisYear) == 356 ? 2 : ((thisYear - lastYear) == 382 ? 1 : 0);\r\n};\r\n\r\n/**\r\n * Return the rata die date of the new year for the given hebrew year.\r\n * @private\r\n * @param {number} year the year for which the new year is needed\r\n * @return {number} the rata die date of the new year\r\n */\r\nHebrewCal.newYear = function(year) {\r\n\tvar elapsed = HebrewCal.elapsedDays(year); \r\n\t\r\n\treturn elapsed + HebrewCal.newYearsCorrection(year, elapsed);\r\n};\r\n\r\n/**\r\n * Return the number of days in the given year. Years contain a variable number of\r\n * days because the date of Rosh HaShanah (New Year's) changes so that it doesn't\r\n * fall on particular days of the week. Days are added to the months of Heshvan\r\n * and/or Kislev in the previous year in order to prevent the current year's New\r\n * Year from being on Sunday, Wednesday, or Friday.\r\n * \r\n * @param {number} year the year for which the length is sought\r\n * @return {number} number of days in the given year\r\n */\r\nHebrewCal.daysInYear = function(year) {\r\n\treturn HebrewCal.newYear(year+1) - HebrewCal.newYear(year);\r\n};\r\n\r\n/**\r\n * Return true if the given year contains a long month of Heshvan. That is,\r\n * it is 30 days instead of 29.\r\n * \r\n * @private\r\n * @param {number} year the year in which that month is questioned\r\n * @return {boolean} true if the given year contains a long month of Heshvan\r\n */\r\nHebrewCal.longHeshvan = function(year) {\r\n\treturn MathUtils.mod(HebrewCal.daysInYear(year), 10) === 5;\r\n};\r\n\r\n/**\r\n * Return true if the given year contains a long month of Kislev. That is,\r\n * it is 30 days instead of 29.\r\n * \r\n * @private\r\n * @param {number} year the year in which that month is questioned\r\n * @return {boolean} true if the given year contains a short month of Kislev\r\n */\r\nHebrewCal.longKislev = function(year) {\r\n\treturn MathUtils.mod(HebrewCal.daysInYear(year), 10) !== 3;\r\n};\r\n\r\n/**\r\n * Return the date of the last day of the month for the given year. The date of\r\n * the last day of the month is variable because a number of months gain an extra \r\n * day in leap years, and it is variable which months gain a day for each leap \r\n * year and which do not.\r\n * \r\n * @param {number} month the month for which the number of days is sought\r\n * @param {number} year the year in which that month is\r\n * @return {number} the number of days in the given month and year\r\n */\r\nHebrewCal.prototype.lastDayOfMonth = function(month, year) {\r\n\tswitch (month) {\r\n\t\tcase 2: \r\n\t\tcase 4: \r\n\t\tcase 6: \r\n\t\tcase 10: \r\n\t\t\treturn 29;\r\n\t\tcase 13:\r\n\t\t\treturn this.isLeapYear(year) ? 29 : 0;\r\n\t\tcase 8:\r\n\t\t\treturn HebrewCal.longHeshvan(year) ? 30 : 29;\r\n\t\tcase 9:\r\n\t\t\treturn HebrewCal.longKislev(year) ? 30 : 29;\r\n\t\tcase 12:\r\n\t\tcase 1:\r\n\t\tcase 3:\r\n\t\tcase 5:\r\n\t\tcase 7:\r\n\t\tcase 11:\r\n\t\t\treturn 30;\r\n\t\tdefault:\r\n\t\t\treturn 0;\r\n\t}\r\n};\r\n\r\n/**\r\n * Return the number of months in the given year. The number of months in a year varies\r\n * for luni-solar calendars because in some years, an extra month is needed to extend the \r\n * days in a year to an entire solar year. The month is represented as a 1-based number\r\n * where 1=first month, 2=second month, etc.\r\n * \r\n * @param {number} year a year for which the number of months is sought\r\n */\r\nHebrewCal.prototype.getNumMonths = function(year) {\r\n\treturn this.isLeapYear(year) ? 13 : 12;\r\n};\r\n\r\n/**\r\n * Return the number of days in a particular month in a particular year. This function\r\n * can return a different number for a month depending on the year because of leap years.\r\n *\r\n * @param {number} month the month for which the length is sought\r\n * @param {number} year the year within which that month can be found\r\n * @returns {number} the number of days within the given month in the given year, or\r\n * 0 for an invalid month in the year\r\n */\r\nHebrewCal.prototype.getMonLength = function(month, year) {\r\n\tif (month < 1 || month > 13 || (month == 13 && !this.isLeapYear(year))) {\r\n\t\treturn 0;\r\n\t}\r\n\treturn this.lastDayOfMonth(month, year);\r\n};\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Hebrew calendar.\r\n * The year parameter may be given as a number, or as a HebrewDate object.\r\n * @param {number|Object} year the year for which the leap year information is being sought\r\n * @returns {boolean} true if the given year is a leap year\r\n */\r\nHebrewCal.prototype.isLeapYear = function(year) {\r\n\tvar y = (typeof(year) == 'number') ? year : year.year;\r\n\treturn (MathUtils.mod(1 + 7 * y, 19) < 7);\r\n};\r\n\r\n/**\r\n * Return the type of this calendar.\r\n * \r\n * @returns {string} the name of the type of this calendar \r\n */\r\nHebrewCal.prototype.getType = function() {\r\n\treturn this.type;\r\n};\r\n\r\n\r\n/*register this calendar for the factory method */\r\nCalendar._constructors[\"hebrew\"] = HebrewCal;\r\n\r\nmodule.exports = HebrewCal;\r\n","/*\r\n * islamic.js - Represent a Islamic calendar object.\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* !depends \r\nilib.js\r\nCalendar.js \r\nMathUtils.js \r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Islamic calendar object. This class encodes information about\r\n * the civil Islamic calendar. The civil Islamic calendar is a tabular islamic \r\n * calendar where the dates are calculated by arithmetic rules. This differs from \r\n * the religious Islamic calendar which is used to mark the beginning of particular \r\n * holidays. The religious calendar depends on the first sighting of the new \r\n * crescent moon to determine the first day of the new month. Because humans and \r\n * weather are both involved, the actual time of sighting varies, so it is not \r\n * really possible to precalculate the religious calendar. Certain groups, such \r\n * as the Islamic Society of North America, decreed in in 2007 that they will use\r\n * a calendar based on calculations rather than observations to determine the \r\n * beginning of lunar months, and therefore the dates of holidays.<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends Calendar\r\n */\r\nvar IslamicCal = function() {\r\n\tthis.type = \"islamic\";\r\n};\r\n\r\n/**\r\n * the lengths of each month \r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nIslamicCal.monthLengths = [\r\n\t30,  /* Muharram */\r\n\t29,  /* Saffar */\r\n\t30,  /* Rabi'I */\r\n\t29,  /* Rabi'II */\r\n\t30,  /* Jumada I */\r\n\t29,  /* Jumada II */\r\n\t30,  /* Rajab */\r\n\t29,  /* Sha'ban */\r\n\t30,  /* Ramadan */\r\n\t29,  /* Shawwal */\r\n\t30,  /* Dhu al-Qa'da */\r\n\t29   /* Dhu al-Hijja */\r\n];\r\n\r\n\r\n/**\r\n * Return the number of months in the given year. The number of months in a year varies\r\n * for luni-solar calendars because in some years, an extra month is needed to extend the \r\n * days in a year to an entire solar year. The month is represented as a 1-based number\r\n * where 1=first month, 2=second month, etc.\r\n * \r\n * @param {number} year a year for which the number of months is sought\r\n */\r\nIslamicCal.prototype.getNumMonths = function(year) {\r\n\treturn 12;\r\n};\r\n\r\n/**\r\n * Return the number of days in a particular month in a particular year. This function\r\n * can return a different number for a month depending on the year because of things\r\n * like leap years.\r\n *\r\n * @param {number} month the month for which the length is sought\r\n * @param {number} year the year within which that month can be found\r\n * @return {number} the number of days within the given month in the given year\r\n */\r\nIslamicCal.prototype.getMonLength = function(month, year) {\r\n\tif (month !== 12) {\r\n\t\treturn IslamicCal.monthLengths[month-1];\r\n\t} else {\r\n\t\treturn this.isLeapYear(year) ? 30 : 29;\r\n\t}\r\n};\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Islamic calendar.\r\n * The year parameter may be given as a number, or as a IslamicDate object.\r\n * @param {number} year the year for which the leap year information is being sought\r\n * @return {boolean} true if the given year is a leap year\r\n */\r\nIslamicCal.prototype.isLeapYear = function(year) {\r\n\treturn (MathUtils.mod((14 + 11 * year), 30) < 11);\r\n};\r\n\r\n/**\r\n * Return the type of this calendar.\r\n * \r\n * @return {string} the name of the type of this calendar \r\n */\r\nIslamicCal.prototype.getType = function() {\r\n\treturn this.type;\r\n};\r\n\r\n\r\n/*register this calendar for the factory method */\r\nCalendar._constructors[\"islamic\"] = IslamicCal;\r\n\r\nmodule.exports = IslamicCal;","/*\r\n * julian.js - Represent a Julian calendar object.\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* !depends ilib.js Calendar.js MathUtils.js */\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Julian calendar object. This class encodes information about\r\n * a Julian calendar.<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends Calendar\r\n */\r\nvar JulianCal = function() {\r\n\tthis.type = \"julian\";\r\n};\r\n\r\n/* the lengths of each month */\r\nJulianCal.monthLengths = [\r\n\t31,  /* Jan */\r\n\t28,  /* Feb */\r\n\t31,  /* Mar */\r\n\t30,  /* Apr */\r\n\t31,  /* May */\r\n\t30,  /* Jun */\r\n\t31,  /* Jul */\r\n\t31,  /* Aug */\r\n\t30,  /* Sep */\r\n\t31,  /* Oct */\r\n\t30,  /* Nov */\r\n\t31   /* Dec */\r\n];\r\n\r\n/**\r\n * the cumulative lengths of each month, for a non-leap year \r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nJulianCal.cumMonthLengths = [\r\n    0,   /* Jan */\r\n\t31,  /* Feb */\r\n\t59,  /* Mar */\r\n\t90,  /* Apr */\r\n\t120, /* May */\r\n\t151, /* Jun */\r\n\t181, /* Jul */\r\n\t212, /* Aug */\r\n\t243, /* Sep */\r\n\t273, /* Oct */\r\n\t304, /* Nov */\r\n\t334, /* Dec */\r\n\t365\r\n];\r\n\r\n/**\r\n * the cumulative lengths of each month, for a leap year \r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nJulianCal.cumMonthLengthsLeap = [\r\n\t0,   /* Jan */\r\n\t31,  /* Feb */\r\n\t60,  /* Mar */\r\n\t91,  /* Apr */\r\n\t121, /* May */\r\n\t152, /* Jun */\r\n\t182, /* Jul */\r\n\t213, /* Aug */\r\n\t244, /* Sep */\r\n\t274, /* Oct */\r\n\t305, /* Nov */\r\n\t335, /* Dec */\r\n\t366\r\n];\r\n\r\n/**\r\n * Return the number of months in the given year. The number of months in a year varies\r\n * for lunar calendars because in some years, an extra month is needed to extend the \r\n * days in a year to an entire solar year. The month is represented as a 1-based number\r\n * where 1=Jaunary, 2=February, etc. until 12=December.\r\n * \r\n * @param {number} year a year for which the number of months is sought\r\n */\r\nJulianCal.prototype.getNumMonths = function(year) {\r\n\treturn 12;\r\n};\r\n\r\n/**\r\n * Return the number of days in a particular month in a particular year. This function\r\n * can return a different number for a month depending on the year because of things\r\n * like leap years.\r\n * \r\n * @param {number} month the month for which the length is sought\r\n * @param {number} year the year within which that month can be found\r\n * @return {number} the number of days within the given month in the given year\r\n */\r\nJulianCal.prototype.getMonLength = function(month, year) {\r\n\tif (month !== 2 || !this.isLeapYear(year)) {\r\n\t\treturn JulianCal.monthLengths[month-1];\r\n\t} else {\r\n\t\treturn 29;\r\n\t}\r\n};\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Julian calendar.\r\n * The year parameter may be given as a number, or as a JulDate object.\r\n * @param {number|JulianDate} year the year for which the leap year information is being sought\r\n * @return {boolean} true if the given year is a leap year\r\n */\r\nJulianCal.prototype.isLeapYear = function(year) {\r\n\tvar y = (typeof(year) === 'number' ? year : year.year);\r\n\treturn MathUtils.mod(y, 4) === ((year > 0) ? 0 : 3);\r\n};\r\n\r\n/**\r\n * Return the type of this calendar.\r\n * \r\n * @return {string} the name of the type of this calendar \r\n */\r\nJulianCal.prototype.getType = function() {\r\n\treturn this.type;\r\n};\r\n\r\n\r\n/* register this calendar for the factory method */\r\nCalendar._constructors[\"julian\"] = JulianCal;\r\n\r\nmodule.exports = JulianCal;","/*\r\n * persian.js - Represent a Persian algorithmic calendar object.\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* !depends ilib.js Calendar.js MathUtils.js */\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Persian algorithmic calendar object. This class encodes information about\r\n * a Persian algorithmic calendar.<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends Calendar\r\n */\r\nvar PersianAlgoCal = function() {\r\n\tthis.type = \"persian-algo\";\r\n};\r\n\r\n/**\r\n * @private\r\n * @const\r\n * @type Array.<number> \r\n * the lengths of each month \r\n */\r\nPersianAlgoCal.monthLengths = [\r\n\t31,  // Farvardin\r\n\t31,  // Ordibehesht\r\n\t31,  // Khordad\r\n\t31,  // Tir\r\n\t31,  // Mordad\r\n\t31,  // Shahrivar\r\n\t30,  // Mehr\r\n\t30,  // Aban\r\n\t30,  // Azar\r\n\t30,  // Dey\r\n\t30,  // Bahman\r\n\t29   // Esfand\r\n];\r\n\r\n/**\r\n * Return the number of months in the given year. The number of months in a year varies\r\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \r\n * days in a year to an entire solar year. The month is represented as a 1-based number\r\n * where 1=first month, 2=second month, etc.\r\n * \r\n * @param {number} year a year for which the number of months is sought\r\n * @return {number} The number of months in the given year\r\n */\r\nPersianAlgoCal.prototype.getNumMonths = function(year) {\r\n\treturn 12;\r\n};\r\n\r\n/**\r\n * Return the number of days in a particular month in a particular year. This function\r\n * can return a different number for a month depending on the year because of things\r\n * like leap years.\r\n * \r\n * @param {number} month the month for which the length is sought\r\n * @param {number} year the year within which that month can be found\r\n * @return {number} the number of days within the given month in the given year\r\n */\r\nPersianAlgoCal.prototype.getMonLength = function(month, year) {\r\n\tif (month !== 12 || !this.isLeapYear(year)) {\r\n\t\treturn PersianAlgoCal.monthLengths[month-1];\r\n\t} else {\r\n\t\t// Month 12, Esfand, has 30 days instead of 29 in leap years\r\n\t\treturn 30;\r\n\t}\r\n};\r\n\r\n/**\r\n * Return the equivalent year in the 2820 year cycle that begins on \r\n * Far 1, 474. This particular cycle obeys the cycle-of-years formula \r\n * whereas the others do not specifically. This cycle can be used as\r\n * a proxy for other years outside of the cycle by shifting them into \r\n * the cycle.   \r\n * @param {number} year year to find the equivalent cycle year for\r\n * @returns {number} the equivalent cycle year\r\n */\r\nPersianAlgoCal.prototype.equivalentCycleYear = function(year) {\r\n\tvar y = year - (year >= 0 ? 474 : 473);\r\n\treturn MathUtils.mod(y, 2820) + 474;\r\n};\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Persian calendar.\r\n * The year parameter may be given as a number, or as a PersAlgoDate object.\r\n * @param {number} year the year for which the leap year information is being sought\r\n * @return {boolean} true if the given year is a leap year\r\n */\r\nPersianAlgoCal.prototype.isLeapYear = function(year) {\r\n\treturn (MathUtils.mod((this.equivalentCycleYear(year) + 38) * 682, 2816) < 682);\r\n};\r\n\r\n/**\r\n * Return the type of this calendar.\r\n * \r\n * @return {string} the name of the type of this calendar \r\n */\r\nPersianAlgoCal.prototype.getType = function() {\r\n\treturn this.type;\r\n};\r\n\r\n\r\n/* register this calendar for the factory method */\r\nCalendar._constructors[\"persian-algo\"] = PersianAlgoCal;\r\n\r\nmodule.exports = PersianAlgoCal;","/*\r\n * zoneinfo.js - represent a binary zone info file\r\n *\r\n * Copyright © 2014 LG Electronics, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * The portion of this code that parses the zone info file format is derived\r\n * from the code in the node-zoneinfo project by Gregory McWhirter licensed\r\n * under the MIT license:\r\n *\r\n * Copyright (c) 2013 Gregory McWhirter\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject\r\n * to the following conditions:\r\n\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n * OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nvar\r\n\tPackedBuffer = require(\"./packedbuffer.js\");\r\n\r\nvar _platform = \"unknown\";\r\n\r\n(function () {\r\n\tif (typeof(require) !== 'undefined') {\r\n\t\ttry {\r\n\t\t\tif(typeof(require('enyo')) !== 'undefined') {\r\n\t\t\t\t_platform = \"enyo\";\r\n\t\t\t} else {\r\n\t\t\t\t_platform = \"nodejs\";\r\n\t\t\t}\r\n\t\t} catch(e) {\r\n\t\t\t_platform = \"nodejs\";\r\n\t\t}\r\n\t} else if (typeof(environment) !== 'undefined') {\r\n\t\t_platform = \"rhino\";\r\n\t} else if (typeof(process) !== 'undefined') {\r\n\t\t_platform = \"nodejs\";\r\n\t} else if (typeof(window) !== 'undefined') {\r\n\t\t_platform = (typeof(PalmSystem) !== 'undefined') ? \"webos\" : \"browser\";\r\n\t}\r\n})();\r\n\r\n/**\r\n * @constructor\r\n * Represents a binary zone info file of the sort that the Unix Zone Info Compiler\r\n * produces.\r\n * @param {string} path path to the file to be loaded\r\n * @param {number} year year of the zone info rules needed\r\n */\r\nvar ZoneInfoFile = function (path) {\r\n\tvar that = this;\r\n\tswitch (_platform) {\r\n\t\t/*\r\n\t\tUncomment and use this when enyo works for binary load.\r\n\t\tcase \"enyo\":\r\n\t\t\tvar ajax = new enyo.Ajax({\r\n\t\t\t\txhrFields: {\r\n\t\t\t\t\tresponseType:\"arraybuffer\"\r\n\t\t\t\t},\r\n\t\t\t\tcacheBust: false,\r\n\t\t\t\tsync: true,\r\n\t\t\t\thandleAs: \"binary\",\r\n\t\t\t\turl: \"file://\" + path\r\n\t\t\t});\r\n\t\t\tajax.response(this, function(s, r) {\r\n\t\t\t\tvar byteArray = new Uint8Array(r);\r\n\t\t\t\t// console.log(\"ZoneInfoFile bytes received: \" + byteArray.length);\r\n\t\t\t\tthat._parseInfo(byteArray);\r\n\t\t\t});\r\n\t\t\t//ajax.error(this, function(s, r) {\r\n\t\t\t//\tconsole.log(\"ZoneInfoFile: failed to load files \" + JSON.stringify(s) + \" \" + r);\r\n\t\t\t//});\r\n\t\t\tajax.go();\r\n\t\t\tbreak;\r\n\t\t*/\r\n\t\t\r\n\t\tcase \"nodejs\":\r\n\t\t\t// console.log(\"ZoneInfoFile: loading zoneinfo path \" + path + \"\\n\");\r\n\t\t\t\r\n\t\t\tvar bytes = new Buffer(fs.readFileSync(path));\r\n\t\t\tvar byteArray = new Uint8Array(bytes);\r\n\t\t\tthis._parseInfo(byteArray);\r\n\t\t\tbreak;\r\n\t\t\t\r\n\t\tdefault:\r\n\t\t\t// use normal web techniques for sync binary data fetching\r\n\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data\r\n\t\t\tvar req = new XMLHttpRequest();\r\n\t\t\treq.open(\"GET\", \"file:\" + path, false);\r\n\t\t\treq.overrideMimeType('text\\/plain; charset=x-user-defined');\r\n\t\t\treq.onload = function(e) {\r\n\t\t\t\tvar byteArray = new Uint8Array(req.response.length);\r\n\t\t\t\tfor (var i=0; i<req.response.length; i++) {\r\n\t\t\t\t\tbyteArray[i] = req.response.charCodeAt(i) & 0xff;\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(\"ZoneInfoFile bytes received: \" + byteArray.length);\r\n\t\t\t\tthat._parseInfo(byteArray);\r\n\t\t\t};\r\n\t\t\treq.onerror = function(e) {\r\n\t\t\t\tthrow \"Cannot load file \" + path;\r\n\t\t\t};\r\n\t\t\treq.send();\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\n/**\r\n * @private\r\n * Parse the binary buffer to find the zone info\r\n * @param buffer\r\n */\r\nZoneInfoFile.prototype._parseInfo = function(buffer) {\r\n\tvar packed = new PackedBuffer(buffer);\r\n\r\n\t// The time zone information files used by tzset(3)\r\n\t// begin with the magic characters \"TZif\" to identify\r\n\t// them as time zone information files, followed by\r\n\t// sixteen bytes reserved for future use, followed by\r\n\t// six four-byte values of type long, written in a\r\n\t// ''standard'' byte order (the high-order byte\r\n\t// of the value is written first).\r\n\tif (packed.getString(4) != \"TZif\") {\r\n\t\tthrow \"file format not recognized\";\r\n\t} else {\r\n\t\t// ignore 16 bytes\r\n\t\tpacked.skip(16);\r\n\r\n\t\t// The number of UTC/local indicators stored in the file.\r\n\t\tvar tzh_ttisgmtcnt = packed.getLong();\r\n\t\t// The number of standard/wall indicators stored in the file.\r\n\t\tvar tzh_ttisstdcnt = packed.getLong();\r\n\t\t// The number of leap seconds for which data is stored in the file.\r\n\t\tvar tzh_leapcnt = packed.getLong();\r\n\t\t// The number of \"transition times\" for which data is stored in the file.\r\n\t\tvar tzh_timecnt = packed.getLong();\r\n\t\t// The number of \"local time types\" for which data is stored in the file (must not be zero).\r\n\t\tvar tzh_typecnt = packed.getLong();\r\n\t\t// The number of characters of \"time zone abbreviation strings\" stored in the file.\r\n\t\tvar tzh_charcnt = packed.getLong();\r\n\r\n\t\tthis.transitionTimes = tzh_timecnt ? packed.getLongs(tzh_timecnt) : [];\r\n\r\n\t\tthis.transitionTimes = this.transitionTimes.map(function (item) {\r\n\t\t\treturn item * 1000;\r\n\t\t});\r\n\r\n\t\t// these are indexes into the zonesInfo that correspond to each transition time\r\n\t\tthis.ruleIndex = tzh_timecnt ? packed.getUnsignedBytes(tzh_timecnt) : [];\r\n\r\n\t\tthis.zoneInfo = [];\r\n\t\tfor (var i = 0; i < tzh_typecnt; i++) {\r\n\t\t\tthis.zoneInfo.push({\r\n\t\t\t\toffset: Math.floor(packed.getLong()/60),  // offset in seconds, so convert to minutes\r\n\t\t\t\tisdst: !!packed.getByte(),\r\n\t\t\t\tabbreviationIndex: packed.getByte()\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar allAbbreviations = packed.getString(tzh_charcnt);\r\n\r\n\t\tfor (var i = 0; i < tzh_typecnt; i++) {\r\n\t\t\tvar abbreviation = allAbbreviations.substring(this.zoneInfo[i].abbreviationIndex);\r\n\t\t\tthis.zoneInfo[i].abbreviation = abbreviation.substring(0, abbreviation.indexOf('\\x00'));\r\n\t\t}\r\n\r\n\t\t// ignore the leap seconds\r\n\t\tif (tzh_leapcnt) {\r\n\t\t\tpacked.skip(tzh_leapcnt * 2);\r\n\t\t}\r\n\r\n\t\t// skip the standard/wall time indicators\r\n\t\tif (tzh_ttisstdcnt) {\r\n\t\t\tpacked.skip(tzh_ttisstdcnt);\r\n\t\t}\r\n\r\n\t\t// ignore the UTC/local time indicators -- everything should be UTC\r\n\t\tif (tzh_ttisgmtcnt) {\r\n\t\t\tpacked.skip(tzh_ttisgmtcnt);\r\n\t\t}\r\n\r\n\t\t// finished reading\r\n\r\n\t\t// Replace ttinfo indexes for ttinfo objects.\r\n\t\tvar that = this;\r\n\t\tthis.ruleIndex = this.ruleIndex.map(function (item) {\r\n\t\t\treturn {\r\n\t\t\t\toffset: that.zoneInfo[item].offset,\r\n\t\t\t\tisdst: that.zoneInfo[item].isdst,\r\n\t\t\t\tabbreviation: that.zoneInfo[item].abbreviation\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\t// calculate the dst savings for each daylight time\r\n\t\tfor (var i = 0; i < tzh_timecnt; i++) {\r\n\t\t\tif (i > 0 && this.ruleIndex[i].isdst) {\r\n\t\t\t\tthis.ruleIndex[i].savings = this.ruleIndex[i].offset - this.ruleIndex[i-1].offset;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set standard, dst, and before ttinfos. before will be\r\n\t\t// used when a given time is before any transitions,\r\n\t\t// and will be set to the first non-dst ttinfo, or to\r\n\t\t// the first dst, if all of them are dst.\r\n\t\tif (!this.transitionTimes.length) {\r\n\t\t\tthis.standardTime = this.zoneInfo[0];\r\n\t\t} else {\r\n\t\t\tfor (var j = tzh_timecnt - 1; j > -1; j--) {\r\n\t\t\t\tvar tti = this.ruleIndex[j];\r\n\t\t\t\tif (!this.standardTime && !tti.isdst) {\r\n\t\t\t\t\tthis.standardTime = tti;\r\n\t\t\t\t} else if (!this.daylightTime && tti.isdst) {\r\n\t\t\t\t\tthis.daylightTime = tti;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.daylightTime && this.standardTime)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.daylightTime && !this.standardTime) {\r\n\t\t\t\tthis.standardTime = this.daylightTime;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var k = this.zoneInfo.length-1; k > 0; k--) {\r\n\t\t\t\tif (!this.zoneInfo[k].isdst) {\r\n\t\t\t\t\tthis.defaultTime = this.zoneInfo[k];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!this.defaultTime) {\r\n\t\t\tthis.defaultTime = this.zoneInfo[this.zoneInfo.length-1];\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Binary search a sorted array of numbers for a particular target value.\r\n * If the exact value is not found, it returns the index of the largest\r\n * entry that is smaller than the given target value.<p>\r\n *\r\n * @param {number} target element being sought\r\n * @param {Array} arr the array being searched\r\n * @return the index of the array into which the value would fit if\r\n * inserted, or -1 if given array is not an array or the target is not\r\n * a number\r\n */\r\nZoneInfoFile.prototype.bsearch = function(target, arr) {\r\n\tif (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined' || target < arr[0]) {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t// greater than the end of the array\r\n\tif (target > arr[arr.length-1]) {\r\n\t\treturn arr.length - 1;\r\n\t}\r\n\r\n\tvar high = arr.length - 1,\r\n\t\tlow = 0,\r\n\t\tmid = 0,\r\n\t\tvalue;\r\n\r\n\twhile (low <= high) {\r\n\t\tmid = Math.floor((high+low)/2);\r\n\t\tvalue = arr[mid] - target;\r\n\t\tif (value > 0) {\r\n\t\t\thigh = mid - 1;\r\n\t\t} else if (value < 0) {\r\n\t\t\tlow = mid + 1;\r\n\t\t} else {\r\n\t\t\treturn mid;\r\n\t\t}\r\n\t}\r\n\r\n\treturn high;\r\n};\r\n\r\n/**\r\n * Return whether or not this zone uses DST in the given year.\r\n *\r\n * @param {Date} date the Gregorian date to test\r\n * @returns {boolean} true if the zone uses DST in the given year\r\n */\r\nZoneInfoFile.prototype.usesDST = function(date) {\r\n\tvar thisYear = date.getTime();\r\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\r\n\r\n\t// search for the zone that was effective Jan 1 of this year\r\n\t// to Jan 1 of next year, and if any of the infos is DST, then\r\n\t// this zone supports DST in the given year.\r\n\r\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\r\n\tif (index !== -1) {\r\n\t\twhile (index < this.transitionTimes.length && this.transitionTimes[index] < nextYear) {\r\n\t\t\tif (this.ruleIndex[index++].isdst) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn false;\r\n};\r\n\r\n/**\r\n * Return the raw offset from UTC that this zone uses at the given time.\r\n *\r\n * @param {Date} date the Gregorian date to test\r\n * @returns {number} offset from from UTC in number of minutes. Negative\r\n * numbers are west of Greenwich, positive are east of Greenwich\r\n */\r\nZoneInfoFile.prototype.getRawOffset = function(date) {\r\n\tvar thisYear = date.getTime();\r\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\r\n\r\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\r\n\r\n\tvar offset = this.defaultTime.offset;\r\n\tif (index > -1) {\r\n\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\r\n\t\t\tindex++;\r\n\t\t}\r\n\r\n\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\r\n\t\t\toffset = this.ruleIndex[index].offset;\r\n\t\t}\r\n\t}\r\n\r\n\treturn offset;\r\n};\r\n\r\n/**\r\n * If this zone uses DST in the given year, return the DST savings\r\n * in use. If the zone does not use DST in the given year, this\r\n * method will return 0.\r\n *\r\n * @param {Date} date the Gregorian date to test\r\n * @returns {number} number of minutes in DST savings if the zone\r\n * uses DST in the given year, or zero otherwise\r\n */\r\nZoneInfoFile.prototype.getDSTSavings = function(date) {\r\n\tvar thisYear = date.getTime();\r\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\r\n\r\n\t// search for all transitions between now and one year \r\n\t// from now, and calculate the difference in DST (if any)\r\n\r\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\r\n\tvar savings = 0;\r\n\tif (index > -1) {\r\n\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\r\n\t\t\tindex++;\r\n\t\t}\r\n\r\n\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\r\n\t\t\tsavings = this.ruleIndex[index].savings;\r\n\t\t}\r\n\t}\r\n\r\n\treturn savings;\r\n};\r\n\r\n/**\r\n * Return the start date/time of DST if this zone uses\r\n * DST in the given year.\r\n *\r\n * @param {Date} date the Gregorian date to test\r\n * @returns {number} unixtime representation of the start\r\n * of DST in the given year, or -1 if the zone does not\r\n * use DST in the given year\r\n */\r\nZoneInfoFile.prototype.getDSTStartDate = function(date) {\r\n\tvar year = date.getFullYear();\r\n\tvar thisYear = new Date(year, 0, 1).getTime();\r\n\tvar nextYear = new Date(year+1, 0, 1).getTime();\r\n\r\n\t// search for all transitions between Jan 1 of this year\r\n\t// to Jan 1 of next year, and calculate the difference\r\n\t// in DST (if any)\r\n\r\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\r\n\tvar startDate = -1;\r\n\tif (index > -1) {\r\n\t\tif (this.transitionTimes[index] < thisYear) {\r\n\t\t\tindex++; // start in this year instead of the previous year\r\n\t\t}\r\n\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\r\n\t\t\tindex++;\r\n\t\t}\r\n\r\n\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\r\n\t\t\tstartDate = this.transitionTimes[index];\r\n\t\t}\r\n\t}\r\n\r\n\treturn startDate;\r\n};\r\n\r\n/**\r\n * Return the end date/time of DST if this zone uses\r\n * DST in the given year.\r\n *\r\n * @param {Date} date the Gregorian date to test\r\n * @returns {number} unixtime representation of the end\r\n * of DST in the given year, or -1 if the zone does not\r\n * use DST in the given year\r\n */\r\nZoneInfoFile.prototype.getDSTEndDate = function(date) {\r\n\tvar year = date.getFullYear();\r\n\tvar thisYear = new Date(year, 0, 1).getTime();\r\n\tvar nextYear = new Date(year+1, 0, 1).getTime();\r\n\r\n\t// search for all transitions between Jan 1 of this year\r\n\t// to Jan 1 of next year, and calculate the difference\r\n\t// in DST (if any)\r\n\r\n\tvar index = this.bsearch(thisYear, this.transitionTimes);\r\n\tvar endDate = -1;\r\n\tif (index > -1) {\r\n\t\tif (this.transitionTimes[index] < thisYear) {\r\n\t\t\tindex++; // start in this year instead of the previous year\r\n\t\t}\r\n\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\r\n\t\t\tindex++;\r\n\t\t}\r\n\r\n\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\r\n\t\t\tendDate = this.transitionTimes[index];\r\n\t\t}\r\n\t}\r\n\r\n\treturn endDate;\r\n};\r\n\r\n/**\r\n * Return the abbreviation used by this zone in standard\r\n * time.\r\n *\r\n * @param {Date} date the Gregorian date to test\r\n * @returns {string} a string representing the abbreviation\r\n * used in this time zone during standard time\r\n */\r\nZoneInfoFile.prototype.getAbbreviation = function(date) {\r\n\tvar thisYear = date.getTime();\r\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\r\n\r\n\t// search for all transitions between now and one year from now, and calculate the difference\r\n\t// in DST (if any)\r\n\tvar abbr;\r\n\tif (this.transitionTimes.length > 0) {\r\n\t\tvar index = this.bsearch(thisYear, this.transitionTimes);\r\n\t\tabbr = this.ruleIndex[index].abbreviation;\r\n\t\tif (index > -1) {\r\n\t\t\twhile (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\r\n\t\t\tif (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {\r\n\t\t\t\tabbr = this.ruleIndex[index].abbreviation;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tabbr = this.standardTime.abbreviation;\r\n\t}\r\n\r\n\treturn abbr;\r\n};\r\n\r\n/**\r\n * Return the abbreviation used by this zone in daylight\r\n * time. If the zone does not use DST in the given year,\r\n * this returns the same thing as getAbbreviation().\r\n *\r\n * @param {Date} date the Gregorian date to test\r\n * @returns {string} a string representing the abbreviation\r\n * used in this time zone during daylight time\r\n */\r\nZoneInfoFile.prototype.getDSTAbbreviation = function(date) {\r\n\tvar thisYear = date.getTime();\r\n\tvar nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year\r\n\r\n\t// search for all transitions between now and one year from now, and calculate the difference\r\n\t// in DST (if any)\r\n\r\n\tvar abbr;\r\n\tif (this.transitionTimes.length > 0) {\r\n\t\tvar index = this.bsearch(thisYear, this.transitionTimes);\r\n\t\tabbr = this.ruleIndex[index].abbreviation;\r\n\t\tif (index > -1) {\r\n\t\t\twhile (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\r\n\t\t\tif (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {\r\n\t\t\t\tabbr = this.ruleIndex[index].abbreviation;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tabbr = this.standardTime.abbreviation;\r\n\t}\r\n\r\n\treturn abbr;\r\n};\r\n\r\n/**\r\n * Return the zone information for the given date in ilib\r\n * format.\r\n *\r\n * @param {Date} date the Gregorian date to test\r\n * @returns {Object} an object containing the zone information\r\n * for the given date in the format that ilib can use directly\r\n */\r\nZoneInfoFile.prototype.getIlibZoneInfo = function(date) {\r\n\tfunction minutesToStr(min) {\r\n\t\tvar hours = Math.floor(min / 60);\r\n\t\tvar minutes = min - hours * 60;\r\n\r\n\t\treturn hours + \":\" + minutes;\r\n\t}\r\n\r\n\tfunction unixtimeToJD(millis) {\r\n\t\treturn 2440587.5 + millis / 86400000;\r\n\t}\r\n\tvar res = {\r\n\t\t\"o\": minutesToStr(this.getRawOffset(date))\r\n\t};\r\n\tif (this.usesDST(date)) {\r\n\t\tres.f = \"{c}\";\r\n\t\tres.e = {\r\n\t\t\t\"c\": this.getAbbreviation(date),\r\n\t\t\t\"j\": unixtimeToJD(this.getDSTEndDate(date))\r\n\t\t};\r\n\t\tres.s = {\r\n\t\t\t\"c\": this.getDSTAbbreviation(date),\r\n\t\t\t\"j\": unixtimeToJD(this.getDSTStartDate(date)),\r\n\t\t\t\"v\": minutesToStr(this.getDSTSavings(date))\r\n\t\t};\r\n\t} else {\r\n\t\tres.f = this.getAbbreviation(date);\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nmodule.exports = ZoneInfoFile;\r\n","/*\r\n * Locale.js - Locale specifier definition\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js JSUtils.js\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new locale instance. Locales are specified either with a specifier string \r\n * that follows the BCP-47 convention (roughly: \"language-region-script-variant\") or \r\n * with 4 parameters that specify the language, region, variant, and script individually.<p>\r\n * \r\n * The language is given as an ISO 639-1 two-letter, lower-case language code. You\r\n * can find a full list of these codes at \r\n * <a href=\"http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</a><p>\r\n * \r\n * The region is given as an ISO 3166-1 two-letter, upper-case region code. You can\r\n * find a full list of these codes at \r\n * <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</a>.<p>\r\n * \r\n * The variant is any string that does not contain a dash which further differentiates\r\n * locales from each other.<p>\r\n * \r\n * The script is given as the ISO 15924 four-letter script code. In some locales,\r\n * text may be validly written in more than one script. For example, Serbian is often\r\n * written in both Latin and Cyrillic, though not usually mixed together. You can find a\r\n * full list of these codes at \r\n * <a href=\"http://en.wikipedia.org/wiki/ISO_15924#List_of_codes\">http://en.wikipedia.org/wiki/ISO_15924#List_of_codes</a>.<p>\r\n * \r\n * As an example in ilib, the script can be used in the date formatter. Dates formatted \r\n * in Serbian could have day-of-week names or month names written in the Latin\r\n * or Cyrillic script. Often one script is default such that sr-SR-Latn is the same\r\n * as sr-SR so the script code \"Latn\" can be left off of the locale spec.<p> \r\n * \r\n * Each part is optional, and an empty string in the specifier before or after a \r\n * dash or as a parameter to the constructor denotes an unspecified value. In this\r\n * case, many of the ilib functions will treat the locale as generic. For example\r\n * the locale \"en-\" is equivalent to \"en\" and to \"en--\" and denotes a locale\r\n * of \"English\" with an unspecified region and variant, which typically matches\r\n * any region or variant.<p>\r\n * \r\n * Without any arguments to the constructor, this function returns the locale of\r\n * the host Javascript engine.<p>\r\n * \r\n * \r\n * @constructor\r\n * @param {?string|Locale=} language the ISO 639 2-letter code for the language, or a full \r\n * locale spec in BCP-47 format, or another Locale instance to copy from\r\n * @param {string=} region the ISO 3166 2-letter code for the region\r\n * @param {string=} variant the name of the variant of this locale, if any\r\n * @param {string=} script the ISO 15924 code of the script for this locale, if any\r\n */\r\nvar Locale = function(language, region, variant, script) {\r\n\tif (typeof(region) === 'undefined') {\r\n\t\tvar spec = language || ilib.getLocale();\r\n\t\tif (typeof(spec) === 'string') {\r\n\t\t\tvar parts = spec.split('-');\r\n\t        for ( var i = 0; i < parts.length; i++ ) {\r\n\t        \tif (Locale._isLanguageCode(parts[i])) {\r\n\t    \t\t\t/** \r\n\t    \t\t\t * @private\r\n\t    \t\t\t * @type {string|undefined}\r\n\t    \t\t\t */\r\n\t        \t\tthis.language = parts[i];\r\n\t        \t} else if (Locale._isRegionCode(parts[i])) {\r\n\t    \t\t\t/** \r\n\t    \t\t\t * @private\r\n\t    \t\t\t * @type {string|undefined}\r\n\t    \t\t\t */\r\n\t        \t\tthis.region = parts[i];\r\n\t        \t} else if (Locale._isScriptCode(parts[i])) {\r\n\t    \t\t\t/** \r\n\t    \t\t\t * @private\r\n\t    \t\t\t * @type {string|undefined}\r\n\t    \t\t\t */\r\n\t        \t\tthis.script = parts[i];\r\n\t        \t} else {\r\n\t    \t\t\t/** \r\n\t    \t\t\t * @private\r\n\t    \t\t\t * @type {string|undefined}\r\n\t    \t\t\t */\r\n\t        \t\tthis.variant = parts[i];\r\n\t        \t}\r\n\t        }\r\n\t        this.language = this.language || undefined;\r\n\t        this.region = this.region || undefined;\r\n\t        this.script = this.script || undefined;\r\n\t        this.variant = this.variant || undefined;\r\n\t\t} else if (typeof(spec) === 'object') {\r\n\t        this.language = spec.language || undefined;\r\n\t        this.region = spec.region || undefined;\r\n\t        this.script = spec.script || undefined;\r\n\t        this.variant = spec.variant || undefined;\r\n\t\t}\r\n\t} else {\r\n\t\tif (language) {\r\n\t\t\tlanguage = language.trim();\r\n\t\t\tthis.language = language.length > 0 ? language.toLowerCase() : undefined;\r\n\t\t} else {\r\n\t\t\tthis.language = undefined;\r\n\t\t}\r\n\t\tif (region) {\r\n\t\t\tregion = region.trim();\r\n\t\t\tthis.region = region.length > 0 ? region.toUpperCase() : undefined;\r\n\t\t} else {\r\n\t\t\tthis.region = undefined;\r\n\t\t}\r\n\t\tif (variant) {\r\n\t\t\tvariant = variant.trim();\r\n\t\t\tthis.variant = variant.length > 0 ? variant : undefined;\r\n\t\t} else {\r\n\t\t\tthis.variant = undefined;\r\n\t\t}\r\n\t\tif (script) {\r\n\t\t\tscript = script.trim();\r\n\t\t\tthis.script = script.length > 0 ? script : undefined;\r\n\t\t} else {\r\n\t\t\tthis.script = undefined;\r\n\t\t}\r\n\t}\r\n\tthis._genSpec();\r\n};\r\n\r\n// from http://en.wikipedia.org/wiki/ISO_3166-1\r\nLocale.a2toa3regmap = {\r\n\t\"AF\": \"AFG\",\r\n\t\"AX\": \"ALA\",\r\n\t\"AL\": \"ALB\",\r\n\t\"DZ\": \"DZA\",\r\n\t\"AS\": \"ASM\",\r\n\t\"AD\": \"AND\",\r\n\t\"AO\": \"AGO\",\r\n\t\"AI\": \"AIA\",\r\n\t\"AQ\": \"ATA\",\r\n\t\"AG\": \"ATG\",\r\n\t\"AR\": \"ARG\",\r\n\t\"AM\": \"ARM\",\r\n\t\"AW\": \"ABW\",\r\n\t\"AU\": \"AUS\",\r\n\t\"AT\": \"AUT\",\r\n\t\"AZ\": \"AZE\",\r\n\t\"BS\": \"BHS\",\r\n\t\"BH\": \"BHR\",\r\n\t\"BD\": \"BGD\",\r\n\t\"BB\": \"BRB\",\r\n\t\"BY\": \"BLR\",\r\n\t\"BE\": \"BEL\",\r\n\t\"BZ\": \"BLZ\",\r\n\t\"BJ\": \"BEN\",\r\n\t\"BM\": \"BMU\",\r\n\t\"BT\": \"BTN\",\r\n\t\"BO\": \"BOL\",\r\n\t\"BQ\": \"BES\",\r\n\t\"BA\": \"BIH\",\r\n\t\"BW\": \"BWA\",\r\n\t\"BV\": \"BVT\",\r\n\t\"BR\": \"BRA\",\r\n\t\"IO\": \"IOT\",\r\n\t\"BN\": \"BRN\",\r\n\t\"BG\": \"BGR\",\r\n\t\"BF\": \"BFA\",\r\n\t\"BI\": \"BDI\",\r\n\t\"KH\": \"KHM\",\r\n\t\"CM\": \"CMR\",\r\n\t\"CA\": \"CAN\",\r\n\t\"CV\": \"CPV\",\r\n\t\"KY\": \"CYM\",\r\n\t\"CF\": \"CAF\",\r\n\t\"TD\": \"TCD\",\r\n\t\"CL\": \"CHL\",\r\n\t\"CN\": \"CHN\",\r\n\t\"CX\": \"CXR\",\r\n\t\"CC\": \"CCK\",\r\n\t\"CO\": \"COL\",\r\n\t\"KM\": \"COM\",\r\n\t\"CG\": \"COG\",\r\n\t\"CD\": \"COD\",\r\n\t\"CK\": \"COK\",\r\n\t\"CR\": \"CRI\",\r\n\t\"CI\": \"CIV\",\r\n\t\"HR\": \"HRV\",\r\n\t\"CU\": \"CUB\",\r\n\t\"CW\": \"CUW\",\r\n\t\"CY\": \"CYP\",\r\n\t\"CZ\": \"CZE\",\r\n\t\"DK\": \"DNK\",\r\n\t\"DJ\": \"DJI\",\r\n\t\"DM\": \"DMA\",\r\n\t\"DO\": \"DOM\",\r\n\t\"EC\": \"ECU\",\r\n\t\"EG\": \"EGY\",\r\n\t\"SV\": \"SLV\",\r\n\t\"GQ\": \"GNQ\",\r\n\t\"ER\": \"ERI\",\r\n\t\"EE\": \"EST\",\r\n\t\"ET\": \"ETH\",\r\n\t\"FK\": \"FLK\",\r\n\t\"FO\": \"FRO\",\r\n\t\"FJ\": \"FJI\",\r\n\t\"FI\": \"FIN\",\r\n\t\"FR\": \"FRA\",\r\n\t\"GF\": \"GUF\",\r\n\t\"PF\": \"PYF\",\r\n\t\"TF\": \"ATF\",\r\n\t\"GA\": \"GAB\",\r\n\t\"GM\": \"GMB\",\r\n\t\"GE\": \"GEO\",\r\n\t\"DE\": \"DEU\",\r\n\t\"GH\": \"GHA\",\r\n\t\"GI\": \"GIB\",\r\n\t\"GR\": \"GRC\",\r\n\t\"GL\": \"GRL\",\r\n\t\"GD\": \"GRD\",\r\n\t\"GP\": \"GLP\",\r\n\t\"GU\": \"GUM\",\r\n\t\"GT\": \"GTM\",\r\n\t\"GG\": \"GGY\",\r\n\t\"GN\": \"GIN\",\r\n\t\"GW\": \"GNB\",\r\n\t\"GY\": \"GUY\",\r\n\t\"HT\": \"HTI\",\r\n\t\"HM\": \"HMD\",\r\n\t\"VA\": \"VAT\",\r\n\t\"HN\": \"HND\",\r\n\t\"HK\": \"HKG\",\r\n\t\"HU\": \"HUN\",\r\n\t\"IS\": \"ISL\",\r\n\t\"IN\": \"IND\",\r\n\t\"ID\": \"IDN\",\r\n\t\"IR\": \"IRN\",\r\n\t\"IQ\": \"IRQ\",\r\n\t\"IE\": \"IRL\",\r\n\t\"IM\": \"IMN\",\r\n\t\"IL\": \"ISR\",\r\n\t\"IT\": \"ITA\",\r\n\t\"JM\": \"JAM\",\r\n\t\"JP\": \"JPN\",\r\n\t\"JE\": \"JEY\",\r\n\t\"JO\": \"JOR\",\r\n\t\"KZ\": \"KAZ\",\r\n\t\"KE\": \"KEN\",\r\n\t\"KI\": \"KIR\",\r\n\t\"KP\": \"PRK\",\r\n\t\"KR\": \"KOR\",\r\n\t\"KW\": \"KWT\",\r\n\t\"KG\": \"KGZ\",\r\n\t\"LA\": \"LAO\",\r\n\t\"LV\": \"LVA\",\r\n\t\"LB\": \"LBN\",\r\n\t\"LS\": \"LSO\",\r\n\t\"LR\": \"LBR\",\r\n\t\"LY\": \"LBY\",\r\n\t\"LI\": \"LIE\",\r\n\t\"LT\": \"LTU\",\r\n\t\"LU\": \"LUX\",\r\n\t\"MO\": \"MAC\",\r\n\t\"MK\": \"MKD\",\r\n\t\"MG\": \"MDG\",\r\n\t\"MW\": \"MWI\",\r\n\t\"MY\": \"MYS\",\r\n\t\"MV\": \"MDV\",\r\n\t\"ML\": \"MLI\",\r\n\t\"MT\": \"MLT\",\r\n\t\"MH\": \"MHL\",\r\n\t\"MQ\": \"MTQ\",\r\n\t\"MR\": \"MRT\",\r\n\t\"MU\": \"MUS\",\r\n\t\"YT\": \"MYT\",\r\n\t\"MX\": \"MEX\",\r\n\t\"FM\": \"FSM\",\r\n\t\"MD\": \"MDA\",\r\n\t\"MC\": \"MCO\",\r\n\t\"MN\": \"MNG\",\r\n\t\"ME\": \"MNE\",\r\n\t\"MS\": \"MSR\",\r\n\t\"MA\": \"MAR\",\r\n\t\"MZ\": \"MOZ\",\r\n\t\"MM\": \"MMR\",\r\n\t\"NA\": \"NAM\",\r\n\t\"NR\": \"NRU\",\r\n\t\"NP\": \"NPL\",\r\n\t\"NL\": \"NLD\",\r\n\t\"NC\": \"NCL\",\r\n\t\"NZ\": \"NZL\",\r\n\t\"NI\": \"NIC\",\r\n\t\"NE\": \"NER\",\r\n\t\"NG\": \"NGA\",\r\n\t\"NU\": \"NIU\",\r\n\t\"NF\": \"NFK\",\r\n\t\"MP\": \"MNP\",\r\n\t\"NO\": \"NOR\",\r\n\t\"OM\": \"OMN\",\r\n\t\"PK\": \"PAK\",\r\n\t\"PW\": \"PLW\",\r\n\t\"PS\": \"PSE\",\r\n\t\"PA\": \"PAN\",\r\n\t\"PG\": \"PNG\",\r\n\t\"PY\": \"PRY\",\r\n\t\"PE\": \"PER\",\r\n\t\"PH\": \"PHL\",\r\n\t\"PN\": \"PCN\",\r\n\t\"PL\": \"POL\",\r\n\t\"PT\": \"PRT\",\r\n\t\"PR\": \"PRI\",\r\n\t\"QA\": \"QAT\",\r\n\t\"RE\": \"REU\",\r\n\t\"RO\": \"ROU\",\r\n\t\"RU\": \"RUS\",\r\n\t\"RW\": \"RWA\",\r\n\t\"BL\": \"BLM\",\r\n\t\"SH\": \"SHN\",\r\n\t\"KN\": \"KNA\",\r\n\t\"LC\": \"LCA\",\r\n\t\"MF\": \"MAF\",\r\n\t\"PM\": \"SPM\",\r\n\t\"VC\": \"VCT\",\r\n\t\"WS\": \"WSM\",\r\n\t\"SM\": \"SMR\",\r\n\t\"ST\": \"STP\",\r\n\t\"SA\": \"SAU\",\r\n\t\"SN\": \"SEN\",\r\n\t\"RS\": \"SRB\",\r\n\t\"SC\": \"SYC\",\r\n\t\"SL\": \"SLE\",\r\n\t\"SG\": \"SGP\",\r\n\t\"SX\": \"SXM\",\r\n\t\"SK\": \"SVK\",\r\n\t\"SI\": \"SVN\",\r\n\t\"SB\": \"SLB\",\r\n\t\"SO\": \"SOM\",\r\n\t\"ZA\": \"ZAF\",\r\n\t\"GS\": \"SGS\",\r\n\t\"SS\": \"SSD\",\r\n\t\"ES\": \"ESP\",\r\n\t\"LK\": \"LKA\",\r\n\t\"SD\": \"SDN\",\r\n\t\"SR\": \"SUR\",\r\n\t\"SJ\": \"SJM\",\r\n\t\"SZ\": \"SWZ\",\r\n\t\"SE\": \"SWE\",\r\n\t\"CH\": \"CHE\",\r\n\t\"SY\": \"SYR\",\r\n\t\"TW\": \"TWN\",\r\n\t\"TJ\": \"TJK\",\r\n\t\"TZ\": \"TZA\",\r\n\t\"TH\": \"THA\",\r\n\t\"TL\": \"TLS\",\r\n\t\"TG\": \"TGO\",\r\n\t\"TK\": \"TKL\",\r\n\t\"TO\": \"TON\",\r\n\t\"TT\": \"TTO\",\r\n\t\"TN\": \"TUN\",\r\n\t\"TR\": \"TUR\",\r\n\t\"TM\": \"TKM\",\r\n\t\"TC\": \"TCA\",\r\n\t\"TV\": \"TUV\",\r\n\t\"UG\": \"UGA\",\r\n\t\"UA\": \"UKR\",\r\n\t\"AE\": \"ARE\",\r\n\t\"GB\": \"GBR\",\r\n\t\"US\": \"USA\",\r\n\t\"UM\": \"UMI\",\r\n\t\"UY\": \"URY\",\r\n\t\"UZ\": \"UZB\",\r\n\t\"VU\": \"VUT\",\r\n\t\"VE\": \"VEN\",\r\n\t\"VN\": \"VNM\",\r\n\t\"VG\": \"VGB\",\r\n\t\"VI\": \"VIR\",\r\n\t\"WF\": \"WLF\",\r\n\t\"EH\": \"ESH\",\r\n\t\"YE\": \"YEM\",\r\n\t\"ZM\": \"ZMB\",\r\n\t\"ZW\": \"ZWE\"\r\n};\r\n\r\n\r\nLocale.a1toa3langmap = {\r\n\t\"ab\": \"abk\",\r\n\t\"aa\": \"aar\",\r\n\t\"af\": \"afr\",\r\n\t\"ak\": \"aka\",\r\n\t\"sq\": \"sqi\",\r\n\t\"am\": \"amh\",\r\n\t\"ar\": \"ara\",\r\n\t\"an\": \"arg\",\r\n\t\"hy\": \"hye\",\r\n\t\"as\": \"asm\",\r\n\t\"av\": \"ava\",\r\n\t\"ae\": \"ave\",\r\n\t\"ay\": \"aym\",\r\n\t\"az\": \"aze\",\r\n\t\"bm\": \"bam\",\r\n\t\"ba\": \"bak\",\r\n\t\"eu\": \"eus\",\r\n\t\"be\": \"bel\",\r\n\t\"bn\": \"ben\",\r\n\t\"bh\": \"bih\",\r\n\t\"bi\": \"bis\",\r\n\t\"bs\": \"bos\",\r\n\t\"br\": \"bre\",\r\n\t\"bg\": \"bul\",\r\n\t\"my\": \"mya\",\r\n\t\"ca\": \"cat\",\r\n\t\"ch\": \"cha\",\r\n\t\"ce\": \"che\",\r\n\t\"ny\": \"nya\",\r\n\t\"zh\": \"zho\",\r\n\t\"cv\": \"chv\",\r\n\t\"kw\": \"cor\",\r\n\t\"co\": \"cos\",\r\n\t\"cr\": \"cre\",\r\n\t\"hr\": \"hrv\",\r\n\t\"cs\": \"ces\",\r\n\t\"da\": \"dan\",\r\n\t\"dv\": \"div\",\r\n\t\"nl\": \"nld\",\r\n\t\"dz\": \"dzo\",\r\n\t\"en\": \"eng\",\r\n\t\"eo\": \"epo\",\r\n\t\"et\": \"est\",\r\n\t\"ee\": \"ewe\",\r\n\t\"fo\": \"fao\",\r\n\t\"fj\": \"fij\",\r\n\t\"fi\": \"fin\",\r\n\t\"fr\": \"fra\",\r\n\t\"ff\": \"ful\",\r\n\t\"gl\": \"glg\",\r\n\t\"ka\": \"kat\",\r\n\t\"de\": \"deu\",\r\n\t\"el\": \"ell\",\r\n\t\"gn\": \"grn\",\r\n\t\"gu\": \"guj\",\r\n\t\"ht\": \"hat\",\r\n\t\"ha\": \"hau\",\r\n\t\"he\": \"heb\",\r\n\t\"hz\": \"her\",\r\n\t\"hi\": \"hin\",\r\n\t\"ho\": \"hmo\",\r\n\t\"hu\": \"hun\",\r\n\t\"ia\": \"ina\",\r\n\t\"id\": \"ind\",\r\n\t\"ie\": \"ile\",\r\n\t\"ga\": \"gle\",\r\n\t\"ig\": \"ibo\",\r\n\t\"ik\": \"ipk\",\r\n\t\"io\": \"ido\",\r\n\t\"is\": \"isl\",\r\n\t\"it\": \"ita\",\r\n\t\"iu\": \"iku\",\r\n\t\"ja\": \"jpn\",\r\n\t\"jv\": \"jav\",\r\n\t\"kl\": \"kal\",\r\n\t\"kn\": \"kan\",\r\n\t\"kr\": \"kau\",\r\n\t\"ks\": \"kas\",\r\n\t\"kk\": \"kaz\",\r\n\t\"km\": \"khm\",\r\n\t\"ki\": \"kik\",\r\n\t\"rw\": \"kin\",\r\n\t\"ky\": \"kir\",\r\n\t\"kv\": \"kom\",\r\n\t\"kg\": \"kon\",\r\n\t\"ko\": \"kor\",\r\n\t\"ku\": \"kur\",\r\n\t\"kj\": \"kua\",\r\n\t\"la\": \"lat\",\r\n\t\"lb\": \"ltz\",\r\n\t\"lg\": \"lug\",\r\n\t\"li\": \"lim\",\r\n\t\"ln\": \"lin\",\r\n\t\"lo\": \"lao\",\r\n\t\"lt\": \"lit\",\r\n\t\"lu\": \"lub\",\r\n\t\"lv\": \"lav\",\r\n\t\"gv\": \"glv\",\r\n\t\"mk\": \"mkd\",\r\n\t\"mg\": \"mlg\",\r\n\t\"ms\": \"msa\",\r\n\t\"ml\": \"mal\",\r\n\t\"mt\": \"mlt\",\r\n\t\"mi\": \"mri\",\r\n\t\"mr\": \"mar\",\r\n\t\"mh\": \"mah\",\r\n\t\"mn\": \"mon\",\r\n\t\"na\": \"nau\",\r\n\t\"nv\": \"nav\",\r\n\t\"nb\": \"nob\",\r\n\t\"nd\": \"nde\",\r\n\t\"ne\": \"nep\",\r\n\t\"ng\": \"ndo\",\r\n\t\"nn\": \"nno\",\r\n\t\"no\": \"nor\",\r\n\t\"ii\": \"iii\",\r\n\t\"nr\": \"nbl\",\r\n\t\"oc\": \"oci\",\r\n\t\"oj\": \"oji\",\r\n\t\"cu\": \"chu\",\r\n\t\"om\": \"orm\",\r\n\t\"or\": \"ori\",\r\n\t\"os\": \"oss\",\r\n\t\"pa\": \"pan\",\r\n\t\"pi\": \"pli\",\r\n\t\"fa\": \"fas\",\r\n\t\"pl\": \"pol\",\r\n\t\"ps\": \"pus\",\r\n\t\"pt\": \"por\",\r\n\t\"qu\": \"que\",\r\n\t\"rm\": \"roh\",\r\n\t\"rn\": \"run\",\r\n\t\"ro\": \"ron\",\r\n\t\"ru\": \"rus\",\r\n\t\"sa\": \"san\",\r\n\t\"sc\": \"srd\",\r\n\t\"sd\": \"snd\",\r\n\t\"se\": \"sme\",\r\n\t\"sm\": \"smo\",\r\n\t\"sg\": \"sag\",\r\n\t\"sr\": \"srp\",\r\n\t\"gd\": \"gla\",\r\n\t\"sn\": \"sna\",\r\n\t\"si\": \"sin\",\r\n\t\"sk\": \"slk\",\r\n\t\"sl\": \"slv\",\r\n\t\"so\": \"som\",\r\n\t\"st\": \"sot\",\r\n\t\"es\": \"spa\",\r\n\t\"su\": \"sun\",\r\n\t\"sw\": \"swa\",\r\n\t\"ss\": \"ssw\",\r\n\t\"sv\": \"swe\",\r\n\t\"ta\": \"tam\",\r\n\t\"te\": \"tel\",\r\n\t\"tg\": \"tgk\",\r\n\t\"th\": \"tha\",\r\n\t\"ti\": \"tir\",\r\n\t\"bo\": \"bod\",\r\n\t\"tk\": \"tuk\",\r\n\t\"tl\": \"tgl\",\r\n\t\"tn\": \"tsn\",\r\n\t\"to\": \"ton\",\r\n\t\"tr\": \"tur\",\r\n\t\"ts\": \"tso\",\r\n\t\"tt\": \"tat\",\r\n\t\"tw\": \"twi\",\r\n\t\"ty\": \"tah\",\r\n\t\"ug\": \"uig\",\r\n\t\"uk\": \"ukr\",\r\n\t\"ur\": \"urd\",\r\n\t\"uz\": \"uzb\",\r\n\t\"ve\": \"ven\",\r\n\t\"vi\": \"vie\",\r\n\t\"vo\": \"vol\",\r\n\t\"wa\": \"wln\",\r\n\t\"cy\": \"cym\",\r\n\t\"wo\": \"wol\",\r\n\t\"fy\": \"fry\",\r\n\t\"xh\": \"xho\",\r\n\t\"yi\": \"yid\",\r\n\t\"yo\": \"yor\",\r\n\t\"za\": \"zha\",\r\n\t\"zu\": \"zul\"\r\n};\r\n\r\n/**\r\n * Tell whether or not the str does not start with a lower case ASCII char.\r\n * @private\r\n * @param {string} str the char to check\r\n * @return {boolean} true if the char is not a lower case ASCII char\r\n */\r\nLocale._notLower = function(str) {\r\n\t// do this with ASCII only so we don't have to depend on the CType functions\r\n\tvar ch = str.charCodeAt(0);\r\n\treturn ch < 97 || ch > 122;\r\n};\r\n\r\n/**\r\n * Tell whether or not the str does not start with an upper case ASCII char.\r\n * @private\r\n * @param {string} str the char to check\r\n * @return {boolean} true if the char is a not an upper case ASCII char\r\n */\r\nLocale._notUpper = function(str) {\r\n\t// do this with ASCII only so we don't have to depend on the CType functions\r\n\tvar ch = str.charCodeAt(0);\r\n\treturn ch < 65 || ch > 90;\r\n};\r\n\r\n/**\r\n * Tell whether or not the str does not start with a digit char.\r\n * @private\r\n * @param {string} str the char to check\r\n * @return {boolean} true if the char is a not an upper case ASCII char\r\n */\r\nLocale._notDigit = function(str) {\r\n\t// do this with ASCII only so we don't have to depend on the CType functions\r\n\tvar ch = str.charCodeAt(0);\r\n\treturn ch < 48 || ch > 57;\r\n};\r\n\r\n/**\r\n * Tell whether or not the given string has the correct syntax to be \r\n * an ISO 639 language code.\r\n * \r\n * @private\r\n * @param {string} str the string to parse\r\n * @return {boolean} true if the string could syntactically be a language code.\r\n */\r\nLocale._isLanguageCode = function(str) {\r\n\tif (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfor (var i = 0; i < str.length; i++) {\r\n\t\tif (Locale._notLower(str.charAt(i))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * Tell whether or not the given string has the correct syntax to be \r\n * an ISO 3166 2-letter region code or M.49 3-digit region code.\r\n * \r\n * @private\r\n * @param {string} str the string to parse\r\n * @return {boolean} true if the string could syntactically be a language code.\r\n */\r\nLocale._isRegionCode = function (str) {\r\n\tif (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tif (str.length === 2) {\r\n\t\tfor (var i = 0; i < str.length; i++) {\r\n\t\t\tif (Locale._notUpper(str.charAt(i))) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tfor (var i = 0; i < str.length; i++) {\r\n\t\t\tif (Locale._notDigit(str.charAt(i))) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * Tell whether or not the given string has the correct syntax to be \r\n * an ISO 639 language code.\r\n * \r\n * @private\r\n * @param {string} str the string to parse\r\n * @return {boolean} true if the string could syntactically be a language code.\r\n */\r\nLocale._isScriptCode = function(str) {\r\n\tif (typeof(str) === 'undefined' || str.length !== 4 || Locale._notUpper(str.charAt(0))) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tfor (var i = 1; i < 4; i++) {\r\n\t\tif (Locale._notLower(str.charAt(i))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * Return the ISO-3166 alpha3 equivalent region code for the given ISO 3166 alpha2\r\n * region code. If the given alpha2 code is not found, this function returns its\r\n * argument unchanged.\r\n * @static\r\n * @param {string|undefined} alpha2 the alpha2 code to map\r\n * @return {string|undefined} the alpha3 equivalent of the given alpha2 code, or the alpha2\r\n * parameter if the alpha2 value is not found\r\n */\r\nLocale.regionAlpha2ToAlpha3 = function(alpha2) {\r\n\treturn Locale.a2toa3regmap[alpha2] || alpha2;\r\n};\r\n\r\n/**\r\n * Return the ISO-639 alpha3 equivalent language code for the given ISO 639 alpha1\r\n * language code. If the given alpha1 code is not found, this function returns its\r\n * argument unchanged.\r\n * @static\r\n * @param {string|undefined} alpha1 the alpha1 code to map\r\n * @return {string|undefined} the alpha3 equivalent of the given alpha1 code, or the alpha1\r\n * parameter if the alpha1 value is not found\r\n */\r\nLocale.languageAlpha1ToAlpha3 = function(alpha1) {\r\n\treturn Locale.a1toa3langmap[alpha1] || alpha1;\r\n};\r\n\r\nLocale.prototype = {\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_genSpec: function () {\r\n\t\tthis.spec = this.language || \"\";\r\n\t\t\r\n\t\tif (this.script) {\r\n\t\t\tif (this.spec.length > 0) {\r\n\t\t\t\tthis.spec += \"-\";\r\n\t\t\t}\r\n\t\t\tthis.spec += this.script;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.region) {\r\n\t\t\tif (this.spec.length > 0) {\r\n\t\t\t\tthis.spec += \"-\";\r\n\t\t\t}\r\n\t\t\tthis.spec += this.region;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.variant) {\r\n\t\t\tif (this.spec.length > 0) {\r\n\t\t\t\tthis.spec += \"-\";\r\n\t\t\t}\r\n\t\t\tthis.spec += this.variant;\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Return the ISO 639 language code for this locale. \r\n\t * @return {string|undefined} the language code for this locale \r\n\t */\r\n\tgetLanguage: function() {\r\n\t\treturn this.language;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the language of this locale as an ISO-639-alpha3 language code\r\n\t * @return {string|undefined} the alpha3 language code of this locale\r\n\t */\r\n\tgetLanguageAlpha3: function() {\r\n\t\treturn Locale.languageAlpha1ToAlpha3(this.language);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the ISO 3166 region code for this locale.\r\n\t * @return {string|undefined} the region code of this locale\r\n\t */\r\n\tgetRegion: function() {\r\n\t\treturn this.region;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the region of this locale as an ISO-3166-alpha3 region code\r\n\t * @return {string|undefined} the alpha3 region code of this locale\r\n\t */\r\n\tgetRegionAlpha3: function() {\r\n\t\treturn Locale.regionAlpha2ToAlpha3(this.region);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the ISO 15924 script code for this locale\r\n\t * @return {string|undefined} the script code of this locale\r\n\t */\r\n\tgetScript: function () {\r\n\t\treturn this.script;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the variant code for this locale\r\n\t * @return {string|undefined} the variant code of this locale, if any\r\n\t */\r\n\tgetVariant: function() {\r\n\t\treturn this.variant;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the whole locale specifier as a string.\r\n\t * @return {string} the locale specifier\r\n\t */\r\n\tgetSpec: function() {\r\n\t\treturn this.spec;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Express this locale object as a string. Currently, this simply calls the getSpec\r\n\t * function to represent the locale as its specifier.\r\n\t * \r\n\t * @return {string} the locale specifier\r\n\t */\r\n\ttoString: function() {\r\n\t\treturn this.getSpec();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return true if the the other locale is exactly equal to the current one.\r\n\t * @return {boolean} whether or not the other locale is equal to the current one \r\n\t */\r\n\tequals: function(other) {\r\n\t\treturn this.language === other.language &&\r\n\t\t\tthis.region === other.region &&\r\n\t\t\tthis.script === other.script &&\r\n\t\t\tthis.variant === other.variant;\r\n\t},\r\n\r\n\t/**\r\n\t * Return true if the current locale is the special pseudo locale.\r\n\t * @return {boolean} true if the current locale is the special pseudo locale\r\n\t */\r\n\tisPseudo: function () {\r\n\t\treturn JSUtils.indexOf(ilib.pseudoLocales, this.spec) > -1;\r\n\t}\r\n};\r\n\r\n// static functions\r\n/**\r\n * @private\r\n */\r\nLocale.locales = [\r\n\t// !macro localelist\r\n];\r\n\r\n/**\r\n * Return the list of available locales that this iLib file supports.\r\n * If this copy of ilib is pre-assembled with locale data, then the \r\n * list locales may be much smaller\r\n * than the list of all available locales in the iLib repository. The\r\n * assembly tool will automatically fill in the list for an assembled\r\n * copy of iLib. If this copy is being used with dynamically loaded \r\n * data, then you \r\n * can load any locale that iLib supports. You can form a locale with any \r\n * combination of a language and region tags that exist in the locale\r\n * data directory. Language tags are in the root of the locale data dir,\r\n * and region tags can be found underneath the \"und\" directory. (The \r\n * region tags are separated into a different dir because the region names \r\n * conflict with language names on file systems that are case-insensitive.) \r\n * If you have culled the locale data directory to limit the size of\r\n * your app, then this function should return only those files that actually exist\r\n * according to the ilibmanifest.json file in the root of that locale\r\n * data dir. Make sure your ilibmanifest.json file is up-to-date with\r\n * respect to the list of files that exist in the locale data dir.\r\n * \r\n * @param {boolean} sync if false, load the list of available files from disk\r\n * asynchronously, otherwise load them synchronously. (Default: true/synchronously)\r\n * @param {Function} onLoad a callback function to call if asynchronous\r\n * load was requested and the list of files have been loaded.\r\n * @return {Array.<string>} this is an array of locale specs for which \r\n * this iLib file has locale data for\r\n */\r\nLocale.getAvailableLocales = function (sync, onLoad) {\r\n\tvar locales = [];\r\n\tif (Locale.locales.length || typeof(ilib._load.listAvailableFiles) !== 'function') {\r\n\t\tlocales = Locale.locales;\r\n\t\tif (onLoad && typeof(onLoad) === 'function') {\r\n\t\t\tonLoad(locales);\r\n\t\t}\r\n\t} else {\r\n\t\tif (typeof(sync) === 'undefined') {\r\n\t\t\tsync = true;\r\n\t\t}\r\n\t\tilib._load.listAvailableFiles(sync, function(manifest) {\r\n\t\t\tif (manifest) {\r\n\t\t\t\tfor (var dir in manifest) {\r\n\t\t\t\t\tvar filelist = manifest[dir];\r\n\t\t\t\t\tfor (var i = 0; i < filelist.length; i++) {\r\n\t\t\t\t\t\tif (filelist[i].length > 15 && filelist[i].substr(-15) === \"localeinfo.json\") {\r\n\t\t\t\t\t\t\tlocales.push(filelist[i].substring(0,filelist[i].length-16).replace(/\\//g, \"-\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (onLoad && typeof(onLoad) === 'function') {\r\n\t\t\t\tonLoad(locales);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\treturn locales;\r\n};\r\n\r\nmodule.exports = Locale;\r\n","/*\r\n * ratadie.js - Represent the RD date number in the calendar\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nJulianDay.js\r\nMathUtils.js\r\nJSUtils.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\nvar JulianDay = require(\"./JulianDay.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\r\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \r\n * linear count of years since the beginning of the epoch, much like other calendars. This linear\r\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \r\n * to 60 and treated as if it were a year in the regular 60-year cycle.\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \r\n * the parts or specify the minutes, seconds, and milliseconds, but not both. This is only used\r\n * in the Hebrew calendar. \r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @param {Object=} params parameters that govern the settings and behaviour of this RD date\r\n */\r\nvar RataDie = function(params) {\r\n\tif (params) {\r\n\t\tif (typeof(params.date) !== 'undefined') {\r\n\t\t\t// accept JS Date classes or strings\r\n\t\t\tvar date = params.date;\r\n\t\t\tif (!(JSUtils.isDate(date))) {\r\n\t\t\t\tdate = new Date(date); // maybe a string initializer?\r\n\t\t\t}\r\n\t\t\tthis._setTime(date.getTime());\r\n\t\t} else if (typeof(params.unixtime) !== 'undefined') {\r\n\t\t\tthis._setTime(parseInt(params.unixtime, 10));\r\n\t\t} else if (typeof(params.julianday) !== 'undefined') {\r\n\t\t\t// JD time is defined to be UTC\r\n\t\t\tthis._setJulianDay(parseFloat(params.julianday));\r\n\t\t} else if (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\tparams.minute || params.second || params.millisecond || params.parts || params.cycle) {\r\n\t\t\tthis._setDateComponents(params);\r\n\t\t} else if (typeof(params.rd) !== 'undefined') {\r\n\t\t\tthis.rd = (typeof(params.rd) === 'object' && params.rd instanceof RataDie) ? params.rd.rd : params.rd;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @type {number} the Rata Die number of this date for this calendar type\r\n\t */\r\n\tif (typeof(this.rd) === 'undefined') {\r\n\t\tvar now = new Date();\r\n\t\tthis._setTime(now.getTime());\r\n\t}\r\n};\r\n\r\n/**\r\n * @private\r\n * @const\r\n * @type {number}\r\n */\r\nRataDie.gregorianEpoch = 1721424.5;\r\n\r\nRataDie.prototype = {\r\n\t/**\r\n\t * @protected\r\n\t * @const\r\n\t * @type {number}\r\n\t * the difference between a zero Julian day and the zero Gregorian date. \r\n\t */\r\n\tepoch: RataDie.gregorianEpoch,\r\n\t\r\n\t/**\r\n\t * Set the RD of this instance according to the given unix time. Unix time is\r\n\t * the number of milliseconds since midnight on Jan 1, 1970.\r\n\t *\r\n\t * @protected\r\n\t * @param {number} millis the unix time to set this date to in milliseconds \r\n\t */\r\n\t_setTime: function(millis) {\r\n\t\t// 2440587.5 is the julian day of midnight Jan 1, 1970, UTC (Gregorian)\r\n\t\tthis._setJulianDay(2440587.5 + millis / 86400000);\r\n\t},\r\n\r\n\t/**\r\n\t * Set the date of this instance using a Julian Day.\r\n\t * @protected\r\n\t * @param {number} date the Julian Day to use to set this date\r\n\t */\r\n\t_setJulianDay: function (date) {\r\n\t\tvar jd = (typeof(date) === 'number') ? new JulianDay(date) : date;\r\n\t\t// round to the nearest millisecond\r\n\t\tthis.rd = MathUtils.halfup((jd.getDate() - this.epoch) * 86400000) / 86400000;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the rd number of the particular day of the week on or before the \r\n\t * given rd. eg. The Sunday on or before the given rd.\r\n\t * @protected\r\n\t * @param {number} rd the rata die date of the reference date\r\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \r\n\t * to the current date\r\n\t * @return {number} the rd of the day of the week\r\n\t */\r\n\t_onOrBefore: function(rd, dayOfWeek) {\r\n\t\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 2, 7);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the rd number of the particular day of the week on or before the current rd.\r\n\t * eg. The Sunday on or before the current rd. If the offset is given, the calculation\r\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind \r\n\t * wall time, so it it would give the wrong day of the week if this calculation was\r\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\r\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\r\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \r\n\t * to the current date\r\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\r\n\t * not given\r\n\t * @return {number} the rd of the day of the week\r\n\t */\r\n\tonOrBefore: function(dayOfWeek, offset) {\r\n\t\toffset = offset || 0;\r\n\t\treturn this._onOrBefore(this.rd + offset, dayOfWeek) - offset;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the rd number of the particular day of the week on or before the current rd.\r\n\t * eg. The Sunday on or before the current rd. If the offset is given, the calculation\r\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind \r\n\t * wall time, so it it would give the wrong day of the week if this calculation was\r\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\r\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\r\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \r\n\t * to the reference date\r\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\r\n\t * not given\r\n\t * @return {number} the day of the week\r\n\t */\r\n\tonOrAfter: function(dayOfWeek, offset) {\r\n\t\toffset = offset || 0;\r\n\t\treturn this._onOrBefore(this.rd+6+offset, dayOfWeek) - offset;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the rd number of the particular day of the week before the current rd.\r\n\t * eg. The Sunday before the current rd. If the offset is given, the calculation\r\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind \r\n\t * wall time, so it it would give the wrong day of the week if this calculation was\r\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\r\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\r\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \r\n\t * to the reference date\r\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\r\n\t * not given\r\n\t * @return {number} the day of the week\r\n\t */\r\n\tbefore: function(dayOfWeek, offset) {\r\n\t\toffset = offset || 0;\r\n\t\treturn this._onOrBefore(this.rd-1+offset, dayOfWeek) - offset;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the rd number of the particular day of the week after the current rd.\r\n\t * eg. The Sunday after the current rd. If the offset is given, the calculation\r\n\t * happens in wall time instead of UTC. UTC time may be a day before or day behind \r\n\t * wall time, so it it would give the wrong day of the week if this calculation was\r\n\t * done in UTC time when the caller really wanted wall time. Even though the calculation\r\n\t * may be done in wall time, the return value is nonetheless always given in UTC.\r\n\t * @param {number} dayOfWeek the day of the week that is being sought relative \r\n\t * to the reference date\r\n\t * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is\r\n\t * not given\r\n\t * @return {number} the day of the week\r\n\t */\r\n\tafter: function(dayOfWeek, offset) {\r\n\t\toffset = offset || 0;\r\n\t\treturn this._onOrBefore(this.rd+7+offset, dayOfWeek) - offset;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the unix time equivalent to this Gregorian date instance. Unix time is\r\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. This method only\r\n\t * returns a valid number for dates between midnight, Jan 1, 1970 and  \r\n\t * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance \r\n\t * encodes a date outside of that range, this method will return -1.\r\n\t * \r\n\t * @return {number} a number giving the unix time, or -1 if the date is outside the\r\n\t * valid unix time range\r\n\t */\r\n\tgetTime: function() {\r\n\t\t// earlier than Jan 1, 1970\r\n\t\t// or later than Jan 19, 2038 at 3:14:07am\r\n\t\tvar jd = this.getJulianDay();\r\n\t\tif (jd < 2440587.5 || jd > 2465442.634803241) { \r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\r\n\t\t// avoid the rounding errors in the floating point math by only using\r\n\t\t// the whole days from the rd, and then calculating the milliseconds directly\r\n\t\treturn Math.round((jd - 2440587.5) * 86400000);\r\n\t},\r\n\r\n\t/**\r\n\t * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\r\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\r\n\t * (or the type \"time_t\" in C/C++) is only encoded with a unsigned 32 bit integer, and thus \r\n\t * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above \r\n\t * 32 bits and the Date object allows you to encode up to 100 million days worth of time \r\n\t * after Jan 1, 1970, and even more interestingly 100 million days worth of time before\r\n\t * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended \r\n\t * range. If this instance encodes a date outside of that range, this method will return\r\n\t * NaN.\r\n\t * \r\n\t * @return {number} a number giving the extended unix time, or NaN if the date is outside \r\n\t * the valid extended unix time range\r\n\t */\r\n\tgetTimeExtended: function() {\r\n\t\tvar jd = this.getJulianDay();\r\n\t\t\r\n\t\t// test if earlier than Jan 1, 1970 - 100 million days\r\n\t\t// or later than Jan 1, 1970 + 100 million days\r\n\t\tif (jd < -97559412.5 || jd > 102440587.5) { \r\n\t\t\treturn NaN;\r\n\t\t}\r\n\t\r\n\t\t// avoid the rounding errors in the floating point math by only using\r\n\t\t// the whole days from the rd, and then calculating the milliseconds directly\r\n\t\treturn Math.round((jd - 2440587.5) * 86400000);\r\n\t},\r\n\r\n\t/**\r\n\t * Return the Julian Day equivalent to this calendar date as a number.\r\n\t * This returns the julian day in UTC.\r\n\t * \r\n\t * @return {number} the julian date equivalent of this date\r\n\t */\r\n\tgetJulianDay: function() {\r\n\t\treturn this.rd + this.epoch;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the Rata Die (fixed day) number of this RD date.\r\n\t * \r\n\t * @return {number} the rd date as a number\r\n\t */\r\n\tgetRataDie: function() {\r\n\t\treturn this.rd;\r\n\t}\r\n};\r\n\r\nmodule.exports = RataDie;","/*\r\n * Utils.js - Core utility routines\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js Locale.js JSUtils.js\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Locale = require(\"./Locale.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\n\r\nvar Utils = {};\r\n\r\n/**\r\n * Find and merge all the locale data for a particular prefix in the given locale\r\n * and return it as a single javascript object. This merges the data in the \r\n * correct order:\r\n * \r\n * <ol>\r\n * <li>shared data (usually English)\r\n * <li>data for language\r\n * <li>data for language + region\r\n * <li>data for language + region + script\r\n * <li>data for language + region + script + variant\r\n * </ol>\r\n * \r\n * It is okay for any of the above to be missing. This function will just skip the \r\n * missing data. However, if everything except the shared data is missing, this \r\n * function returns undefined, allowing the caller to go and dynamically load the\r\n * data instead.\r\n * \r\n * @static\r\n * @param {string} prefix prefix under ilib.data of the data to merge\r\n * @param {Locale} locale locale of the data being sought\r\n * @param {boolean=} replaceArrays if true, replace the array elements in object1 with those in object2.\r\n * If false, concatenate array elements in object1 with items in object2.\r\n * @param {boolean=} returnOne if true, only return the most locale-specific data. If false,\r\n * merge all the relevant locale data together.\r\n * @return {Object?} the merged locale data\r\n */\r\nUtils.mergeLocData = function (prefix, locale, replaceArrays, returnOne) {\r\n\tvar data = undefined;\r\n\tvar loc = locale || new Locale();\r\n\tvar foundLocaleData = false;\r\n\tvar property = prefix;\r\n\tvar mostSpecific;\r\n\r\n\tdata = ilib.data[prefix] || {};\r\n\r\n\tmostSpecific = data;\r\n\r\n\tif (loc.getLanguage()) {\r\n\t\tproperty = prefix + '_' + loc.getLanguage();\r\n\t\tif (ilib.data[property]) {\r\n\t\t\tfoundLocaleData = true;\r\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\r\n\t\t\tmostSpecific = ilib.data[property];\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (loc.getRegion()) {\r\n\t\tproperty = prefix + '_' + loc.getRegion();\r\n\t\tif (ilib.data[property]) {\r\n\t\t\tfoundLocaleData = true;\r\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\r\n\t\t\tmostSpecific = ilib.data[property];\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (loc.getLanguage()) {\r\n\t\tproperty = prefix + '_' + loc.getLanguage();\r\n\t\t\r\n\t\tif (loc.getScript()) {\r\n\t\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();\r\n\t\t\tif (ilib.data[property]) {\r\n\t\t\t\tfoundLocaleData = true;\r\n\t\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\r\n\t\t\t\tmostSpecific = ilib.data[property];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (loc.getRegion()) {\r\n\t\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();\r\n\t\t\tif (ilib.data[property]) {\r\n\t\t\t\tfoundLocaleData = true;\r\n\t\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\r\n\t\t\t\tmostSpecific = ilib.data[property];\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\r\n\tif (loc.getRegion() && loc.getVariant()) {\r\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();\r\n\t\tif (ilib.data[property]) {\r\n\t\t\tfoundLocaleData = true;\r\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\r\n\t\t\tmostSpecific = ilib.data[property];\r\n\t\t}\r\n\t}\r\n\r\n\tif (loc.getLanguage() && loc.getScript() && loc.getRegion()) {\r\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();\r\n\t\tif (ilib.data[property]) {\r\n\t\t\tfoundLocaleData = true;\r\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\r\n\t\t\tmostSpecific = ilib.data[property];\r\n\t\t}\r\n\t}\r\n\r\n\tif (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {\r\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();\r\n\t\tif (ilib.data[property]) {\r\n\t\t\tfoundLocaleData = true;\r\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\r\n\t\t\tmostSpecific = ilib.data[property];\r\n\t\t}\r\n\t}\r\n\r\n\tif (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {\r\n\t\tproperty = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();\r\n\t\tif (ilib.data[property]) {\r\n\t\t\tfoundLocaleData = true;\r\n\t\t\tdata = JSUtils.merge(data, ilib.data[property], replaceArrays);\r\n\t\t\tmostSpecific = ilib.data[property];\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn foundLocaleData ? (returnOne ? mostSpecific : data) : undefined;\r\n};\r\n\r\n/**\r\n * Return an array of relative path names for the\r\n * files that represent the data for the given locale.<p>\r\n * \r\n * Note that to prevent the situation where a directory for\r\n * a language exists next to the directory for a region where\r\n * the language code and region code differ only by case, the \r\n * plain region directories are located under the special \r\n * \"undefined\" language directory which has the ISO code \"und\".\r\n * The reason is that some platforms have case-insensitive \r\n * file systems, and you cannot have 2 directories with the \r\n * same name which only differ by case. For example, \"es\" is\r\n * the ISO 639 code for the language \"Spanish\" and \"ES\" is\r\n * the ISO 3166 code for the region \"Spain\", so both the\r\n * directories cannot exist underneath \"locale\". The region\r\n * therefore will be loaded from \"und/ES\" instead.<p>  \r\n * \r\n * <h4>Variations</h4>\r\n * \r\n * With only language and region specified, the following\r\n * sequence of paths will be generated:<p>\r\n * \r\n * <pre>\r\n * language\r\n * und/region\r\n * language/region\r\n * </pre>\r\n * \r\n * With only language and script specified:<p>\r\n * \r\n * <pre>\r\n * language\r\n * language/script\r\n * </pre>\r\n * \r\n * With only script and region specified:<p>\r\n * \r\n * <pre>\r\n * und/region  \r\n * </pre>\r\n * \r\n * With only region and variant specified:<p>\r\n * \r\n * <pre>\r\n * und/region\r\n * region/variant\r\n * </pre>\r\n * \r\n * With only language, script, and region specified:<p>\r\n * \r\n * <pre>\r\n * language\r\n * und/region\r\n * language/script\r\n * language/region\r\n * language/script/region\r\n * </pre>\r\n * \r\n * With only language, region, and variant specified:<p>\r\n * \r\n * <pre>\r\n * language\r\n * und/region\r\n * language/region\r\n * region/variant\r\n * language/region/variant\r\n * </pre>\r\n * \r\n * With all parts specified:<p>\r\n * \r\n * <pre>\r\n * language\r\n * und/region\r\n * language/script\r\n * language/region\r\n * region/variant\r\n * language/script/region\r\n * language/region/variant\r\n * language/script/region/variant\r\n * </pre>\r\n * \r\n * @static\r\n * @param {Locale} locale load the files for this locale\r\n * @param {string?} name the file name of each file to load without\r\n * any path\r\n * @return {Array.<string>} An array of relative path names\r\n * for the files that contain the locale data\r\n */\r\nUtils.getLocFiles = function(locale, name) {\r\n\tvar dir = \"\";\r\n\tvar files = [];\r\n\tvar filename = name || \"resources.json\";\r\n\tvar loc = locale || new Locale();\r\n\t\r\n\tvar language = loc.getLanguage();\r\n\tvar region = loc.getRegion();\r\n\tvar script = loc.getScript();\r\n\tvar variant = loc.getVariant();\r\n\t\r\n\tfiles.push(filename); // generic shared file\r\n\t\r\n\tif (language) {\r\n\t\tdir = language + \"/\";\r\n\t\tfiles.push(dir + filename);\r\n\t}\r\n\t\r\n\tif (region) {\r\n\t\tdir = \"und/\" + region + \"/\";\r\n\t\tfiles.push(dir + filename);\r\n\t}\r\n\t\r\n\tif (language) {\r\n\t\tif (script) {\r\n\t\t\tdir = language + \"/\" + script + \"/\";\r\n\t\t\tfiles.push(dir + filename);\r\n\t\t}\r\n\t\tif (region) {\r\n\t\t\tdir = language + \"/\" + region + \"/\";\r\n\t\t\tfiles.push(dir + filename);\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (region && variant) {\r\n\t\tdir = \"und/\" + region + \"/\" + variant + \"/\";\r\n\t\tfiles.push(dir + filename);\r\n\t}\r\n\r\n\tif (language && script && region) {\r\n\t\tdir = language + \"/\" + script + \"/\" + region + \"/\";\r\n\t\tfiles.push(dir + filename);\r\n\t}\r\n\r\n\tif (language && region && variant) {\r\n\t\tdir = language + \"/\" + region + \"/\" + variant + \"/\";\r\n\t\tfiles.push(dir + filename);\r\n\t}\r\n\r\n\tif (language && script && region && variant) {\r\n\t\tdir = language + \"/\" + script + \"/\" + region + \"/\" + variant + \"/\";\r\n\t\tfiles.push(dir + filename);\r\n\t}\r\n\t\r\n\treturn files;\r\n};\r\n\r\n/**\r\n * Load data using the new loader object or via the old function callback.\r\n * @static\r\n * @private\r\n */\r\nUtils._callLoadData = function (files, sync, params, callback) {\r\n\t// console.log(\"Utils._callLoadData called\");\r\n\tif (typeof(ilib._load) === 'function') {\r\n\t\t// console.log(\"Utils._callLoadData: calling as a regular function\");\r\n\t\treturn ilib._load(files, sync, params, callback);\r\n\t} else if (typeof(ilib._load) === 'object' && typeof(ilib._load.loadFiles) === 'function') {\r\n\t\t// console.log(\"Utils._callLoadData: calling as an object\");\r\n\t\treturn ilib._load.loadFiles(files, sync, params, callback);\r\n\t}\r\n\t\r\n\t// console.log(\"Utils._callLoadData: not calling. Type is \" + typeof(ilib._load) + \" and instanceof says \" + (ilib._load instanceof Loader));\r\n\treturn undefined;\r\n};\r\n\r\n/**\r\n * Find locale data or load it in. If the data with the given name is preassembled, it will\r\n * find the data in ilib.data. If the data is not preassembled but there is a loader function,\r\n * this function will call it to load the data. Otherwise, the callback will be called with\r\n * undefined as the data. This function will create a cache under the given class object.\r\n * If data was successfully loaded, it will be set into the cache so that future access to \r\n * the same data for the same locale is much quicker.<p>\r\n * \r\n * The parameters can specify any of the following properties:<p>\r\n * \r\n * <ul>\r\n * <li><i>name</i> - String. The name of the file being loaded. Default: ResBundle.json\r\n * <li><i>object</i> - Object. The class attempting to load data. The cache is stored inside of here.\r\n * <li><i>locale</i> - Locale. The locale for which data is loaded. Default is the current locale.\r\n * <li><i>nonlocale</i> - boolean. If true, the data being loaded is not locale-specific.\r\n * <li><i>type</i> - String. Type of file to load. This can be \"json\" or \"other\" type. Default: \"json\" \r\n * <li><i>replace</i> - boolean. When merging json objects, this parameter controls whether to merge arrays\r\n * or have arrays replace each other. If true, arrays in child objects replace the arrays in parent \r\n * objects. When false, the arrays in child objects are concatenated with the arrays in parent objects.  \r\n * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function\r\n * <li><i>sync</i> - boolean. Whether or not to load the data synchronously\r\n * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.\r\n * Data is not returned from this method, so a callback function is mandatory.\r\n * </ul>\r\n * \r\n * @static\r\n * @param {Object} params Parameters configuring how to load the files (see above)\r\n */\r\nUtils.loadData = function(params) {\r\n\tvar name = \"resources.json\",\r\n\t\tobject = undefined, \r\n\t\tlocale = new Locale(ilib.getLocale()), \r\n\t\tsync = false, \r\n\t\ttype = undefined,\r\n\t\tloadParams = {},\r\n\t\tcallback = undefined,\r\n\t\tnonlocale = false,\r\n\t\treplace = false,\r\n\t\tbasename;\r\n\t\r\n\tif (!params || typeof(params.callback) !== 'function') {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (params.name) {\r\n\t\tname = params.name;\r\n\t}\r\n\tif (params.object) {\r\n\t\tobject = params.object;\r\n\t}\r\n\tif (params.locale) {\r\n\t\tlocale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t}\t\t\t\r\n\tif (params.type) {\r\n\t\ttype = params.type;\r\n\t}\r\n\tif (params.loadParams) {\r\n\t\tloadParams = params.loadParams;\r\n\t}\r\n\tif (params.sync) {\r\n\t\tsync = params.sync;\r\n\t}\r\n\tif (params.nonlocale) {\r\n\t\tnonlocale = !!params.nonlocale;\r\n\t}\r\n\tif (typeof(params.replace) === 'boolean') {\r\n\t\treplace = params.replace;\r\n\t}\r\n\t\r\n\tcallback = params.callback;\r\n\t\r\n\tif (object && !object.cache) {\r\n\t\tobject.cache = {};\r\n\t}\r\n\t\r\n\tif (!type) {\r\n\t\tvar dot = name.lastIndexOf(\".\");\r\n\t\ttype = (dot !== -1) ? name.substring(dot+1) : \"text\";\r\n\t}\r\n\r\n\tvar spec = ((!nonlocale && locale.getSpec().replace(/-/g, '_')) || \"root\") + \",\" + name + \",\" + String(JSUtils.hashCode(loadParams));\r\n\tif (!object || typeof(object.cache[spec]) === 'undefined') {\r\n\t\tvar data, returnOne = (loadParams && loadParams.returnOne);\r\n\t\t\r\n\t\tif (type === \"json\") {\r\n\t\t\t// console.log(\"type is json\");\r\n\t\t\tbasename = name.substring(0, name.lastIndexOf(\".\"));\r\n\t\t\tif (nonlocale) {\r\n\t\t\t\tbasename = basename.replace(/\\//g, '.').replace(/[\\\\\\+\\-]/g, \"_\");\r\n\t\t\t\tdata = ilib.data[basename];\r\n\t\t\t} else {\r\n\t\t\t\tdata = Utils.mergeLocData(basename, locale, replace, returnOne);\r\n\t\t\t}\r\n\t\t\tif (data) {\r\n\t\t\t\t// console.log(\"found assembled data\");\r\n\t\t\t\tif (object) {\r\n\t\t\t\t\tobject.cache[spec] = data;\r\n\t\t\t\t}\r\n\t\t\t\tcallback(data);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// console.log(\"ilib._load is \" + typeof(ilib._load));\r\n\t\tif (typeof(ilib._load) !== 'undefined') {\r\n\t\t\t// the data is not preassembled, so attempt to load it dynamically\r\n\t\t\tvar files = nonlocale ? [ name || \"resources.json\" ] : Utils.getLocFiles(locale, name);\r\n\t\t\tif (type !== \"json\") {\r\n\t\t\t\tloadParams.returnOne = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tUtils._callLoadData(files, sync, loadParams, ilib.bind(this, function(arr) {\r\n\t\t\t\tif (type === \"json\") {\r\n\t\t\t\t\tdata = ilib.data[basename] || {};\r\n\t\t\t\t\tfor (var i = 0; i < arr.length; i++) {\r\n\t\t\t\t\t\tif (typeof(arr[i]) !== 'undefined') {\r\n\t\t\t\t\t\t\tdata = loadParams.returnOne ? arr[i] : JSUtils.merge(data, arr[i], replace);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (object) {\r\n\t\t\t\t\t\tobject.cache[spec] = data;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcallback(data);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar i = arr.length-1; \r\n\t\t\t\t\twhile (i > -1 && !arr[i]) {\r\n\t\t\t\t\t\ti--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i > -1) {\r\n\t\t\t\t\t\tif (object) {\r\n\t\t\t\t\t\t\tobject.cache[spec] = arr[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcallback(arr[i]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcallback(undefined);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t} else {\r\n\t\t\t// no data other than the generic shared data\r\n\t\t\tif (type === \"json\") {\r\n\t\t\t\tdata = ilib.data[basename];\r\n\t\t\t}\r\n\t\t\tif (object && data) {\r\n\t\t\t\tobject.cache[spec] = data;\r\n\t\t\t}\r\n\t\t\tcallback(data);\r\n\t\t}\r\n\t} else {\r\n\t\tcallback(object.cache[spec]);\r\n\t}\r\n};\r\n\r\nmodule.exports = Utils;","/*\r\n * HebrewRataDie.js - Represent an RD date in the Hebrew calendar\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nMathUtils.js\r\nHebrewCal.js\r\nRataDie.js\r\n*/\r\n\r\nvar HebrewCal = require(\"./HebrewCal.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Hebrew RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \r\n * the parts or specify the minutes, seconds, and milliseconds, but not both. \r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Hebrew date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @extends RataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew RD date\r\n */\r\nvar HebrewRataDie = function(params) {\r\n\tthis.cal = params && params.cal || new HebrewCal();\r\n\tthis.rd = undefined;\r\n\tRataDie.call(this, params);\r\n};\r\n\r\nHebrewRataDie.prototype = new RataDie();\r\nHebrewRataDie.prototype.parent = RataDie;\r\nHebrewRataDie.prototype.constructor = HebrewRataDie;\r\n\r\n/**\r\n * The difference between a zero Julian day and the first day of the Hebrew \r\n * calendar: sunset on Monday, Tishri 1, 1 = September 7, 3760 BC Gregorian = JD 347997.25\r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nHebrewRataDie.prototype.epoch = 347997.25;\r\n\r\n/**\r\n * the cumulative lengths of each month for a non-leap year, without new years corrections\r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nHebrewRataDie.cumMonthLengths = [\r\n\t176,  /* Nisan */\r\n\t206,  /* Iyyar */\r\n\t235,  /* Sivan */\r\n\t265,  /* Tammuz */\r\n\t294,  /* Av */\r\n\t324,  /* Elul */\r\n\t0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\r\n\t30,   /* Heshvan */\r\n\t59,   /* Kislev */\r\n\t88,   /* Teveth */\r\n\t117,  /* Shevat */\r\n\t147   /* Adar I */\r\n];\r\n\r\n/**\r\n * the cumulative lengths of each month for a leap year, without new years corrections \r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nHebrewRataDie.cumMonthLengthsLeap = [\r\n\t206,  /* Nisan */\r\n\t236,  /* Iyyar */\r\n\t265,  /* Sivan */\r\n\t295,  /* Tammuz */\r\n\t324,  /* Av */\r\n\t354,  /* Elul */\r\n\t0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\r\n\t30,   /* Heshvan */\r\n\t59,   /* Kislev */\r\n\t88,   /* Teveth */\r\n\t117,  /* Shevat */\r\n\t147,  /* Adar I */\r\n\t177   /* Adar II */\r\n];\r\n\r\n/**\r\n * Calculate the Rata Die (fixed day) number of the given date from the\r\n * date components.\r\n * \r\n * @private\r\n * @param {Object} date the date components to calculate the RD from\r\n */\r\nHebrewRataDie.prototype._setDateComponents = function(date) {\r\n\tvar elapsed = HebrewCal.elapsedDays(date.year);\r\n\tvar days = elapsed +\r\n\t\tHebrewCal.newYearsCorrection(date.year, elapsed) +\r\n\t\tdate.day - 1;\r\n\tvar sum = 0, table;\r\n\t\r\n\t//console.log(\"getRataDie: converting \" +  JSON.stringify(date));\r\n\t//console.log(\"getRataDie: days is \" +  days);\r\n\t//console.log(\"getRataDie: new years correction is \" +  HebrewCal.newYearsCorrection(date.year, elapsed));\r\n\t\r\n\ttable = this.cal.isLeapYear(date.year) ? \r\n\t\tHebrewRataDie.cumMonthLengthsLeap :\r\n\t\tHebrewRataDie.cumMonthLengths;\r\n\tsum = table[date.month-1];\r\n\t\r\n\t// gets cumulative without correction, so now add in the correction\r\n\tif ((date.month < 7 || date.month > 8) && HebrewCal.longHeshvan(date.year)) {\r\n\t\tsum++;\r\n\t}\r\n\tif ((date.month < 7 || date.month > 9) && HebrewCal.longKislev(date.year)) {\r\n\t\tsum++;\r\n\t}\r\n\t// console.log(\"getRataDie: cum days is now \" +  sum);\r\n\t\r\n\tdays += sum;\r\n\t\r\n\t// the date starts at sunset, which we take as 18:00, so the hours from\r\n\t// midnight to 18:00 are on the current Gregorian day, and the hours from\r\n\t// 18:00 to midnight are on the previous Gregorian day. So to calculate the \r\n\t// number of hours into the current day that this time represents, we have\r\n\t// to count from 18:00 to midnight first, and add in 6 hours if the time is\r\n\t// less than 18:00\r\n\tvar minute, second, millisecond;\r\n\t\r\n\tif (typeof(date.parts) !== 'undefined') {\r\n\t\t// The parts (halaqim) of the hour. This can be a number from 0 to 1079.\r\n\t\tvar parts = parseInt(date.parts, 10);\r\n\t\tvar seconds = parseInt(parts, 10) * 3.333333333333;\r\n\t\tminute = Math.floor(seconds / 60);\r\n\t\tseconds -= minute * 60;\r\n\t\tsecond = Math.floor(seconds);\r\n\t\tmillisecond = (seconds - second);\t\r\n\t} else {\r\n\t\tminute = parseInt(date.minute, 10) || 0;\r\n\t\tsecond = parseInt(date.second, 10) || 0;\r\n\t\tmillisecond = parseInt(date.millisecond, 10) || 0;\r\n\t}\r\n\t\t\r\n\tvar time;\r\n\tif (date.hour >= 18) {\r\n\t\ttime = ((date.hour - 18 || 0) * 3600000 +\r\n\t\t\t(minute || 0) * 60000 +\r\n\t\t\t(second || 0) * 1000 +\r\n\t\t\t(millisecond || 0)) / \r\n\t\t\t86400000;\r\n\t} else {\r\n\t\ttime = 0.25 +\t// 6 hours from 18:00 to midnight on the previous gregorian day\r\n\t\t\t\t((date.hour || 0) * 3600000 +\r\n\t\t\t\t(minute || 0) * 60000 +\r\n\t\t\t\t(second || 0) * 1000 +\r\n\t\t\t\t(millisecond || 0)) / \r\n\t\t\t\t86400000;\r\n\t}\r\n\t\r\n\t//console.log(\"getRataDie: rd is \" +  (days + time));\r\n\tthis.rd = days + time;\r\n};\r\n\t\r\n/**\r\n * Return the rd number of the particular day of the week on or before the \r\n * given rd. eg. The Sunday on or before the given rd.\r\n * @private\r\n * @param {number} rd the rata die date of the reference date\r\n * @param {number} dayOfWeek the day of the week that is being sought relative \r\n * to the current date\r\n * @return {number} the rd of the day of the week\r\n */\r\nHebrewRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\r\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek + 1, 7);\r\n};\r\n\r\nmodule.exports = HebrewRataDie;\r\n","/*\r\n * IslamicRataDie.js - Represent an RD date in the Islamic calendar\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nIslamicCal.js\r\nRataDie.js\r\n*/\r\n\r\nvar RataDie = require(\"./RataDie.js\");\r\nvar IslamicCal = require(\"./IslamicCal.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Islamic RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Islamic date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @extends RataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic RD date\r\n */\r\nvar IslamicRataDie = function(params) {\r\n\tthis.cal = params && params.cal || new IslamicCal();\r\n\tthis.rd = undefined;\r\n\tRataDie.call(this, params);\r\n};\r\n\r\nIslamicRataDie.prototype = new RataDie();\r\nIslamicRataDie.prototype.parent = RataDie;\r\nIslamicRataDie.prototype.constructor = IslamicRataDie;\r\n\r\n/**\r\n * The difference between a zero Julian day and the first Islamic date\r\n * of Friday, July 16, 622 CE Julian. \r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nIslamicRataDie.prototype.epoch = 1948439.5;\r\n\r\n/**\r\n * Calculate the Rata Die (fixed day) number of the given date from the\r\n * date components.\r\n *\r\n * @protected\r\n * @param {Object} date the date components to calculate the RD from\r\n */\r\nIslamicRataDie.prototype._setDateComponents = function(date) {\r\n\tvar days = (date.year - 1) * 354 +\r\n\t\tMath.ceil(29.5 * (date.month - 1)) +\r\n\t\tdate.day +\r\n\t\tMath.floor((3 + 11 * date.year) / 30) - 1;\r\n\tvar time = (date.hour * 3600000 +\r\n\t\tdate.minute * 60000 +\r\n\t\tdate.second * 1000 +\r\n\t\tdate.millisecond) / \r\n\t\t86400000; \r\n\t\r\n\t//console.log(\"getRataDie: converting \" +  JSON.stringify(date));\r\n\t//console.log(\"getRataDie: days is \" +  days);\r\n\t//console.log(\"getRataDie: time is \" +  time);\r\n\t//console.log(\"getRataDie: rd is \" +  (days + time));\r\n\r\n\tthis.rd = days + time;\r\n};\r\n\t\r\nmodule.exports = IslamicRataDie;","/*\r\n * julianDate.js - Represent a date in the Julian calendar\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nJulianCal.js \r\nRataDie.js\r\n*/\r\n\r\nvar RataDie = require(\"./RataDie.js\");\r\nvar JulianCal = require(\"./JulianCal.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Julian RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Julian date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @extends RataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian RD date\r\n */\r\nvar JulianRataDie = function(params) {\r\n\tthis.cal = params && params.cal || new JulianCal();\r\n\tthis.rd = undefined;\r\n\tRataDie.call(this, params);\r\n};\r\n\r\nJulianRataDie.prototype = new RataDie();\r\nJulianRataDie.prototype.parent = RataDie;\r\nJulianRataDie.prototype.constructor = JulianRataDie;\r\n\r\n/**\r\n * The difference between a zero Julian day and the first Julian date\r\n * of Friday, July 16, 622 CE Julian. \r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nJulianRataDie.prototype.epoch = 1721422.5;\r\n\r\n/**\r\n * Calculate the Rata Die (fixed day) number of the given date from the\r\n * date components.\r\n * \r\n * @protected\r\n * @param {Object} date the date components to calculate the RD from\r\n */\r\nJulianRataDie.prototype._setDateComponents = function(date) {\r\n\tvar year = date.year + ((date.year < 0) ? 1 : 0);\r\n\tvar years = 365 * (year - 1) + Math.floor((year-1)/4);\r\n\tvar dayInYear = (date.month > 1 ? JulianCal.cumMonthLengths[date.month-1] : 0) +\r\n\t\tdate.day +\r\n\t\t(this.cal.isLeapYear(date.year) && date.month > 2 ? 1 : 0);\r\n\tvar rdtime = (date.hour * 3600000 +\r\n\t\tdate.minute * 60000 +\r\n\t\tdate.second * 1000 +\r\n\t\tdate.millisecond) / \r\n\t\t86400000;\r\n\t\r\n\t/*\r\n\tconsole.log(\"calcRataDie: converting \" +  JSON.stringify(parts));\r\n\tconsole.log(\"getRataDie: year is \" +  years);\r\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\r\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\r\n\tconsole.log(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\r\n\t*/\r\n\t\r\n\tthis.rd = years + dayInYear + rdtime;\r\n};\r\n\r\nmodule.exports = JulianRataDie;","/*\r\n * PersAlsoRataDie.js - Represent an RD date in the Persian algorithmic calendar\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nPersianAlgoCal.js \r\nMathUtils.js\r\nRataDie.js\r\n*/\r\n\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar PersianAlgoCal = require(\"./PersianAlgoCal.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Persian RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Persian date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @extends RataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\r\n */\r\nvar PersAlgoRataDie = function(params) {\r\n\tthis.cal = params && params.cal || new PersianAlgoCal();\r\n\tthis.rd = undefined;\r\n\tRataDie.call(this, params);\r\n};\r\n\r\nPersAlgoRataDie.prototype = new RataDie();\r\nPersAlgoRataDie.prototype.parent = RataDie;\r\nPersAlgoRataDie.prototype.constructor = PersAlgoRataDie;\r\n\r\n/**\r\n * The difference between a zero Julian day and the first Persian date\r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nPersAlgoRataDie.prototype.epoch = 1948319.5;\r\n\r\n/**\r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n * the cumulative lengths of each month, for a non-leap year \r\n */\r\nPersAlgoRataDie.cumMonthLengths = [\r\n    0,    // Farvardin\r\n\t31,   // Ordibehesht\r\n\t62,   // Khordad\r\n\t93,   // Tir\r\n\t124,  // Mordad\r\n\t155,  // Shahrivar\r\n\t186,  // Mehr\r\n\t216,  // Aban\r\n\t246,  // Azar\r\n\t276,  // Dey\r\n\t306,  // Bahman\r\n\t336,  // Esfand\r\n\t365\r\n];\r\n\r\n/**\r\n * Calculate the Rata Die (fixed day) number of the given date from the\r\n * date components.\r\n *\r\n * @protected\r\n * @param {Object} date the date components to calculate the RD from\r\n */\r\nPersAlgoRataDie.prototype._setDateComponents = function(date) {\r\n\tvar year = this.cal.equivalentCycleYear(date.year);\r\n\tvar y = date.year - (date.year >= 0 ? 474 : 473);\r\n\tvar rdOfYears = 1029983 * Math.floor(y/2820) + 365 * (year - 1) + Math.floor((682 * year - 110) / 2816);\r\n\tvar dayInYear = (date.month > 1 ? PersAlgoRataDie.cumMonthLengths[date.month-1] : 0) + date.day;\r\n\tvar rdtime = (date.hour * 3600000 +\r\n\t\tdate.minute * 60000 +\r\n\t\tdate.second * 1000 +\r\n\t\tdate.millisecond) /\r\n\t\t86400000;\r\n\t\r\n\t/*\r\n\t// console.log(\"getRataDie: converting \" +  JSON.stringify(this));\r\n\tconsole.log(\"getRataDie: year is \" +  year);\r\n\tconsole.log(\"getRataDie: rd of years is \" +  rdOfYears);\r\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\r\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\r\n\tconsole.log(\"getRataDie: rd is \" +  (rdOfYears + dayInYear + rdtime));\r\n\t*/\r\n\t\r\n\tthis.rd = rdOfYears + dayInYear + rdtime;\r\n};\r\n\r\n/**\r\n * Return the rd number of the particular day of the week on or before the \r\n * given rd. eg. The Sunday on or before the given rd.\r\n * @private\r\n * @param {number} rd the rata die date of the reference date\r\n * @param {number} dayOfWeek the day of the week that is being sought relative \r\n * to the current date\r\n * @return {number} the rd of the day of the week\r\n */\r\nPersAlgoRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\r\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);\r\n};\r\n\r\nmodule.exports = PersAlgoRataDie;","/*\r\n * IString.js - ilib string subclass definition\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js Utils.js Locale.js MathUtils.js\r\n\r\n// !data plurals\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar Locale = require(\"./Locale.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new ilib string instance. This string inherits from and\r\n * extends the Javascript String class. It can be\r\n * used almost anywhere that a normal Javascript string is used, though in\r\n * some instances you will need to call the {@link #toString} method when\r\n * a built-in Javascript string is needed. The formatting methods are \r\n * methods that are not in the intrinsic String class and are most useful\r\n * when localizing strings in an app or web site in combination with \r\n * the ResBundle class.<p>\r\n * \r\n * This class is named IString (\"ilib string\") so as not to conflict with the \r\n * built-in Javascript String class.\r\n * \r\n * @constructor\r\n * @param {string|IString=} string initialize this instance with this string \r\n */\r\nvar IString = function (string) {\r\n\tif (typeof(string) === 'object') {\r\n\t\tif (string instanceof IString) {\r\n\t\t\tthis.str = string.str;\t\r\n\t\t} else {\r\n\t\t\tthis.str = string.toString();\r\n\t\t}\r\n\t} else if (typeof(string) === 'string') {\r\n\t\tthis.str = new String(string);\r\n\t} else {\r\n\t\tthis.str = \"\";\r\n\t}\r\n\tthis.length = this.str.length;\r\n\tthis.cpLength = -1;\r\n\tthis.localeSpec = ilib.getLocale();\r\n};\r\n\r\n/**\r\n * Return true if the given character is a Unicode surrogate character,\r\n * either high or low.\r\n * \r\n * @private\r\n * @static\r\n * @param {string} ch character to check\r\n * @return {boolean} true if the character is a surrogate\r\n */\r\nIString._isSurrogate = function (ch) {\r\n\tvar n = ch.charCodeAt(0);\r\n\treturn ((n >= 0xDC00 && n <= 0xDFFF) || (n >= 0xD800 && n <= 0xDBFF));\r\n};\r\n\r\n/**\r\n * Convert a UCS-4 code point to a Javascript string. The codepoint can be any valid \r\n * UCS-4 Unicode character, including supplementary characters. Standard Javascript\r\n * only supports supplementary characters using the UTF-16 encoding, which has \r\n * values in the range 0x0000-0xFFFF. String.fromCharCode() will only\r\n * give you a string containing 16-bit characters, and will not properly convert \r\n * the code point for a supplementary character (which has a value > 0xFFFF) into \r\n * two UTF-16 surrogate characters. Instead, it will just just give you whatever\r\n * single character happens to be the same as your code point modulo 0x10000, which\r\n * is almost never what you want.<p> \r\n * \r\n * Similarly, that means if you use String.charCodeAt()\r\n * you will only retrieve a 16-bit value, which may possibly be a single\r\n * surrogate character that is part of a surrogate pair representing a character\r\n * in the supplementary plane. It will not give you a code point. Use \r\n * IString.codePointAt() to access code points in a string, or use \r\n * an iterator to walk through the code points in a string. \r\n * \r\n * @static\r\n * @param {number} codepoint UCS-4 code point to convert to a character\r\n * @return {string} a string containing the character represented by the codepoint\r\n */\r\nIString.fromCodePoint = function (codepoint) {\r\n\tif (codepoint < 0x10000) {\r\n\t\treturn String.fromCharCode(codepoint);\r\n\t} else {\r\n\t\tvar high = Math.floor(codepoint / 0x10000) - 1;\r\n\t\tvar low = codepoint & 0xFFFF;\r\n\t\t\r\n\t\treturn String.fromCharCode(0xD800 | ((high & 0x000F) << 6) |  ((low & 0xFC00) >> 10)) +\r\n\t\t\tString.fromCharCode(0xDC00 | (low & 0x3FF));\r\n\t}\r\n};\r\n\r\n/**\r\n * Convert the character or the surrogate pair at the given\r\n * index into the intrinsic Javascript string to a Unicode \r\n * UCS-4 code point.\r\n * \r\n * @param {string} str string to get the code point from\r\n * @param {number} index index into the string\r\n * @return {number} code point of the character at the\r\n * given index into the string\r\n */\r\nIString.toCodePoint = function(str, index) {\r\n\tif (!str || str.length === 0) {\r\n\t\treturn -1;\r\n\t}\r\n\tvar code = -1, high = str.charCodeAt(index);\r\n\tif (high >= 0xD800 && high <= 0xDBFF) {\r\n\t\tif (str.length > index+1) {\r\n\t\t\tvar low = str.charCodeAt(index+1);\r\n\t\t\tif (low >= 0xDC00 && low <= 0xDFFF) {\r\n\t\t\t\tcode = (((high & 0x3C0) >> 6) + 1) << 16 |\r\n\t\t\t\t\t(((high & 0x3F) << 10) | (low & 0x3FF));\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tcode = high;\r\n\t}\r\n\t\r\n\treturn code;\r\n};\r\n\r\n/**\r\n * Load the plural the definitions of plurals for the locale.\r\n * @param {boolean=} sync\r\n * @param {Locale|string=} locale\r\n * @param {Object=} loadParams\r\n * @param {function(*)=} onLoad\r\n */\r\nIString.loadPlurals = function (sync, locale, loadParams, onLoad) {\r\n\tvar loc;\r\n\tif (locale) {\r\n\t\tloc = (typeof(locale) === 'string') ? new Locale(locale) : locale;\r\n\t} else {\r\n\t\tloc = new Locale(ilib.getLocale());\r\n\t}\r\n\tvar spec = loc.getLanguage();\r\n\tif (!ilib.data[\"plurals_\" + spec]) {\r\n\t\tUtils.loadData({\r\n\t\t\tname: \"plurals.json\",\r\n\t\t\tobject: IString,\r\n\t\t\tlocale: loc,\r\n\t\t\tsync: sync,\r\n\t\t\tloadParams: loadParams,\r\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(plurals) {\r\n\t\t\t\tif (!plurals) {\r\n\t\t\t\t\tIString.cache[spec] = {};\r\n\t\t\t\t}\r\n\t\t\t\tilib.data[\"plurals_\" + spec] = plurals || {};\r\n\t\t\t\tif (onLoad && typeof(onLoad) === 'function') {\r\n\t\t\t\t\tonLoad(ilib.data[\"plurals_\" + spec]);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t} else {\r\n\t\tif (onLoad && typeof(onLoad) === 'function') {\r\n\t\t\tonLoad(ilib.data[\"plurals_\" + spec]);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @private\r\n * @static\r\n */\r\nIString._fncs = {\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} obj\r\n\t * @return {string|undefined}\r\n\t */\r\n\tfirstProp: function (obj) {\r\n\t\tfor (var p in obj) {\r\n\t\t\tif (p && obj[p]) {\r\n\t\t\t\treturn p;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined; // should never get here\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} obj\r\n\t * @param {number} n\r\n\t * @return {?}\r\n\t */\r\n\tgetValue: function (obj, n) {\r\n\t\tif (typeof(obj) === 'object') {\r\n\t\t\tvar subrule = IString._fncs.firstProp(obj);\r\n\t\t\treturn IString._fncs[subrule](obj[subrule], n);\r\n\t\t} else if (typeof(obj) === 'string') {\r\n\t\t\treturn n;\r\n\t\t} else {\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {number} n\r\n\t * @param {Array.<number|Array.<number>>} range\r\n\t * @return {boolean}\r\n\t */\r\n\tmatchRangeContinuous: function(n, range) {\r\n\t\tfor (var num in range) {\r\n\t\t\tif (typeof(num) !== 'undefined' && typeof(range[num]) !== 'undefined') {\r\n\t\t\t\tvar obj = /** @type {Object|null|undefined} */ range[num];\r\n\t\t\t\tif (typeof(obj) === 'number') {\r\n\t\t\t\t\tif (n === range[num]) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (Object.prototype.toString.call(obj) === '[object Array]') {\r\n\t\t\t\t\tif (n >= obj[0] && n <= obj[1]) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {number} n\r\n\t * @param {Array.<number|Array.<number>>} range\r\n\t * @return {boolean}\r\n\t */\r\n\tmatchRange: function(n, range) {\r\n\t\tif (Math.floor(n) !== n) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn IString._fncs.matchRangeContinuous(n, range);\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {boolean}\r\n\t */\r\n\tis: function(rule, n) {\r\n\t\tvar left = IString._fncs.getValue(rule[0], n);\r\n\t\tvar right = IString._fncs.getValue(rule[1], n);\r\n\t\treturn left == right;\r\n\t\t// return IString._fncs.getValue(rule[0]) == IString._fncs.getValue(rule[1]);\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {boolean}\r\n\t */\r\n\tisnot: function(rule, n) {\r\n\t\treturn IString._fncs.getValue(rule[0], n) != IString._fncs.getValue(rule[1], n);\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {boolean}\r\n\t */\r\n\tinrange: function(rule, n) {\r\n\t\treturn IString._fncs.matchRange(IString._fncs.getValue(rule[0], n), rule[1]);\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {boolean}\r\n\t */\r\n\tnotin: function(rule, n) {\r\n\t\treturn !IString._fncs.matchRange(IString._fncs.getValue(rule[0], n), rule[1]);\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {boolean}\r\n\t */\r\n\twithin: function(rule, n) {\r\n\t\treturn IString._fncs.matchRangeContinuous(IString._fncs.getValue(rule[0], n), rule[1]);\t\t\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {number}\r\n\t */\r\n\tmod: function(rule, n) {\r\n\t\treturn MathUtils.mod(IString._fncs.getValue(rule[0], n), IString._fncs.getValue(rule[1], n));\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {number}\r\n\t */\r\n\tn: function(rule, n) {\r\n\t\treturn n;\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {boolean}\r\n\t */\r\n\tor: function(rule, n) {\r\n\t\treturn IString._fncs.getValue(rule[0], n) || IString._fncs.getValue(rule[1], n);\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object} rule\r\n\t * @param {number} n\r\n\t * @return {boolean}\r\n\t */\r\n\tand: function(rule, n) {\r\n\t\treturn IString._fncs.getValue(rule[0], n) && IString._fncs.getValue(rule[1], n);\r\n\t}\r\n};\r\n\r\nIString.prototype = {\r\n\t/**\r\n\t * Return the length of this string in characters. This function defers to the regular\r\n\t * Javascript string class in order to perform the length function. Please note that this\r\n\t * method is a real method, whereas the length property of Javascript strings is \r\n\t * implemented by native code and appears as a property.<p>\r\n\t * \r\n\t * Example:\r\n\t * \r\n\t * <pre>\r\n\t * var str = new IString(\"this is a string\");\r\n\t * console.log(\"String is \" + str._length() + \" characters long.\");\r\n\t * </pre>\r\n\t * @private\r\n\t */\r\n\t_length: function () {\r\n\t\treturn this.str.length;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Format this string instance as a message, replacing the parameters with \r\n\t * the given values.<p>\r\n\t * \r\n\t * The string can contain any text that a regular Javascript string can\r\n\t * contain. Replacement parameters have the syntax:\r\n\t * \r\n\t * <pre>\r\n\t * {name}\r\n\t * </pre>\r\n\t * \r\n\t * Where \"name\" can be any string surrounded by curly brackets. The value of \r\n\t * \"name\" is taken from the parameters argument.<p>\r\n\t * \r\n\t * Example:\r\n\t * \r\n\t * <pre>\r\n\t * var str = new IString(\"There are {num} objects.\");\r\n\t * console.log(str.format({\r\n\t *   num: 12\r\n\t * });\r\n\t * </pre>\r\n\t * \r\n\t * Would give the output:\r\n\t * \r\n\t * <pre>\r\n\t * There are 12 objects.\r\n\t * </pre>\r\n\t * \r\n\t * If a property is missing from the parameter block, the replacement\r\n\t * parameter substring is left untouched in the string, and a different\r\n\t * set of parameters may be applied a second time. This way, different\r\n\t * parts of the code may format different parts of the message that they\r\n\t * happen to know about.<p>\r\n\t * \r\n\t * Example:\r\n\t * \r\n\t * <pre>\r\n\t * var str = new IString(\"There are {num} objects in the {container}.\");\r\n\t * console.log(str.format({\r\n\t *   num: 12\r\n\t * });\r\n\t * </pre>\r\n\t * \r\n\t * Would give the output:<p>\r\n\t * \r\n\t * <pre>\r\n\t * There are 12 objects in the {container}.\r\n\t * </pre>\r\n\t * \r\n\t * The result can then be formatted again with a different parameter block that\r\n\t * specifies a value for the container property.\r\n\t * \r\n\t * @param params a Javascript object containing values for the replacement \r\n\t * parameters in the current string\r\n\t * @return a new IString instance with as many replacement parameters filled\r\n\t * out as possible with real values.\r\n\t */\r\n\tformat: function (params) {\r\n\t\tvar formatted = this.str;\r\n\t\tif (params) {\r\n\t\t\tvar regex;\r\n\t\t\tfor (var p in params) {\r\n\t\t\t\tif (typeof(params[p]) !== 'undefined') {\r\n\t\t\t\t\tregex = new RegExp(\"\\{\"+p+\"\\}\", \"g\");\r\n\t\t\t\t\tformatted = formatted.replace(regex, params[p]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn formatted.toString();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Format a string as one of a choice of strings dependent on the value of\r\n\t * a particular argument index.<p>\r\n\t * \r\n\t * The syntax of the choice string is as follows. The string contains a\r\n\t * series of choices separated by a vertical bar character \"|\". Each choice\r\n\t * has a value or range of values to match followed by a hash character \"#\"\r\n\t * followed by the string to use if the variable matches the criteria.<p>\r\n\t * \r\n\t * Example string:\r\n\t * \r\n\t * <pre>\r\n\t * var num = 2;\r\n\t * var str = new IString(\"0#There are no objects.|1#There is one object.|2#There are {number} objects.\");\r\n\t * console.log(str.formatChoice(num, {\r\n\t *   number: num\r\n\t * }));\r\n\t * </pre>\r\n\t * \r\n\t * Gives the output:\r\n\t * \r\n\t * <pre>\r\n\t * \"There are 2 objects.\"\r\n\t * </pre>\r\n\t * \r\n\t * The strings to format may contain replacement variables that will be formatted\r\n\t * using the format() method above and the params argument as a source of values\r\n\t * to use while formatting those variables.<p>\r\n\t * \r\n\t * If the criterion for a particular choice is empty, that choice will be used\r\n\t * as the default one for use when none of the other choice's criteria match.<p>\r\n\t * \r\n\t * Example string:\r\n\t * \r\n\t * <pre>\r\n\t * var num = 22;\r\n\t * var str = new IString(\"0#There are no objects.|1#There is one object.|#There are {number} objects.\");\r\n\t * console.log(str.formatChoice(num, {\r\n\t *   number: num\r\n\t * }));\r\n\t * </pre>\r\n\t * \r\n\t * Gives the output:\r\n\t * \r\n\t * <pre>\r\n\t * \"There are 22 objects.\"\r\n\t * </pre>\r\n\t * \r\n\t * If multiple choice patterns can match a given argument index, the first one \r\n\t * encountered in the string will be used. If no choice patterns match the \r\n\t * argument index, then the default choice will be used. If there is no default\r\n\t * choice defined, then this method will return an empty string.<p>\r\n\t * \r\n\t * <b>Special Syntax</b><p>\r\n\t * \r\n\t * For any choice format string, all of the patterns in the string should be\r\n\t * of a single type: numeric, boolean, or string/regexp. The type of the \r\n\t * patterns is determined by the type of the argument index parameter.<p>\r\n\t * \r\n\t * If the argument index is numeric, then some special syntax can be used \r\n\t * in the patterns to match numeric ranges.<p>\r\n\t * \r\n\t * <ul>\r\n\t * <li><i>&gt;x</i> - match any number that is greater than x \r\n\t * <li><i>&gt;=x</i> - match any number that is greater than or equal to x\r\n\t * <li><i>&lt;x</i> - match any number that is less than x\r\n\t * <li><i>&lt;=x</i> - match any number that is less than or equal to x\r\n\t * <li><i>start-end</i> - match any number in the range [start,end)\r\n\t * <li><i>zero</i> - match any number in the class \"zero\". (See below for\r\n\t * a description of number classes.)\r\n\t * <li><i>one</i> - match any number in the class \"one\"\r\n\t * <li><i>two</i> - match any number in the class \"two\"\r\n\t * <li><i>few</i> - match any number in the class \"few\"\r\n\t * <li><i>many</i> - match any number in the class \"many\"\r\n\t * </ul>\r\n\t * \r\n\t * A number class defines a set of numbers that receive a particular syntax\r\n\t * in the strings. For example, in Slovenian, integers ending in the digit\r\n\t * \"1\" are in the \"one\" class, including 1, 21, 31, ... 101, 111, etc.\r\n\t * Similarly, integers ending in the digit \"2\" are in the \"two\" class. \r\n\t * Integers ending in the digits \"3\" or \"4\" are in the \"few\" class, and\r\n\t * every other integer is handled by the default string.<p>\r\n\t * \r\n\t * The definition of what numbers are included in a class is locale-dependent.\r\n\t * They are defined in the data file plurals.json. If your string is in a\r\n\t * different locale than the default for ilib, you should call the setLocale()\r\n\t * method of the string instance before calling this method.<p> \r\n\t * \r\n\t * <b>Other Pattern Types</b><p>\r\n\t * \r\n\t * If the argument index is a boolean, the string values \"true\" and \"false\" \r\n\t * may appear as the choice patterns.<p>\r\n\t * \r\n\t * If the argument index is of type string, then the choice patterns may contain\r\n\t * regular expressions, or static strings as degenerate regexps.\r\n\t * \r\n\t * @param {*} argIndex The index into the choice array of the current parameter\r\n\t * @param {Object} params The hash of parameter values that replace the replacement \r\n\t * variables in the string\r\n\t * @throws \"syntax error in choice format pattern: \" if there is a syntax error\r\n\t * @return {string} the formatted string\r\n\t */\r\n\tformatChoice: function(argIndex, params) {\r\n\t\tvar choices = this.str.split(\"|\");\r\n\t\tvar type = typeof(argIndex);\r\n\t\tvar limits = [];\r\n\t\tvar strings = [];\r\n\t\tvar i;\r\n\t\tvar parts;\r\n\t\tvar limit;\r\n\t\tvar arg;\r\n\t\tvar result = undefined;\r\n\t\tvar defaultCase = \"\";\r\n\t\r\n\t\tif (this.str.length === 0) {\r\n\t\t\t// nothing to do\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\t\r\n\t\t// first parse all the choices\r\n\t\tfor (i = 0; i < choices.length; i++) {\t\t\r\n\t\t\tparts = choices[i].split(\"#\");\t\t\r\n\t\t\tif (parts.length > 2) {\r\n\t\t\t\tlimits[i] = parts[0];\r\n\t\t\t\tparts = parts.shift();\t\t\t\r\n\t\t\t\tstrings[i] = parts.join(\"#\");\r\n\t\t\t} else if (parts.length === 2) {\r\n\t\t\t\tlimits[i] = parts[0];\r\n\t\t\t\tstrings[i] = parts[1];\r\n\t\t\t} else {\r\n\t\t\t\t// syntax error\r\n\t\t\t\tthrow \"syntax error in choice format pattern: \" + choices[i];\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\t// then apply the argument index\r\n\t\tfor (i = 0; i < limits.length; i++) {\r\n\t\t\tif (limits[i].length === 0) {\r\n\t\t\t\t// this is default case\r\n\t\t\t\tdefaultCase = new IString(strings[i]);\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase 'number':\r\n\t\t\t\t\t\targ = parseInt(argIndex, 10);\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (limits[i].substring(0,2) === \"<=\") {\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(2));\r\n\t\t\t\t\t\t\tif (arg <= limit) {\r\n\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (limits[i].substring(0,2) === \">=\") {\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(2));\r\n\t\t\t\t\t\t\tif (arg >= limit) {\r\n\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (limits[i].charAt(0) === \"<\") {\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(1));\r\n\t\t\t\t\t\t\tif (arg < limit) {\r\n\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (limits[i].charAt(0) === \">\") {\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlimit = parseFloat(limits[i].substring(1));\r\n\t\t\t\t\t\t\tif (arg > limit) {\r\n\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.locale = this.locale || new Locale(this.localeSpec);\r\n\t\t\t\t\t\t\tswitch (limits[i]) {\r\n\t\t\t\t\t\t\t\tcase \"zero\":\r\n\t\t\t\t\t\t\t\tcase \"one\":\r\n\t\t\t\t\t\t\t\tcase \"two\":\r\n\t\t\t\t\t\t\t\tcase \"few\":\r\n\t\t\t\t\t\t\t\tcase \"many\":\r\n\t\t\t\t\t\t\t\t\t// CLDR locale-dependent number classes\r\n\t\t\t\t\t\t\t\t\tvar ruleset = ilib.data[\"plurals_\" + this.locale.getLanguage()];\r\n\t\t\t\t\t\t\t\t\tif (ruleset) {\r\n\t\t\t\t\t\t\t\t\t\tvar rule = ruleset[limits[i]];\r\n\t\t\t\t\t\t\t\t\t\tif (IString._fncs.getValue(rule, arg)) {\r\n\t\t\t\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\tvar dash = limits[i].indexOf(\"-\");\r\n\t\t\t\t\t\t\t\t\tif (dash !== -1) {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t// range\r\n\t\t\t\t\t\t\t\t\t\tvar start = limits[i].substring(0, dash);\r\n\t\t\t\t\t\t\t\t\t\tvar end = limits[i].substring(dash+1);\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tif (arg >= parseInt(start, 10) && arg <= parseInt(end, 10)) {\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t} else if (arg === parseInt(limits[i], 10)) {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t// exact amount\r\n\t\t\t\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'boolean':\t\t\t\t\t\r\n\t\t\t\t\t\tif (limits[i] === \"true\" && argIndex === true) {\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t} else if (limits[i] === \"false\" && argIndex === false) {\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'string':\t\t\t\t\t\r\n\t\t\t\t\t\tvar regexp = new RegExp(limits[i], \"i\");\r\n\t\t\t\t\t\tif (regexp.test(argIndex)) {\r\n\t\t\t\t\t\t\tresult = new IString(strings[i]);\r\n\t\t\t\t\t\t\ti = limits.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'object':\r\n\t\t\t\t\t\tthrow \"syntax error: fmtChoice parameter for the argument index cannot be an object\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!result) {\t\t\r\n\t\t\tresult = defaultCase || new IString(\"\");\r\n\t\t}\r\n\t\t\r\n\t\tresult = result.format(params);\r\n\t\t\r\n\t\treturn result.toString();\r\n\t},\r\n\t\r\n\t// delegates\r\n\t/**\r\n\t * Same as String.toString()\r\n\t * @return {string} this instance as regular Javascript string\r\n\t */\r\n\ttoString: function () {\r\n\t\treturn this.str.toString();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.valueOf()\r\n\t * @return {string} this instance as a regular Javascript string\r\n\t */\r\n\tvalueOf: function () {\r\n\t\treturn this.str.valueOf();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.charAt()\r\n\t * @param {number} index the index of the character being sought\r\n\t * @return {IString} the character at the given index\r\n\t */\r\n\tcharAt: function(index) {\r\n\t\treturn new IString(this.str.charAt(index));\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.charCodeAt(). This only reports on \r\n\t * 2-byte UCS-2 Unicode values, and does not take into\r\n\t * account supplementary characters encoded in UTF-16.\r\n\t * If you would like to take account of those characters,\r\n\t * use codePointAt() instead.\r\n\t * @param {number} index the index of the character being sought\r\n\t * @return {number} the character code of the character at the \r\n\t * given index in the string \r\n\t */\r\n\tcharCodeAt: function(index) {\r\n\t\treturn this.str.charCodeAt(index);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.concat()\r\n\t * @param {string} strings strings to concatenate to the current one\r\n\t * @return {IString} a concatenation of the given strings\r\n\t */\r\n\tconcat: function(strings) {\r\n\t\treturn new IString(this.str.concat(strings));\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.indexOf()\r\n\t * @param {string} searchValue string to search for\r\n\t * @param {number} start index into the string to start searching, or\r\n\t * undefined to search the entire string\r\n\t * @return {number} index into the string of the string being sought,\r\n\t * or -1 if the string is not found \r\n\t */\r\n\tindexOf: function(searchValue, start) {\r\n\t\treturn this.str.indexOf(searchValue, start);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.lastIndexOf()\r\n\t * @param {string} searchValue string to search for\r\n\t * @param {number} start index into the string to start searching, or\r\n\t * undefined to search the entire string\r\n\t * @return {number} index into the string of the string being sought,\r\n\t * or -1 if the string is not found \r\n\t */\r\n\tlastIndexOf: function(searchValue, start) {\r\n\t\treturn this.str.lastIndexOf(searchValue, start);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.match()\r\n\t * @param {string} regexp the regular expression to match\r\n\t * @return {Array.<string>} an array of matches\r\n\t */\r\n\tmatch: function(regexp) {\r\n\t\treturn this.str.match(regexp);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.replace()\r\n\t * @param {string} searchValue a regular expression to search for\r\n\t * @param {string} newValue the string to replace the matches with\r\n\t * @return {IString} a new string with all the matches replaced\r\n\t * with the new value\r\n\t */\r\n\treplace: function(searchValue, newValue) {\r\n\t\treturn new IString(this.str.replace(searchValue, newValue));\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.search()\r\n\t * @param {string} regexp the regular expression to search for\r\n\t * @return {number} position of the match, or -1 for no match\r\n\t */\r\n\tsearch: function(regexp) {\r\n\t\treturn this.str.search(regexp);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.slice()\r\n\t * @param {number} start first character to include in the string\r\n\t * @param {number} end include all characters up to, but not including\r\n\t * the end character\r\n\t * @return {IString} a slice of the current string\r\n\t */\r\n\tslice: function(start, end) {\r\n\t\treturn new IString(this.str.slice(start, end));\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.split()\r\n\t * @param {string} separator regular expression to match to find\r\n\t * separations between the parts of the text\r\n\t * @param {number} limit maximum number of items in the final \r\n\t * output array. Any items beyond that limit will be ignored.\r\n\t * @return {Array.<string>} the parts of the current string split \r\n\t * by the separator\r\n\t */\r\n\tsplit: function(separator, limit) {\r\n\t\treturn this.str.split(separator, limit);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.substr()\r\n\t * @param {number} start the index of the character that should \r\n\t * begin the returned substring\r\n\t * @param {number} length the number of characters to return after\r\n\t * the start character.\r\n\t * @return {IString} the requested substring \r\n\t */\r\n\tsubstr: function(start, length) {\r\n\t\tvar plat = ilib._getPlatform();\r\n\t\tif (plat === \"qt\" || plat === \"rhino\" || plat === \"trireme\") {\r\n\t\t\t// qt and rhino have a broken implementation of substr(), so\r\n\t\t\t// work around it\r\n\t\t\tif (typeof(length) === \"undefined\") {\r\n\t\t\t\tlength = this.str.length - start;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new IString(this.str.substr(start, length));\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.substring()\r\n\t * @param {number} from the index of the character that should \r\n\t * begin the returned substring\r\n\t * @param {number} to the index where to stop the extraction. If\r\n\t * omitted, extracts the rest of the string\r\n\t * @return {IString} the requested substring \r\n\t */\r\n\tsubstring: function(from, to) {\r\n\t\treturn this.str.substring(from, to);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.toLowerCase(). Note that this method is\r\n\t * not locale-sensitive. \r\n\t * @return {IString} a string with the first character\r\n\t * lower-cased\r\n\t */\r\n\ttoLowerCase: function() {\r\n\t\treturn this.str.toLowerCase();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Same as String.toUpperCase(). Note that this method is\r\n\t * not locale-sensitive. Use toLocaleUpperCase() instead\r\n\t * to get locale-sensitive behaviour. \r\n\t * @return {IString} a string with the first character\r\n\t * upper-cased\r\n\t */\r\n\ttoUpperCase: function() {\r\n\t\treturn this.str.toUpperCase();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Convert the character or the surrogate pair at the given\r\n\t * index into the string to a Unicode UCS-4 code point.\r\n\t * @protected\r\n\t * @param {number} index index into the string\r\n\t * @return {number} code point of the character at the\r\n\t * given index into the string\r\n\t */\r\n\t_toCodePoint: function (index) {\r\n\t\treturn IString.toCodePoint(this.str, index);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Call the callback with each character in the string one at \r\n\t * a time, taking care to step through the surrogate pairs in \r\n\t * the UTF-16 encoding properly.<p>\r\n\t * \r\n\t * The standard Javascript String's charAt() method only\r\n\t * returns a particular 16-bit character in the \r\n\t * UTF-16 encoding scheme.\r\n\t * If the index to charAt() is pointing to a low- or \r\n\t * high-surrogate character,\r\n\t * it will return the surrogate character rather \r\n\t * than the the character \r\n\t * in the supplementary planes that the two surrogates together \r\n\t * encode. This function will call the callback with the full\r\n\t * character, making sure to join two  \r\n\t * surrogates into one character in the supplementary planes\r\n\t * where necessary.<p>\r\n\t * \r\n\t * @param {function(string)} callback a callback function to call with each\r\n\t * full character in the current string\r\n\t */\r\n\tforEach: function(callback) {\r\n\t\tif (typeof(callback) === 'function') {\r\n\t\t\tvar it = this.charIterator();\r\n\t\t\twhile (it.hasNext()) {\r\n\t\t\t\tcallback(it.next());\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Call the callback with each numeric code point in the string one at \r\n\t * a time, taking care to step through the surrogate pairs in \r\n\t * the UTF-16 encoding properly.<p>\r\n\t * \r\n\t * The standard Javascript String's charCodeAt() method only\r\n\t * returns information about a particular 16-bit character in the \r\n\t * UTF-16 encoding scheme.\r\n\t * If the index to charCodeAt() is pointing to a low- or \r\n\t * high-surrogate character,\r\n\t * it will return the code point of the surrogate character rather \r\n\t * than the code point of the character \r\n\t * in the supplementary planes that the two surrogates together \r\n\t * encode. This function will call the callback with the full\r\n\t * code point of each character, making sure to join two  \r\n\t * surrogates into one code point in the supplementary planes.<p>\r\n\t * \r\n\t * @param {function(string)} callback a callback function to call with each\r\n\t * code point in the current string\r\n\t */\r\n\tforEachCodePoint: function(callback) {\r\n\t\tif (typeof(callback) === 'function') {\r\n\t\t\tvar it = this.iterator();\r\n\t\t\twhile (it.hasNext()) {\r\n\t\t\t\tcallback(it.next());\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Return an iterator that will step through all of the characters\r\n\t * in the string one at a time and return their code points, taking \r\n\t * care to step through the surrogate pairs in UTF-16 encoding \r\n\t * properly.<p>\r\n\t * \r\n\t * The standard Javascript String's charCodeAt() method only\r\n\t * returns information about a particular 16-bit character in the \r\n\t * UTF-16 encoding scheme.\r\n\t * If the index is pointing to a low- or high-surrogate character,\r\n\t * it will return a code point of the surrogate character rather \r\n\t * than the code point of the character \r\n\t * in the supplementary planes that the two surrogates together \r\n\t * encode.<p>\r\n\t * \r\n\t * The iterator instance returned has two methods, hasNext() which\r\n\t * returns true if the iterator has more code points to iterate through,\r\n\t * and next() which returns the next code point as a number.<p>\r\n\t * \r\n\t * @return {Object} an iterator \r\n\t * that iterates through all the code points in the string\r\n\t */\r\n\titerator: function() {\r\n\t\t/**\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tfunction _iterator (istring) {\r\n\t\t\tthis.index = 0;\r\n\t\t\tthis.hasNext = function () {\r\n\t\t\t\treturn (this.index < istring.str.length);\r\n\t\t\t};\r\n\t\t\tthis.next = function () {\r\n\t\t\t\tif (this.index < istring.str.length) {\r\n\t\t\t\t\tvar num = istring._toCodePoint(this.index);\r\n\t\t\t\t\tthis.index += ((num > 0xFFFF) ? 2 : 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnum = -1;\r\n\t\t\t\t}\r\n\t\t\t\treturn num;\r\n\t\t\t};\r\n\t\t};\r\n\t\treturn new _iterator(this);\r\n\t},\r\n\r\n\t/**\r\n\t * Return an iterator that will step through all of the characters\r\n\t * in the string one at a time, taking \r\n\t * care to step through the surrogate pairs in UTF-16 encoding \r\n\t * properly.<p>\r\n\t * \r\n\t * The standard Javascript String's charAt() method only\r\n\t * returns information about a particular 16-bit character in the \r\n\t * UTF-16 encoding scheme.\r\n\t * If the index is pointing to a low- or high-surrogate character,\r\n\t * it will return that surrogate character rather \r\n\t * than the surrogate pair which represents a character \r\n\t * in the supplementary planes.<p>\r\n\t * \r\n\t * The iterator instance returned has two methods, hasNext() which\r\n\t * returns true if the iterator has more characters to iterate through,\r\n\t * and next() which returns the next character.<p>\r\n\t * \r\n\t * @return {Object} an iterator \r\n\t * that iterates through all the characters in the string\r\n\t */\r\n\tcharIterator: function() {\r\n\t\t/**\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tfunction _chiterator (istring) {\r\n\t\t\tthis.index = 0;\r\n\t\t\tthis.hasNext = function () {\r\n\t\t\t\treturn (this.index < istring.str.length);\r\n\t\t\t};\r\n\t\t\tthis.next = function () {\r\n\t\t\t\tvar ch;\r\n\t\t\t\tif (this.index < istring.str.length) {\r\n\t\t\t\t\tch = istring.str.charAt(this.index);\r\n\t\t\t\t\tif (IString._isSurrogate(ch) && \r\n\t\t\t\t\t\t\tthis.index+1 < istring.str.length && \r\n\t\t\t\t\t\t\tIString._isSurrogate(istring.str.charAt(this.index+1))) {\r\n\t\t\t\t\t\tthis.index++;\r\n\t\t\t\t\t\tch += istring.str.charAt(this.index);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.index++;\r\n\t\t\t\t}\r\n\t\t\t\treturn ch;\r\n\t\t\t};\r\n\t\t};\r\n\t\treturn new _chiterator(this);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the code point at the given index when the string is viewed \r\n\t * as an array of code points. If the index is beyond the end of the\r\n\t * array of code points or if the index is negative, -1 is returned.\r\n\t * @param {number} index index of the code point \r\n\t * @return {number} code point of the character at the given index into\r\n\t * the string\r\n\t */\r\n\tcodePointAt: function (index) {\r\n\t\tif (index < 0) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tvar count,\r\n\t\t\tit = this.iterator(),\r\n\t\t\tch;\r\n\t\tfor (count = index; count >= 0 && it.hasNext(); count--) {\r\n\t\t\tch = it.next();\r\n\t\t}\r\n\t\treturn (count < 0) ? ch : -1;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Set the locale to use when processing choice formats. The locale\r\n\t * affects how number classes are interpretted. In some cultures,\r\n\t * the limit \"few\" maps to \"any integer that ends in the digits 2 to 9\" and\r\n\t * in yet others, \"few\" maps to \"any integer that ends in the digits\r\n\t * 3 or 4\".\r\n\t * @param {Locale|string} locale locale to use when processing choice\r\n\t * formats with this string\r\n\t * @param {boolean=} sync [optional] whether to load the locale data synchronously \r\n\t * or not\r\n\t * @param {Object=} loadParams [optional] parameters to pass to the loader function\r\n\t * @param {function(*)=} onLoad [optional] function to call when the loading is done\r\n\t */\r\n\tsetLocale: function (locale, sync, loadParams, onLoad) {\r\n\t\tif (typeof(locale) === 'object') {\r\n\t\t\tthis.locale = locale;\r\n\t\t} else {\r\n\t\t\tthis.localeSpec = locale;\r\n\t\t\tthis.locale = new Locale(locale);\r\n\t\t}\r\n\t\t\r\n\t\tIString.loadPlurals(typeof(sync) !== 'undefined' ? sync : true, this.locale, loadParams, onLoad);\r\n\t},\r\n\r\n\t/**\r\n\t * Return the locale to use when processing choice formats. The locale\r\n\t * affects how number classes are interpretted. In some cultures,\r\n\t * the limit \"few\" maps to \"any integer that ends in the digits 2 to 9\" and\r\n\t * in yet others, \"few\" maps to \"any integer that ends in the digits\r\n\t * 3 or 4\".\r\n\t * @return {string} localespec to use when processing choice\r\n\t * formats with this string\r\n\t */\r\n\tgetLocale: function () {\r\n\t\treturn (this.locale ? this.locale.getSpec() : this.localeSpec) || ilib.getLocale();\r\n\t},\r\n\r\n\t/**\r\n\t * Return the number of code points in this string. This may be different\r\n\t * than the number of characters, as the UTF-16 encoding that Javascript\r\n\t * uses for its basis returns surrogate pairs separately. Two 2-byte \r\n\t * surrogate characters together make up one character/code point in \r\n\t * the supplementary character planes. If your string contains no\r\n\t * characters in the supplementary planes, this method will return the\r\n\t * same thing as the length() method.\r\n\t * @return {number} the number of code points in this string\r\n\t */\r\n\tcodePointLength: function () {\r\n\t\tif (this.cpLength === -1) {\r\n\t\t\tvar it = this.iterator();\r\n\t\t\tthis.cpLength = 0;\r\n\t\t\twhile (it.hasNext()) { \r\n\t\t\t\tthis.cpLength++;\r\n\t\t\t\tit.next();\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn this.cpLength;\t\r\n\t}\r\n};\r\n\r\nmodule.exports = IString;","/*\r\n * LocaleInfo.js - Encode locale-specific defaults\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js Locale.js Utils.js\r\n\r\n// !data localeinfo\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar Locale = require(\"./Locale.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new locale info instance. Locale info instances give information about\r\n * the default settings for a particular locale. These settings may be overridden\r\n * by various parts of the code, and should be used as a fall-back setting of last\r\n * resort. <p>\r\n * \r\n * The optional options object holds extra parameters if they are necessary. The\r\n * current list of supported options are:\r\n * \r\n * <ul>\r\n * <li><i>onLoad</i> - a callback function to call when the locale info object is fully \r\n * loaded. When the onLoad option is given, the localeinfo object will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two.\r\n * \r\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while. \r\n *\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * If this copy of ilib is pre-assembled and all the data is already available, \r\n * or if the data was already previously loaded, then this constructor will call\r\n * the onLoad callback immediately when the initialization is done. \r\n * If the onLoad option is not given, this class will only attempt to load any\r\n * missing locale data synchronously.\r\n * \r\n * \r\n * @constructor\r\n * @see {ilib.setLoaderCallback} for information about registering a loader callback\r\n * function\r\n * @param {Locale|string=} locale the locale for which the info is sought, or undefined for\r\n * @param {Object=} options the locale for which the info is sought, or undefined for\r\n * the current locale\r\n */\r\nvar LocaleInfo = function(locale, options) {\r\n\tvar sync = true,\r\n\t    loadParams = undefined;\r\n\t\r\n\t/* these are all the defaults. Essentially, en-US */\r\n\t/**\r\n\t  @private \r\n\t  @type {{\r\n\t\tscripts:Array.<string>,\r\n\t\ttimezone:string,\r\n\t\tunits:string,\r\n\t\tcalendar:string,\r\n\t\tclock:string,\r\n\t\tcurrency:string,\r\n\t\tfirstDayOfWeek:number,\r\n\t\tweekendStart:number,\r\n\t\tweekendEnd:number,\r\n\t\tmeridiems:string,\r\n\t\tunitfmt: {long:string,short:string},\r\n\t\tnumfmt:Object.<{\r\n\t\t\tcurrencyFormats:Object.<{common:string,commonNegative:string,iso:string,isoNegative:string}>,\r\n\t\t\tscript:string,\r\n\t\t\tdecimalChar:string,\r\n\t\t\tgroupChar:string,\r\n\t\t\tprigroupSize:number,\r\n\t\t\tsecgroupSize:number,\r\n\t\t\tnegativenumFmt:string,\r\n\t\t\tpctFmt:string,\r\n\t\t\tnegativepctFmt:string,\r\n\t\t\tpctChar:string,\r\n\t\t\troundingMode:string,\r\n\t\t\texponential:string,\r\n\t\t\tdigits:string\r\n\t\t}>\r\n\t  }}\r\n\t*/\r\n\tthis.info = LocaleInfo.defaultInfo;\r\n\t\r\n\tswitch (typeof(locale)) {\r\n\t\tcase \"string\":\r\n\t\t\tthis.locale = new Locale(locale);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\tcase \"undefined\":\r\n\t\t\tthis.locale = new Locale();\r\n\t\t\tbreak;\r\n\t\tcase \"object\":\r\n\t\t\tthis.locale = locale;\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\tif (options) {\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tsync = (options.sync == true);\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof(options.loadParams) !== 'undefined') {\r\n\t\t\tloadParams = options.loadParams;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!LocaleInfo.cache) {\r\n\t\tLocaleInfo.cache = {};\r\n\t}\r\n\r\n\tUtils.loadData({\r\n\t\tobject: LocaleInfo, \r\n\t\tlocale: this.locale, \r\n\t\tname: \"localeinfo.json\", \r\n\t\tsync: sync, \r\n\t\tloadParams: loadParams, \r\n\t\tcallback: ilib.bind(this, function (info) {\r\n\t\t\tif (!info) {\r\n\t\t\t\tinfo = LocaleInfo.defaultInfo;\r\n\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\r\n\t\t\t\tLocaleInfo.cache[spec] = info;\r\n\t\t\t}\r\n\t\t\tthis.info = info;\r\n\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\toptions.onLoad(this);\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n};\r\n\r\nLocaleInfo.defaultInfo = /** @type {{\r\n\tscripts:Array.<string>,\r\n\ttimezone:string,\r\n\tunits:string,\r\n\tcalendar:string,\r\n\tclock:string,\r\n\tcurrency:string,\r\n\tfirstDayOfWeek:number,\r\n\tweekendStart:number,\r\n\tweekendEnd:number,\r\n\tmeridiems:string,\r\n\tunitfmt: {long:string,short:string},\r\n\tnumfmt:Object.<{\r\n\t\tcurrencyFormats:Object.<{\r\n\t\t\tcommon:string,\r\n\t\t\tcommonNegative:string,\r\n\t\t\tiso:string,\r\n\t\t\tisoNegative:string\r\n\t\t}>,\r\n\t\tscript:string,\r\n\t\tdecimalChar:string,\r\n\t\tgroupChar:string,\r\n\t\tprigroupSize:number,\r\n\t\tsecgroupSize:number,\r\n\t\tnegativenumFmt:string,\r\n\t\tpctFmt:string,\r\n\t\tnegativepctFmt:string,\r\n\t\tpctChar:string,\r\n\t\troundingMode:string,\r\n\t\texponential:string,\r\n\t\tdigits:string\r\n\t}>\r\n}}*/ ilib.data.localeinfo;\r\nLocaleInfo.defaultInfo = LocaleInfo.defaultInfo || {\r\n\t\"scripts\": [\"Latn\"],\r\n    \"timezone\": \"Etc/UTC\",\r\n    \"units\": \"metric\",\r\n    \"calendar\": \"gregorian\",\r\n    \"clock\": \"24\",\r\n    \"currency\": \"USD\",\r\n    \"firstDayOfWeek\": 1,\r\n    \"meridiems\": \"gregorian\",\r\n    \"numfmt\": {\r\n        \"currencyFormats\": {\r\n            \"common\": \"{s}{n}\",\r\n            \"commonNegative\": \"{s}-{n}\",\r\n            \"iso\": \"{s}{n}\",\r\n            \"isoNegative\": \"{s}-{n}\"\r\n        },\r\n        \"script\": \"Latn\",\r\n        \"decimalChar\": \",\",\r\n        \"groupChar\": \".\",\r\n        \"prigroupSize\": 3,\r\n        \"secgroupSize\": 0,\r\n        \"pctFmt\": \"{n}%\",\r\n        \"negativepctFmt\": \"-{n}%\",\r\n        \"pctChar\": \"%\",\r\n        \"roundingMode\": \"halfdown\",\r\n        \"exponential\": \"e\",\r\n        \"digits\": \"\"\r\n    }\r\n};\r\n\r\nLocaleInfo.prototype = {\r\n    /**\r\n     * Return the name of the locale's language in English.\r\n     * @returns {string} the name of the locale's language in English\r\n     */\r\n    getLanguageName: function () {\r\n    \treturn this.info[\"language.name\"];\t\r\n    },\r\n    \r\n    /**\r\n     * Return the name of the locale's region in English. If the locale\r\n     * has no region, this returns undefined.\r\n     * \r\n     * @returns {string|undefined} the name of the locale's region in English\r\n     */\r\n    getRegionName: function () {\r\n    \treturn this.info[\"region.name\"];\t\r\n    },\r\n\r\n    /**\r\n\t * Return whether this locale commonly uses the 12- or the 24-hour clock.\r\n\t *  \r\n\t * @returns {string} \"12\" if the locale commonly uses a 12-hour clock, or \"24\"\r\n\t * if the locale commonly uses a 24-hour clock. \r\n\t */\r\n\tgetClock: function() {\r\n\t\treturn this.info.clock;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the locale that this info object was created with.\r\n\t * @returns {Locale} The locale spec of the locale used to construct this info instance\r\n\t */\r\n\tgetLocale: function () {\r\n\t\treturn this.locale;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the name of the measuring system that is commonly used in the given locale.\r\n\t * Valid values are \"uscustomary\", \"imperial\", and \"metric\".\r\n\t * \r\n\t * @returns {string} The name of the measuring system commonly used in the locale\r\n\t */\r\n\tgetUnits: function () {\r\n\t\treturn this.info.units;\r\n\t},\r\n        \r\n        getUnitFormat: function () {\r\n                return this.info.unitfmt;\r\n        },\r\n\t\r\n\t/**\r\n\t * Return the name of the calendar that is commonly used in the given locale.\r\n\t * \r\n\t * @returns {string} The name of the calendar commonly used in the locale\r\n\t */\r\n\tgetCalendar: function () {\r\n\t\treturn this.info.calendar;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the day of week that starts weeks in the current locale. Days are still\r\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars \r\n\t * should be displayed and weeks calculated with the day of week returned from this \r\n\t * function as the first day of the week.\r\n\t * \r\n\t * @returns {number} the day of the week that starts weeks in the current locale.\r\n\t */\r\n\tgetFirstDayOfWeek: function () {\r\n\t\treturn this.info.firstDayOfWeek;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the day of week that starts weekend in the current locale. Days are still\r\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday.\r\n\t * \r\n\t * @returns {number} the day of the week that starts weeks in the current locale.\r\n\t */\r\n\tgetWeekEndStart: function () {\r\n\t\treturn this.info.weekendStart;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the day of week that starts weekend in the current locale. Days are still\r\n\t * numbered the standard way with 0 for Sunday through 6 for Saturday.\r\n\t * \r\n\t * @returns {number} the day of the week that starts weeks in the current locale.\r\n\t */\r\n\tgetWeekEndEnd: function () {\r\n\t\treturn this.info.weekendEnd;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the default time zone for this locale. Many locales span across multiple\r\n\t * time zones. In this case, the time zone with the largest population is chosen\r\n\t * to represent the locale. This is obviously not that accurate, but then again,\r\n\t * this method's return value should only be used as a default anyways.\r\n\t * @returns {string} the default time zone for this locale.\r\n\t */\r\n\tgetTimeZone: function () {\r\n\t\treturn this.info.timezone;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the decimal separator for formatted numbers in this locale.\r\n\t * @returns {string} the decimal separator char\r\n\t */\r\n\tgetDecimalSeparator: function () {\r\n\t\treturn this.info.numfmt.decimalChar;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the decimal separator for formatted numbers in this locale for native script.\r\n\t * @returns {string} the decimal separator char\r\n\t */\r\n\tgetNativeDecimalSeparator: function () {\r\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.decimalChar) || this.info.numfmt.decimalChar;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the separator character used to separate groups of digits on the \r\n\t * integer side of the decimal character.\r\n\t * @returns {string} the grouping separator char\r\n\t */\r\n\tgetGroupingSeparator: function () {\r\n\t\treturn this.info.numfmt.groupChar;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the separator character used to separate groups of digits on the \r\n\t * integer side of the decimal character for the native script if present other than the default script.\r\n\t * @returns {string} the grouping separator char\r\n\t */\r\n\tgetNativeGroupingSeparator: function () {\r\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.groupChar) || this.info.numfmt.groupChar;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the minimum number of digits grouped together on the integer side \r\n\t * for the first (primary) group. \r\n\t * In western European cultures, groupings are in 1000s, so the number of digits\r\n\t * is 3. \r\n\t * @returns {number} the number of digits in a primary grouping, or 0 for no grouping\r\n\t */\r\n\tgetPrimaryGroupingDigits: function () {\r\n\t\treturn (typeof(this.info.numfmt.prigroupSize) !== 'undefined' && this.info.numfmt.prigroupSize) || 0;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the minimum number of digits grouped together on the integer side\r\n\t * for the second or more (secondary) group.<p>\r\n\t *   \r\n\t * In western European cultures, all groupings are by 1000s, so the secondary\r\n\t * size should be 0 because there is no secondary size. In general, if this \r\n\t * method returns 0, then all groupings are of the primary size.<p> \r\n\t * \r\n\t * For some other cultures, the first grouping (primary)\r\n\t * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be\r\n\t * written as: \"1,00,000\".\r\n\t * \r\n\t * @returns {number} the number of digits in a secondary grouping, or 0 for no \r\n\t * secondary grouping. \r\n\t */\r\n\tgetSecondaryGroupingDigits: function () {\r\n\t\treturn this.info.numfmt.secgroupSize || 0;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the format template used to format percentages in this locale.\r\n\t * @returns {string} the format template for formatting percentages\r\n\t */\r\n\tgetPercentageFormat: function () {\r\n\t\treturn this.info.numfmt.pctFmt;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the format template used to format percentages in this locale\r\n\t * with negative amounts.\r\n\t * @returns {string} the format template for formatting percentages\r\n\t */\r\n\tgetNegativePercentageFormat: function () {\r\n\t\treturn this.info.numfmt.negativepctFmt;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the symbol used for percentages in this locale.\r\n\t * @returns {string} the symbol used for percentages in this locale\r\n\t */\r\n\tgetPercentageSymbol: function () {\r\n\t\treturn this.info.numfmt.pctChar || \"%\";\r\n\t},\r\n\r\n\t/**\r\n\t * Return the symbol used for exponential in this locale.\r\n\t * @returns {string} the symbol used for exponential in this locale\r\n\t */\r\n\tgetExponential: function () {\r\n\t\treturn this.info.numfmt.exponential;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the symbol used for exponential in this locale for native script.\r\n\t * @returns {string} the symbol used for exponential in this locale for native script\r\n\t */\r\n\tgetNativeExponential: function () {\r\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.exponential) || this.info.numfmt.exponential;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the symbol used for percentages in this locale for native script.\r\n\t * @returns {string} the symbol used for percentages in this locale for native script\r\n\t */\r\n\tgetNativePercentageSymbol: function () {\r\n\t\treturn (this.info.native_numfmt && this.info.native_numfmt.pctChar) || this.info.numfmt.pctChar || \"%\";\r\n\t\r\n\t},\r\n\t/**\r\n\t * Return the format template used to format negative numbers in this locale.\r\n\t * @returns {string} the format template for formatting negative numbers\r\n\t */\r\n\tgetNegativeNumberFormat: function () { \r\n\t\treturn this.info.numfmt.negativenumFmt;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return an object containing the format templates for formatting currencies\r\n\t * in this locale. The object has a number of properties in it that each are\r\n\t * a particular style of format. Normally, this contains a \"common\" and an \"iso\"\r\n\t * style, but may contain others in the future.\r\n\t * @returns {Object} an object containing the format templates for currencies\r\n\t */\r\n\tgetCurrencyFormats: function () {\r\n\t\treturn this.info.numfmt.currencyFormats;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the currency that is legal in the locale, or which is most commonly \r\n\t * used in regular commerce.\r\n\t * @returns {string} the ISO 4217 code for the currency of this locale\r\n\t */\r\n\tgetCurrency: function () {\r\n\t\treturn this.info.currency;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return a string that describes the style of digits used by this locale.\r\n\t * Possible return values are:\r\n\t * <ul>\r\n\t * <li><i>western</i> - uses the regular western 10-based digits 0 through 9\r\n\t * <li><i>optional</i> - native 10-based digits exist, but in modern usage,\r\n\t * this locale most often uses western digits\r\n\t * <li><i>native</i> - native 10-based native digits exist and are used\r\n\t * regularly by this locale\r\n\t * <li><i>custom</i> - uses native digits by default that are not 10-based\r\n\t * </ul>\r\n\t * @returns {string} string that describes the style of digits used in this locale\r\n\t */\r\n\tgetDigitsStyle: function () {\r\n\t\tif (this.info.numfmt.useNative) {\r\n\t\t\treturn \"native\";\r\n\t\t}\r\n\t\tif (typeof(this.info.native_numfmt) !== 'undefined') {\r\n\t\t\treturn \"optional\";\r\n\t\t}\r\n\t\treturn \"western\";\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the digits of the default script if they are defined.\r\n\t * If not defined, the default should be the regular \"Arabic numerals\"\r\n\t * used in the Latin script. (0-9)\r\n\t * @returns {string|undefined} the digits used in the default script \r\n\t */\r\n\tgetDigits: function () {\r\n\t\treturn this.info.numfmt.digits;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the digits of the native script if they are defined. \r\n\t * @returns {string|undefined} the digits used in the default script \r\n\t */\r\n\tgetNativeDigits: function () {\r\n\t\treturn (this.info.numfmt.useNative && this.info.numfmt.digits) || (this.info.native_numfmt && this.info.native_numfmt.digits);\r\n\t},\r\n\t\r\n\t/**\r\n\t * If this locale typically uses a different type of rounding for numeric\r\n\t * formatting other than halfdown, especially for currency, then it can be \r\n\t * specified in the localeinfo. If the locale uses the default, then this \r\n\t * method returns undefined. The locale's rounding method overrides the \r\n\t * rounding method for the currency itself, which can sometimes shared \r\n\t * between various locales so it is less specific.\r\n\t * @returns {string} the name of the rounding mode typically used in this\r\n\t * locale, or \"halfdown\" if the locale does not override the default\r\n\t */\r\n\tgetRoundingMode: function () {\r\n\t\treturn this.info.numfmt.roundingMode;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the default script used to write text in the language of this \r\n\t * locale. Text for most languages is written in only one script, but there\r\n\t * are some languages where the text can be written in a number of scripts,\r\n\t * depending on a variety of things such as the region, ethnicity, religion, \r\n\t * etc. of the author. This method returns the default script for the\r\n\t * locale, in which the language is most commonly written.<p> \r\n\t * \r\n\t * The script is returned as an ISO 15924 4-letter code.\r\n\t * \r\n\t * @returns {string} the ISO 15924 code for the default script used to write\r\n\t * text in this locale \r\n\t */\r\n\tgetDefaultScript: function() {\r\n\t\treturn (this.info.scripts) ? this.info.scripts[0] : \"Latn\";\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the script used for the current locale. If the current locale\r\n\t * explicitly defines a script, then this script is returned. If not, then \r\n\t * the default script for the locale is returned.\r\n\t * \r\n\t * @see LocaleInfo.getDefaultScript\r\n\t * @returns {string} the ISO 15924 code for the script used to write\r\n\t * text in this locale\r\n\t */\r\n\tgetScript: function() {\r\n\t\treturn this.locale.getScript() || this.getDefaultScript(); \r\n\t},\r\n\t\r\n\t/**\r\n\t * Return an array of script codes which are used to write text in the current\r\n\t * language. Text for most languages is written in only one script, but there\r\n\t * are some languages where the text can be written in a number of scripts,\r\n\t * depending on a variety of things such as the region, ethnicity, religion, \r\n\t * etc. of the author. This method returns an array of script codes in which \r\n\t * the language is commonly written.\r\n\t * \r\n\t * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used \r\n\t * to write text in this language\r\n\t */\r\n\tgetAllScripts: function() {\r\n\t\treturn this.info.scripts || [\"Latn\"];\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the default style of meridiems used in this locale. Meridiems are \r\n\t * times of day like AM/PM. In a few locales with some calendars, for example\r\n\t * Amharic/Ethiopia using the Ethiopic calendar, the times of day may be\r\n\t * split into different segments than simple AM/PM as in the Gregorian \r\n\t * calendar. Only a few locales are like that. For most locales, formatting \r\n\t * a Gregorian date will use the regular Gregorian AM/PM meridiems.\r\n\t *  \r\n\t * @returns {string} the default meridiems style used in this locale. Possible\r\n\t * values are \"gregorian\", \"chinese\", and \"ethiopic\"\r\n\t */\r\n\tgetMeridiemsStyle: function () {\r\n\t\treturn this.info.meridiems || \"gregorian\";\r\n\t}\t\r\n};\r\n\r\nmodule.exports = LocaleInfo;\r\n","/*\r\n * ScriptInfo.js - information about scripts\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js Utils.js\r\n\r\n// !data scripts\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new script info instance. This class encodes information about\r\n * scripts, which are sets of characters used in a writing system.<p>\r\n * \r\n * The options object may contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>onLoad</i> - a callback function to call when the script info object is fully \r\n * loaded. When the onLoad option is given, the script info object will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two.\r\n * \r\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while. \r\n *\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * \r\n * @constructor\r\n * @param {string} script The ISO 15924 4-letter identifier for the script\r\n * @param {Object} options parameters to initialize this matcher \r\n */\r\nvar ScriptInfo = function(script, options) {\r\n\tvar sync = true,\r\n\t    loadParams = undefined;\r\n\t\r\n\tthis.script = script;\r\n\t\r\n\tif (options) {\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tsync = (options.sync == true);\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof(options.loadParams) !== 'undefined') {\r\n\t\t\tloadParams = options.loadParams;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!ScriptInfo.cache) {\r\n\t\tScriptInfo.cache = {};\r\n\t}\r\n\r\n\tif (!ilib.data.scripts) {\r\n\t\tUtils.loadData({\r\n\t\t\tobject: ScriptInfo, \r\n\t\t\tlocale: \"-\", \r\n\t\t\tname: \"scripts.json\", \r\n\t\t\tsync: sync, \r\n\t\t\tloadParams: loadParams, \r\n\t\t\tcallback: ilib.bind(this, function (info) {\r\n\t\t\t\tif (!info) {\r\n\t\t\t\t\tinfo = {\"Latn\":{\"nb\":215,\"nm\":\"Latin\",\"lid\":\"Latin\",\"rtl\":false,\"ime\":false,\"casing\":true}};\r\n\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\r\n\t\t\t\t\tScriptInfo.cache[spec] = info;\r\n\t\t\t\t}\r\n\t\t\t\tilib.data.scripts = info;\r\n\t\t\t\tthis.info = script && ilib.data.scripts[script];\r\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t} else {\r\n\t\tthis.info = ilib.data.scripts[script];\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nScriptInfo._getScriptsArray = function() {\r\n\tvar ret = [],\r\n\t\tscript = undefined,\r\n\t\tscripts = ilib.data.scripts;\r\n\r\n\tfor (script in scripts) {\r\n\t\tif (script && scripts[script]) {\r\n\t\t\tret.push(script);\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Return an array of all ISO 15924 4-letter identifier script identifiers that\r\n * this copy of ilib knows about.\r\n * @static\r\n * @param {boolean} sync whether to find the available ids synchronously (true) or asynchronously (false)\r\n * @param {Object} loadParams arbitrary object full of properties to pass to the loader\r\n * @param {function(Array.<string>)} onLoad callback function to call when the data is finished loading\r\n * @return {Array.<string>} an array of all script identifiers that this copy of\r\n * ilib knows about\r\n */\r\nScriptInfo.getAllScripts = function(sync, loadParams, onLoad) {\r\n\tif (!ilib.data.scripts) {\r\n\t\tUtils.loadData({\r\n\t\t\tobject: ScriptInfo, \r\n\t\t\tlocale: \"-\", \r\n\t\t\tname: \"scripts.json\", \r\n\t\t\tsync: sync, \r\n\t\t\tloadParams: loadParams, \r\n\t\t\tcallback: ilib.bind(this, function (info) {\r\n\t\t\t\tilib.data.scripts = info;\r\n\t\t\t\t\r\n\t\t\t\tif (typeof(onLoad) === 'function') {\r\n\t\t\t\t\tonLoad(ScriptInfo._getScriptsArray());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\t\r\n\treturn ScriptInfo._getScriptsArray();\r\n};\r\n\r\nScriptInfo.prototype = {\r\n\t/**\r\n\t * Return the 4-letter ISO 15924 identifier associated\r\n\t * with this script.\r\n\t * @return {string} the 4-letter ISO code for this script\r\n\t */\r\n\tgetCode: function () {\r\n\t\treturn this.info && this.script;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Get the ISO 15924 code number associated with this\r\n\t * script.\r\n\t * \r\n\t * @return {number} the ISO 15924 code number\r\n\t */\r\n\tgetCodeNumber: function () {\r\n\t\treturn this.info && this.info.nb || 0;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Get the name of this script in English.\r\n\t * \r\n\t * @return {string} the name of this script in English\r\n\t */\r\n\tgetName: function () {\r\n\t\treturn this.info && this.info.nm;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Get the long identifier assciated with this script.\r\n\t * \r\n\t * @return {string} the long identifier of this script\r\n\t */\r\n\tgetLongCode: function () {\r\n\t\treturn this.info && this.info.lid;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the usual direction that text in this script is written\r\n\t * in. Possible return values are \"rtl\" for right-to-left,\r\n\t * \"ltr\" for left-to-right, and \"ttb\" for top-to-bottom.\r\n\t * \r\n\t * @return {string} the usual direction that text in this script is\r\n\t * written in\r\n\t */\r\n\tgetScriptDirection: function() {\r\n\t\treturn (this.info && typeof(this.info.rtl) !== 'undefined' && this.info.rtl) ? \"rtl\" : \"ltr\";\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return true if this script typically requires an input method engine\r\n\t * to enter its characters.\r\n\t * \r\n\t * @return {boolean} true if this script typically requires an IME\r\n\t */\r\n\tgetNeedsIME: function () {\r\n\t\treturn this.info && this.info.ime ? true : false; // converts undefined to false\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return true if this script uses lower- and upper-case characters.\r\n\t * \r\n\t * @return {boolean} true if this script uses letter case\r\n\t */\r\n\tgetCasing: function () {\r\n\t\treturn this.info && this.info.casing ? true : false; // converts undefined to false\r\n\t}\r\n};\r\n\r\nmodule.exports = ScriptInfo;","/*\r\n * gregorian.js - Represent a Gregorian calendar object.\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* !depends ilib.js Calendar.js Utils.js MathUtils.js */\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Gregorian calendar object. This class encodes information about\r\n * a Gregorian calendar.<p>\r\n * \r\n * \r\n * @constructor\r\n * @param {{noinstance:boolean}=} options\r\n * @extends Calendar\r\n */\r\nvar GregorianCal = function(options) {\r\n\tif (!options || !options.noinstance) {\r\n\t\tthis.type = \"gregorian\";\r\n\t}\r\n};\r\n\r\n/**\r\n * the lengths of each month \r\n * @private\r\n * @const\r\n * @type Array.<number> \r\n */\r\nGregorianCal.monthLengths = [\r\n\t31,  /* Jan */\r\n\t28,  /* Feb */\r\n\t31,  /* Mar */\r\n\t30,  /* Apr */\r\n\t31,  /* May */\r\n\t30,  /* Jun */\r\n\t31,  /* Jul */\r\n\t31,  /* Aug */\r\n\t30,  /* Sep */\r\n\t31,  /* Oct */\r\n\t30,  /* Nov */\r\n\t31   /* Dec */\r\n];\r\n\r\n/**\r\n * Return the number of months in the given year. The number of months in a year varies\r\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \r\n * days in a year to an entire solar year. The month is represented as a 1-based number\r\n * where 1=first month, 2=second month, etc.\r\n * \r\n * @param {number} year a year for which the number of months is sought\r\n * @return {number} The number of months in the given year\r\n */\r\nGregorianCal.prototype.getNumMonths = function(year) {\r\n\treturn 12;\r\n};\r\n\r\n/**\r\n * Return the number of days in a particular month in a particular year. This function\r\n * can return a different number for a month depending on the year because of things\r\n * like leap years.\r\n * \r\n * @param {number} month the month for which the length is sought\r\n * @param {number} year the year within which that month can be found\r\n * @return {number} the number of days within the given month in the given year\r\n */\r\nGregorianCal.prototype.getMonLength = function(month, year) {\r\n\tif (month !== 2 || !this.isLeapYear(year)) {\r\n\t\treturn GregorianCal.monthLengths[month-1];\r\n\t} else {\r\n\t\treturn 29;\r\n\t}\r\n};\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Gregorian calendar.\r\n * The year parameter may be given as a number, or as a GregDate object.\r\n * @param {number|GregorianDate} year the year for which the leap year information is being sought\r\n * @return {boolean} true if the given year is a leap year\r\n */\r\nGregorianCal.prototype.isLeapYear = function(year) {\r\n\tvar y = (typeof(year) === 'number' ? year : year.getYears());\r\n\tvar centuries = MathUtils.mod(y, 400);\r\n\treturn (MathUtils.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);\r\n};\r\n\r\n/**\r\n * Return the type of this calendar.\r\n * \r\n * @return {string} the name of the type of this calendar \r\n */\r\nGregorianCal.prototype.getType = function() {\r\n\treturn this.type;\r\n};\r\n\r\n/* register this calendar for the factory method */\r\nCalendar._constructors[\"gregorian\"] = GregorianCal;\r\n\r\nmodule.exports = GregorianCal;","/*\r\n * ethiopic.js - Represent a Ethiopic calendar object.\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends ilib.js Calendar.js Utils.js MathUtils.js */\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Ethiopic calendar object. This class encodes information about\r\n * a Ethiopic calendar.<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends Calendar\r\n */\r\nvar EthiopicCal = function() {\r\n\tthis.type = \"ethiopic\";\r\n};\r\n\r\n/**\r\n * Return the number of months in the given year. The number of months in a year varies\r\n * for lunar calendars because in some years, an extra month is needed to extend the \r\n * days in a year to an entire solar year. The month is represented as a 1-based number\r\n * where 1=Maskaram, 2=Teqemt, etc. until 13=Paguemen.\r\n * \r\n * @param {number} year a year for which the number of months is sought\r\n */\r\nEthiopicCal.prototype.getNumMonths = function(year) {\r\n\treturn 13;\r\n};\r\n\r\n/**\r\n * Return the number of days in a particular month in a particular year. This function\r\n * can return a different number for a month depending on the year because of things\r\n * like leap years.\r\n * \r\n * @param {number|string} month the month for which the length is sought\r\n * @param {number} year the year within which that month can be found\r\n * @return {number} the number of days within the given month in the given year\r\n */\r\nEthiopicCal.prototype.getMonLength = function(month, year) {\r\n\tvar m = month;\r\n\tswitch (typeof(m)) {\r\n        case \"string\": \r\n            m = parseInt(m, 10); \r\n            break;\r\n        case \"function\":\r\n        case \"object\":\r\n        case \"undefined\":\r\n            return 30;\r\n            break;\r\n    }    \r\n\tif (m < 13) {\r\n\t\treturn 30;\r\n\t} else {\r\n\t\treturn this.isLeapYear(year) ? 6 : 5;\r\n\t}\r\n};\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Ethiopic calendar.\r\n * The year parameter may be given as a number, or as a JulDate object.\r\n * @param {number|EthiopicDate|string} year the year for which the leap year information is being sought\r\n * @return {boolean} true if the given year is a leap year\r\n */\r\nEthiopicCal.prototype.isLeapYear = function(year) {\r\n\tvar y = year;\r\n\t switch (typeof(y)) {\r\n        case \"string\":\r\n            y = parseInt(y, 10);\r\n            break;\r\n        case \"object\":\r\n            if (typeof(y.year) !== \"number\") { // in case it is an ilib.Date object\r\n                return false;\r\n            }\r\n            y = y.year;\r\n            break;\r\n        case \"function\":\r\n        case \"undefined\":\r\n            return false;\r\n            break;\r\n    }\r\n\treturn MathUtils.mod(y, 4) === 3;\r\n};\r\n\r\n/**\r\n * Return the type of this calendar.\r\n * \r\n * @return {string} the name of the type of this calendar \r\n */\r\nEthiopicCal.prototype.getType = function() {\r\n\treturn this.type;\r\n};\r\n\r\n\r\n/* register this calendar for the factory method */\r\nCalendar._constructors[\"ethiopic\"] = EthiopicCal;\r\n\r\nmodule.exports = EthiopicCal;","/*\r\n * caseMapper.js - define upper- and lower-case mapper\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends Locale.js IString.js\r\n\r\nvar ilib = require(\"./ilib.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new string mapper instance that maps strings to upper or\r\n * lower case. This mapping will work for any string as characters \r\n * that have no case will be returned unchanged.<p>\r\n * \r\n * The options may contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>locale</i> - locale to use when loading the mapper. Some maps are \r\n * locale-dependent, and this locale selects the right one. Default if this is\r\n * not specified is the current locale.\r\n * \r\n * <li><i>direction</i> - \"toupper\" for upper-casing, or \"tolower\" for lower-casing.\r\n * Default if not specified is \"toupper\".\r\n * </ul>\r\n * \r\n * \r\n * @constructor\r\n * @param {Object=} options options to initialize this mapper \r\n */\r\nvar CaseMapper = function (options) {\r\n\tthis.up = true;\r\n\tthis.locale = new Locale();\r\n\t\r\n\tif (options) {\r\n\t\tif (typeof(options.locale) !== 'undefined') {\r\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\t\t\r\n\t\tthis.up = (!options.direction || options.direction === \"toupper\");\r\n\t}\r\n\r\n\tthis.mapData = this.up ? {\r\n\t\t\"ß\": \"SS\",\t\t// German\r\n\t\t'ΐ': 'Ι',\t\t// Greek\r\n\t\t'ά': 'Α',\r\n\t\t'έ': 'Ε',\r\n\t\t'ή': 'Η',\r\n\t\t'ί': 'Ι',\r\n\t\t'ΰ': 'Υ',\r\n\t\t'ϊ': 'Ι',\r\n\t\t'ϋ': 'Υ',\r\n\t\t'ό': 'Ο',\r\n\t\t'ύ': 'Υ',\r\n\t\t'ώ': 'Ω',\r\n\t\t'Ӏ': 'Ӏ',\t\t// Russian and slavic languages\r\n\t\t'ӏ': 'Ӏ'\r\n\t} : {\r\n\t\t'Ӏ': 'Ӏ'\t\t// Russian and slavic languages\r\n\t};\r\n\r\n\tswitch (this.locale.getLanguage()) {\r\n\t\tcase \"az\":\r\n\t\tcase \"tr\":\r\n\t\tcase \"crh\":\r\n\t\tcase \"kk\":\r\n\t\tcase \"krc\":\r\n\t\tcase \"tt\":\r\n\t\t\tvar lower = \"iı\";\r\n\t\t\tvar upper = \"İI\";\r\n\t\t\tthis._setUpMap(lower, upper);\r\n\t\t\tbreak;\r\n\t\tcase \"fr\":\r\n\t\t\tif (this.up && this.locale.getRegion() !== \"CA\") {\r\n\t\t\t\tthis._setUpMap(\"àáâãäçèéêëìíîïñòóôöùúûü\", \"AAAAACEEEEIIIINOOOOUUUU\");\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\tif (ilib._getBrowser() === \"ie\") {\r\n\t\t// IE is missing these mappings for some reason\r\n\t\tif (this.up) {\r\n\t\t\tthis.mapData['ς'] = 'Σ';\r\n\t\t}\r\n\t\tthis._setUpMap(\"ⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⳁⳉⳋ\", \"ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⳀⳈⳊ\"); // Coptic\r\n\t\t// Georgian Nuskhuri <-> Asomtavruli\r\n\t\tthis._setUpMap(\"ⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥ\", \"ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅ\");\t\r\n\t}\r\n};\r\n\r\nCaseMapper.prototype = {\r\n\t/** \r\n\t * @private \r\n\t */\r\n\t_charMapper: function(string) {\r\n\t\tif (!string) {\r\n\t\t\treturn string;\r\n\t\t}\r\n\t\tvar input = (typeof(string) === 'string') ? new IString(string) : string.toString();\r\n\t\tvar ret = \"\";\r\n\t\tvar it = input.charIterator();\r\n\t\tvar c;\r\n\t\t\r\n\t\twhile (it.hasNext()) {\r\n\t\t\tc = it.next();\r\n\t\t\tif (!this.up && c === 'Σ') {\r\n\t\t\t\tif (it.hasNext()) {\r\n\t\t\t\t\tc = it.next();\r\n\t\t\t\t\tvar code = c.charCodeAt(0);\r\n\t\t\t\t\t// if the next char is not a greek letter, this is the end of the word so use the\r\n\t\t\t\t\t// final form of sigma. Otherwise, use the mid-word form.\r\n\t\t\t\t\tret += ((code < 0x0388 && code !== 0x0386) || code > 0x03CE) ? 'ς' : 'σ';\r\n\t\t\t\t\tret += c.toLowerCase();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// no next char means this is the end of the word, so use the final form of sigma\r\n\t\t\t\t\tret += 'ς';\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (this.mapData[c]) {\r\n\t\t\t\t\tret += this.mapData[c];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tret += this.up ? c.toUpperCase() : c.toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn ret;\r\n\t},\r\n\r\n\t/** @private */\r\n\t_setUpMap: function(lower, upper) {\r\n\t\tvar from, to;\r\n\t\tif (this.up) {\r\n\t\t\tfrom = lower;\r\n\t\t\tto = upper;\r\n\t\t} else {\r\n\t\t\tfrom = upper;\r\n\t\t\tto = lower;\r\n\t\t}\r\n\t\tfor (var i = 0; i < upper.length; i++) {\r\n\t\t\tthis.mapData[from[i]] = to[i];\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Return the locale that this mapper was constructed with. \r\n\t * @returns {Locale} the locale that this mapper was constructed with\r\n\t */\r\n\tgetLocale: function () {\r\n\t\treturn this.locale;\r\n\t},\r\n\t\t\r\n\t/**\r\n\t * Map a string to lower case in a locale-sensitive manner.\r\n\t * \r\n\t * @param {string|undefined} string\r\n\t * @return {string|undefined}\r\n\t */\r\n\tmap: function (string) {\r\n\t\treturn this._charMapper(string);\r\n\t}\r\n};\r\n\r\nmodule.exports = CaseMapper;","/*\r\n * CType.js - Character type definitions\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js Locale.js SearchUtils.js Utils.js IString.js\r\n\r\n// !data ctype\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar SearchUtils = require(\"./SearchUtils.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar Locale = require(\"./Locale.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * Provides a set of static routines that return information about characters.\r\n * These routines emulate the C-library ctype functions. The characters must be \r\n * encoded in utf-16, as no other charsets are currently supported. Only the first\r\n * character of the given string is tested.\r\n * @namespace\r\n */\r\nvar CType = {};\r\n\r\n\r\n/**\r\n * Actual implementation for withinRange. Searches the given object for ranges.\r\n * The range names are taken from the Unicode range names in \r\n * http://www.unicode.org/Public/UNIDATA/extracted/DerivedGeneralCategory.txt\r\n * \r\n * <ul>\r\n * <li>Cn - Unassigned\r\n * <li>Lu - Uppercase_Letter\r\n * <li>Ll - Lowercase_Letter\r\n * <li>Lt - Titlecase_Letter\r\n * <li>Lm - Modifier_Letter\r\n * <li>Lo - Other_Letter\r\n * <li>Mn - Nonspacing_Mark\r\n * <li>Me - Enclosing_Mark\r\n * <li>Mc - Spacing_Mark\r\n * <li>Nd - Decimal_Number\r\n * <li>Nl - Letter_Number\r\n * <li>No - Other_Number\r\n * <li>Zs - Space_Separator\r\n * <li>Zl - Line_Separator\r\n * <li>Zp - Paragraph_Separator\r\n * <li>Cc - Control\r\n * <li>Cf - Format\r\n * <li>Co - Private_Use\r\n * <li>Cs - Surrogate\r\n * <li>Pd - Dash_Punctuation\r\n * <li>Ps - Open_Punctuation\r\n * <li>Pe - Close_Punctuation\r\n * <li>Pc - Connector_Punctuation\r\n * <li>Po - Other_Punctuation\r\n * <li>Sm - Math_Symbol\r\n * <li>Sc - Currency_Symbol\r\n * <li>Sk - Modifier_Symbol\r\n * <li>So - Other_Symbol\r\n * <li>Pi - Initial_Punctuation\r\n * <li>Pf - Final_Punctuation\r\n * </ul>\r\n * \r\n * @protected\r\n * @param {number} num code point of the character to examine\r\n * @param {string} rangeName the name of the range to check\r\n * @param {Object} obj object containing the character range data\r\n * @return {boolean} true if the first character is within the named\r\n * range\r\n */\r\nCType._inRange = function(num, rangeName, obj) {\r\n\tvar range, i;\r\n\tif (num < 0 || !rangeName || !obj) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\trange = obj[rangeName];\r\n\tif (!range) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tvar compare = function(singlerange, target) {\r\n\t\tif (singlerange.length === 1) {\r\n\t\t\treturn singlerange[0] - target;\r\n\t\t} else {\r\n\t\t\treturn target < singlerange[0] ? singlerange[0] - target :\r\n\t\t\t\t(target > singlerange[1] ? singlerange[1] - target : 0);\r\n\t\t}\r\n\t};\r\n\tvar result = SearchUtils.bsearch(num, range, compare);\r\n\treturn result < range.length && compare(range[result], num) === 0;\r\n};\r\n\r\n/**\r\n * Return whether or not the first character is within the named range\r\n * of Unicode characters. The valid list of range names are taken from \r\n * the Unicode 6.0 spec. Characters in all ranges of Unicode are supported,\r\n * including those supported in Javascript via UTF-16. Currently, this method \r\n * supports the following range names:\r\n * \r\n * <ul>\r\n * <li><i>ascii</i> - basic ASCII\r\n * <li><i>latin</i> - Latin, Latin Extended Additional, Latin Extended-C, Latin Extended-D\r\n * <li><i>armenian</i>\r\n * <li><i>greek</i> - Greek, Greek Extended\r\n * <li><i>cyrillic</i> - Cyrillic, Cyrillic Extended-A, Cyrillic Extended-B\r\n * <li><i>georgian</i> - Georgian, Georgian Supplement\r\n * <li><i>glagolitic</i>\r\n * <li><i>gothic</i>\r\n * <li><i>ogham</i>\r\n * <li><i>oldpersian</i>\r\n * <li><i>runic</i>\r\n * <li><i>ipa</i> - IPA, Phonetic Extensions, Phonetic Extensions Supplement\r\n * <li><i>phonetic</i>\r\n * <li><i>modifiertone</i> - Modifier Tone Letters\r\n * <li><i>spacing</i>\r\n * <li><i>diacritics</i>\r\n * <li><i>halfmarks</i> - Combining Half Marks\r\n * <li><i>small</i> - Small Form Variants\r\n * <li><i>bamum</i> - Bamum, Bamum Supplement\r\n * <li><i>ethiopic</i> - Ethiopic, Ethiopic Extended, Ethiopic Extended-A\r\n * <li><i>nko</i>\r\n * <li><i>osmanya</i>\r\n * <li><i>tifinagh</i>\r\n * <li><i>val</i>\r\n * <li><i>arabic</i> - Arabic, Arabic Supplement, Arabic Presentation Forms-A, \r\n * Arabic Presentation Forms-B\r\n * <li><i>carlan</i>\r\n * <li><i>hebrew</i>\r\n * <li><i>mandaic</i>\r\n * <li><i>samaritan</i>\r\n * <li><i>syriac</i>\r\n * <li><i>mongolian</i>\r\n * <li><i>phagspa</i>\r\n * <li><i>tibetan</i>\r\n * <li><i>bengali</i>\r\n * <li><i>devanagari</i> - Devanagari, Devanagari Extended\r\n * <li><i>gujarati</i>\r\n * <li><i>gurmukhi</i>\r\n * <li><i>kannada</i>\r\n * <li><i>lepcha</i>\r\n * <li><i>limbu</i>\r\n * <li><i>malayalam</i>\r\n * <li><i>meetaimayek</i>\r\n * <li><i>olchiki</i>\r\n * <li><i>oriya</i>\r\n * <li><i>saurashtra</i>\r\n * <li><i>sinhala</i>\r\n * <li><i>sylotinagri</i> - Syloti Nagri\r\n * <li><i>tamil</i>\r\n * <li><i>telugu</i>\r\n * <li><i>thaana</i>\r\n * <li><i>vedic</i>\r\n * <li><i>batak</i>\r\n * <li><i>balinese</i>\r\n * <li><i>buginese</i>\r\n * <li><i>cham</i>\r\n * <li><i>javanese</i>\r\n * <li><i>kayahli</i>\r\n * <li><i>khmer</i>\r\n * <li><i>lao</i>\r\n * <li><i>myanmar</i> - Myanmar, Myanmar Extended-A\r\n * <li><i>newtailue</i>\r\n * <li><i>rejang</i>\r\n * <li><i>sundanese</i>\r\n * <li><i>taile</i>\r\n * <li><i>taitham</i>\r\n * <li><i>taiviet</i>\r\n * <li><i>thai</i>\r\n * <li><i>buhld</i>\r\n * <li><i>hanunoo</i>\r\n * <li><i>tagalog</i>\r\n * <li><i>tagbanwa</i>\r\n * <li><i>bopomofo</i> - Bopomofo, Bopomofo Extended\r\n * <li><i>cjk</i> - the CJK unified ideographs (Han), CJK Unified Ideographs\r\n *  Extension A, CJK Unified Ideographs Extension B, CJK Unified Ideographs \r\n *  Extension C, CJK Unified Ideographs Extension D, Ideographic Description \r\n *  Characters (=isIdeo())\r\n * <li><i>cjkcompatibility</i> - CJK Compatibility, CJK Compatibility \r\n * Ideographs, CJK Compatibility Forms, CJK Compatibility Ideographs Supplement\r\n * <li><i>cjkradicals</i> - the CJK radicals, KangXi radicals\r\n * <li><i>hangul</i> - Hangul Jamo, Hangul Syllables, Hangul Jamo Extended-A, \r\n * Hangul Jamo Extended-B, Hangul Compatibility Jamo\r\n * <li><i>cjkpunct</i> - CJK symbols and punctuation\r\n * <li><i>cjkstrokes</i> - CJK strokes\r\n * <li><i>hiragana</i>\r\n * <li><i>katakana</i> - Katakana, Katakana Phonetic Extensions, Kana Supplement\r\n * <li><i>kanbun</i>\r\n * <li><i>lisu</i>\r\n * <li><i>yi</i> - Yi Syllables, Yi Radicals\r\n * <li><i>cherokee</i>\r\n * <li><i>canadian</i> - Unified Canadian Aboriginal Syllabics, Unified Canadian \r\n * Aboriginal Syllabics Extended\r\n * <li><i>presentation</i> - Alphabetic presentation forms\r\n * <li><i>vertical</i> - Vertical Forms\r\n * <li><i>width</i> - Halfwidth and Fullwidth Forms\r\n * <li><i>punctuation</i> - General punctuation, Supplemental Punctuation\r\n * <li><i>box</i> - Box Drawing\r\n * <li><i>block</i> - Block Elements\r\n * <li><i>letterlike</i> - Letterlike symbols\r\n * <li><i>mathematical</i> - Mathematical alphanumeric symbols, Miscellaneous \r\n * Mathematical Symbols-A, Miscellaneous Mathematical Symbols-B\r\n * <li><i>enclosedalpha</i> - Enclosed alphanumerics, Enclosed Alphanumeric Supplement\r\n * <li><i>enclosedcjk</i> - Enclosed CJK letters and months, Enclosed Ideographic Supplement\r\n * <li><i>cjkcompatibility</i> - CJK compatibility\r\n * <li><i>apl</i> - APL symbols\r\n * <li><i>controlpictures</i> - Control pictures\r\n * <li><i>misc</i> - Miscellaneous technical\r\n * <li><i>ocr</i> - Optical character recognition (OCR)\r\n * <li><i>combining</i> - Combining Diacritical Marks, Combining Diacritical Marks \r\n * for Symbols, Combining Diacritical Marks Supplement\r\n * <li><i>digits</i> - ASCII digits (=isDigit())\r\n * <li><i>indicnumber</i> - Common Indic Number Forms\r\n * <li><i>numbers</i> - Number dorms\r\n * <li><i>supersub</i> - Super- and subscripts\r\n * <li><i>arrows</i> - Arrows, Miscellaneous Symbols and Arrows, Supplemental Arrows-A,\r\n * Supplemental Arrows-B\r\n * <li><i>operators</i> - Mathematical operators, supplemental \r\n * mathematical operators \r\n * <li><i>geometric</i> - Geometric shapes\r\n * <li><i>ancient</i> - Ancient symbols\r\n * <li><i>braille</i> - Braille patterns\r\n * <li><i>currency</i> - Currency symbols\r\n * <li><i>dingbats</i>\r\n * <li><i>gamesymbols</i>\r\n * <li><i>yijing</i> - Yijing Hexagram Symbols\r\n * <li><i>specials</i>\r\n * <li><i>variations</i> - Variation Selectors, Variation Selectors Supplement\r\n * <li><i>privateuse</i> - Private Use Area, Supplementary Private Use Area-A, \r\n * Supplementary Private Use Area-B\r\n * <li><i>supplementarya</i> - Supplementary private use area-A\r\n * <li><i>supplementaryb</i> - Supplementary private use area-B\r\n * <li><i>highsurrogates</i> - High Surrogates, High Private Use Surrogates\r\n * <li><i>lowsurrogates</i>\r\n * <li><i>reserved</i>\r\n * <li><i>noncharacters</i>\r\n * </ul><p>\r\n * \r\n * \r\n * @protected\r\n * @param {string|IString|number} ch character or code point to examine\r\n * @param {string} rangeName the name of the range to check\r\n * @return {boolean} true if the first character is within the named\r\n * range\r\n */\r\nCType.withinRange = function(ch, rangeName) {\r\n\tif (!rangeName) {\r\n\t\treturn false;\r\n\t}\r\n\tvar num;\r\n\tswitch (typeof(ch)) {\r\n\t\tcase 'number':\r\n\t\t\tnum = ch;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\tnum = IString.toCodePoint(ch, 0);\r\n\t\t\tbreak;\r\n\t\tcase 'undefined':\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\tnum = ch._toCodePoint(0);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn CType._inRange(num, rangeName.toLowerCase(), ilib.data.ctype);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @param {boolean} sync\r\n * @param {Object|undefined} loadParams\r\n * @param {function(*)|undefined} onLoad\r\n */\r\nCType._init = function(sync, loadParams, onLoad) {\r\n\tCType._load(\"ctype\", sync, loadParams, onLoad);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @param {string} name\r\n * @param {boolean} sync\r\n * @param {Object|undefined} loadParams\r\n * @param {function(*)|undefined} onLoad\r\n */\r\nCType._load = function (name, sync, loadParams, onLoad) {\r\n\tif (!ilib.data[name]) {\r\n\t\tvar loadName = name ? name + \".json\" : \"CType.json\";\r\n\t\tUtils.loadData({\r\n\t\t\tname: loadName,\r\n\t\t\tlocale: \"-\",\r\n\t\t\tnonlocale: true,\r\n\t\t\tsync: sync,\r\n\t\t\tloadParams: loadParams, \r\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ct) {\r\n\t\t\t\tilib.data[name] = ct;\r\n\t\t\t\tif (onLoad && typeof(onLoad) === 'function') {\r\n\t\t\t\t\tonLoad(ilib.data[name]);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t} else {\r\n\t\tif (onLoad && typeof(onLoad) === 'function') {\r\n\t\t\tonLoad(ilib.data[name]);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = CType;\r\n","/*\r\n * ResBundle.js - Resource bundle definition\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js Locale.js LocaleInfo.js IString.js Utils.js JSUtils.js\r\n\r\n// !data pseudomap\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\n\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new resource bundle instance. The resource bundle loads strings\r\n * appropriate for a particular locale and provides them via the getString \r\n * method.<p>\r\n * \r\n * The options object may contain any (or none) of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>locale</i> - The locale of the strings to load. If not specified, the default\r\n * locale is the the default for the web page or app in which the bundle is \r\n * being loaded.\r\n * \r\n * <li><i>name</i> - Base name of the resource bundle to load. If not specified the default\r\n * base name is \"resources\".\r\n * \r\n * <li><i>type</i> - Name the type of strings this bundle contains. Valid values are \r\n * \"xml\", \"html\", \"text\", or \"raw\". The default is \"text\". If the type is \"xml\" or \"html\",\r\n * then XML/HTML entities and tags are not pseudo-translated. During a real translation, \r\n * HTML character entities are translated to their corresponding characters in a source\r\n * string before looking that string up in the translations. Also, the characters \"<\", \">\",\r\n * and \"&\" are converted to entities again in the output, but characters are left as they\r\n * are. If the type is \"xml\", \"html\", or \"text\" types, then the replacement parameter names\r\n * are not pseudo-translated as well so that the output can be used for formatting with \r\n * the IString class. If the type is raw, all characters are pseudo-translated, \r\n * including replacement parameters as well as XML/HTML tags and entities.\r\n * \r\n * <li><i>lengthen</i> - when pseudo-translating the string, tell whether or not to \r\n * automatically lengthen the string to simulate \"long\" languages such as German\r\n * or French. This is a boolean value. Default is false.\r\n * \r\n * <li><i>missing</i> - what to do when a resource is missing. The choices are:\r\n * <ul>\r\n *   <li><i>source</i> - return the source string unchanged\r\n *   <li><i>pseudo</i> - return the pseudo-translated source string, translated to the\r\n *   script of the locale if the mapping is available, or just the default Latin \r\n *   pseudo-translation if not\r\n *   <li><i>empty</i> - return the empty string \r\n * </ul>\r\n * The default behaviour is the same as before, which is to return the source string\r\n * unchanged.\r\n * \r\n * <li><i>onLoad</i> - a callback function to call when the resources are fully \r\n * loaded. When the onLoad option is given, this class will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two. \r\n * \r\n * <li>sync - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while. \r\n *\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * The locale option may be given as a locale spec string or as an \r\n * Locale object. If the locale option is not specified, then strings for\r\n * the default locale will be loaded.<p> \r\n * \r\n * The name option can be used to put groups of strings together in a\r\n * single bundle. The strings will then appear together in a JS object in\r\n * a JS file that can be included before the ilib.<p>\r\n * \r\n * A resource bundle with a particular name is actually a set of bundles\r\n * that are each specific to a language, a language plus a region, etc. \r\n * All bundles with the same base name should\r\n * contain the same set of source strings, but with different translations for \r\n * the given locale. The user of the bundle does not need to be aware of \r\n * the locale of the bundle, as long as it contains values for the strings \r\n * it needs.<p>\r\n * \r\n * Strings in bundles for a particular locale are inherited from parent bundles\r\n * that are more generic. In general, the hierarchy is as follows (from \r\n * least locale-specific to most locale-specific):\r\n * \r\n * <ol>\r\n * <li> language\r\n * <li> region\r\n * <li> language_script\r\n * <li> language_region\r\n * <li> region_variant\r\n * <li> language_script_region\r\n * <li> language_region_variant\r\n * <li> language_script_region_variant\r\n * </ol>\r\n * \r\n * That is, if the translation for a string does not exist in the current\r\n * locale, the more-generic parent locale is searched for the string. In the\r\n * worst case scenario, the string is not found in the base locale's strings. \r\n * In this case, the missing option guides this class on what to do. If\r\n * the missing option is \"source\", then the original source is returned as \r\n * the translation. If it is \"empty\", the empty string is returned. If it\r\n * is \"pseudo\", then the pseudo-translated string that is appropriate for\r\n * the default script of the locale is returned.<p> \r\n * \r\n * This allows developers to create code with new or changed strings in it and check in that\r\n * code without waiting for the translations to be done first. The translated\r\n * version of the app or web site will still function properly, but will show \r\n * a spurious untranslated string here and there until the translations are \r\n * done and also checked in.<p>   \r\n *  \r\n * The base is whatever language your developers use to code in. For\r\n * a German web site, strings in the source code may be written in German \r\n * for example. Often this base is English, as many web sites are coded in\r\n * English, but that is not required.<p>\r\n * \r\n * The strings can be extracted with the ilib localization tool (which will be\r\n * shipped at some future time.) Once the strings\r\n * have been translated, the set of translated files can be generated with the\r\n * same tool. The output from the tool can be used as input to the ResBundle\r\n * object. It is up to the web page or app to make sure the JS file that defines\r\n * the bundle is included before creating the ResBundle instance.<p>\r\n * \r\n * A special locale \"zxx-XX\" is used as the pseudo-translation locale because\r\n * zxx means \"no linguistic information\" in the ISO 639 standard, and the region \r\n * code XX is defined to be user-defined in the ISO 3166 standard. \r\n * Pseudo-translation is a locale where the translations are generated on\r\n * the fly based on the contents of the source string. Characters in the source \r\n * string are replaced with other characters and returned. \r\n * \r\n * Example. If the source string is:\r\n * \r\n * <pre>\r\n * \"This is a string\"\r\n * </pre>\r\n * \r\n * then the pseudo-translated version might look something like this: \r\n * \r\n * <pre>\r\n * \"Ţħïş ïş á şţřïñĝ\"\r\n * </pre>\r\n * <p>\r\n * \r\n * Pseudo-translation can be used to test that your app or web site is translatable\r\n * before an actual translation has happened. These bugs can then be fixed \r\n * before the translation starts, avoiding an explosion of bugs later when\r\n * each language's tester registers the same bug complaining that the same \r\n * string is not translated. When pseudo-localizing with\r\n * the Latin script, this allows the strings to be readable in the UI in the \r\n * source language (if somewhat funky-looking), \r\n * so that a tester can easily verify that the string is properly externalized \r\n * and loaded from a resource bundle without the need to be able to read a\r\n * foreign language.<p> \r\n * \r\n * If one of a list of script tags is given in the pseudo-locale specifier, then the\r\n * pseudo-localization can map characters to very rough transliterations of\r\n * characters in the given script. For example, zxx-Hebr-XX maps strings to\r\n * Hebrew characters, which can be used to test your UI in a right-to-left\r\n * language to catch bidi bugs before a translation is done. Currently, the\r\n * list of target scripts includes Hebrew (Hebr), Chinese Simplified Han (Hans),\r\n * and Cyrillic (Cyrl) with more to be added later. If no script is explicitly\r\n * specified in the locale spec, or if the script is not supported,\r\n * then the default mapping maps Latin base characters to accented versions of\r\n * those Latin characters as in the example above.\r\n *  \r\n * When the \"lengthen\" property is set to true in the options, the \r\n * pseudotranslation code will add digits to the end of the string to simulate\r\n * the lengthening that occurs when translating to other languages. The above \r\n * example will come out like this:\r\n * \r\n * <pre>\r\n * \"Ţħïş ïş á şţřïñĝ76543210\"\r\n * </pre>\r\n * \r\n * The string is lengthened according to the length of the source string. If\r\n * the source string is less than 20 characters long, the string is lengthened \r\n * by 50%. If the source string is 20-40 \r\n * characters long, the string is lengthened by 33%. If te string is greater\r\n * than 40 characters long, the string is lengthened by 20%.<p>\r\n * \r\n * The pseudotranslation always ends a string with the digit \"0\". If you do\r\n * not see the digit \"0\" in the UI for your app, you know that truncation\r\n * has occurred, and the number you see at the end of the string tells you \r\n * how many characters were truncated.<p>\r\n * \r\n * \r\n * @constructor\r\n * @param {?Object} options Options controlling how the bundle is created\r\n */\r\nvar ResBundle = function (options) {\r\n\tvar lookupLocale, spec;\r\n\t\r\n\tthis.locale = new Locale();\t// use the default locale\r\n\tthis.baseName = \"strings\";\r\n\tthis.type = \"text\";\r\n\tthis.loadParams = {};\r\n\tthis.missing = \"source\";\r\n\tthis.sync = true;\r\n\t\r\n\tif (options) {\r\n\t\tif (options.locale) {\r\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? \r\n\t\t\t\t\tnew Locale(options.locale) :\r\n\t\t\t\t\toptions.locale;\r\n\t\t}\r\n\t\tif (options.name) {\r\n\t\t\tthis.baseName = options.name;\r\n\t\t}\r\n\t\tif (options.type) {\r\n\t\t\tthis.type = options.type;\r\n\t\t}\r\n\t\tthis.lengthen = options.lengthen || false;\r\n\t\t\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tthis.sync = (options.sync == true);\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof(options.loadParams) !== 'undefined') {\r\n\t\t\tthis.loadParams = options.loadParams;\r\n\t\t}\r\n\t\tif (typeof(options.missing) !== 'undefined') {\r\n\t\t\tif (options.missing === \"pseudo\" || options.missing === \"empty\") {\r\n\t\t\t\tthis.missing = options.missing;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\toptions = {};\r\n\t}\r\n\t\r\n\tthis.map = {};\r\n\r\n\tif (!ResBundle[this.baseName]) {\r\n\t\tResBundle[this.baseName] = {};\r\n\t}\r\n\r\n\tlookupLocale = this.locale.isPseudo() ? new Locale(\"en-US\") : this.locale;\r\n\r\n\tUtils.loadData({\r\n\t\tobject: ResBundle[this.baseName], \r\n\t\tlocale: lookupLocale, \r\n\t\tname: this.baseName + \".json\", \r\n\t\tsync: this.sync, \r\n\t\tloadParams: this.loadParams, \r\n\t\tcallback: ilib.bind(this, function (map) {\r\n\t\t\tif (!map) {\r\n\t\t\t\tmap = ilib.data[this.baseName] || {};\r\n\t\t\t\tspec = lookupLocale.getSpec().replace(/-/g, '_');\r\n\t\t\t\tResBundle[this.baseName].cache[spec] = map;\r\n\t\t\t}\r\n\t\t\tthis.map = map;\r\n\t\t\tif (this.locale.isPseudo()) {\r\n\t\t\t\tif (!ResBundle.pseudomap) {\r\n\t\t\t\t\tResBundle.pseudomap = {};\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis._loadPseudo(this.locale, options.onLoad);\r\n\t\t\t} else if (this.missing === \"pseudo\") {\r\n\t\t\t\tif (!ResBundle.pseudomap) {\r\n\t\t\t\t\tResBundle.pseudomap = {};\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tnew LocaleInfo(this.locale, {\r\n\t\t\t\t\tsync: this.sync,\r\n\t\t\t\t\tloadParams: this.loadParams,\r\n\t\t\t\t\tonLoad: ilib.bind(this, function (li) {\r\n\t\t\t\t\t\tvar pseudoLocale = new Locale(\"zxx\", \"XX\", undefined, li.getDefaultScript());\r\n\t\t\t\t\t\tthis._loadPseudo(pseudoLocale, options.onLoad);\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n\r\n\t// console.log(\"Merged resources \" + this.locale.toString() + \" are: \" + JSON.stringify(this.map));\r\n\t//if (!this.locale.isPseudo() && JSUtils.isEmpty(this.map)) {\r\n\t//\tconsole.log(\"Resources for bundle \" + this.baseName + \" locale \" + this.locale.toString() + \" are not available.\");\r\n\t//}\r\n};\r\n\r\nResBundle.defaultPseudo = ilib.data.pseudomap || {\r\n\t\"a\": \"à\",\r\n\t\"e\": \"ë\",\r\n\t\"i\": \"í\",\r\n\t\"o\": \"õ\",\r\n\t\"u\": \"ü\",\r\n\t\"y\": \"ÿ\",\r\n\t\"A\": \"Ã\",\r\n\t\"E\": \"Ë\",\r\n\t\"I\": \"Ï\",\r\n\t\"O\": \"Ø\",\r\n\t\"U\": \"Ú\",\r\n\t\"Y\": \"Ŷ\"\r\n};\r\n\r\nResBundle.prototype = {\r\n    /**\r\n     * @protected\r\n     */\r\n    _loadPseudo: function (pseudoLocale, onLoad) {\r\n\t\tUtils.loadData({\r\n\t\t\tobject: ResBundle.pseudomap, \r\n\t\t\tlocale: pseudoLocale, \r\n\t\t\tname: \"pseudomap.json\", \r\n\t\t\tsync: this.sync, \r\n\t\t\tloadParams: this.loadParams, \r\n\t\t\tcallback: ilib.bind(this, function (map) {\r\n\t\t\t\tif (!map || JSUtils.isEmpty(map)) {\r\n\t\t\t\t\tmap = ResBundle.defaultPseudo;\r\n\t\t\t\t\tvar spec = pseudoLocale.getSpec().replace(/-/g, '_');\r\n\t\t\t\t\tResBundle.pseudomap.cache[spec] = map;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pseudomap = map;\r\n\t\t\t\tif (typeof(onLoad) === 'function') {\r\n\t\t\t\t\tonLoad(this);\r\n\t\t\t\t}\t\r\n\t\t\t})\r\n\t\t});\r\n    },\r\n    \r\n\t/**\r\n\t * Return the locale of this resource bundle.\r\n\t * @return {Locale} the locale of this resource bundle object \r\n\t */\r\n\tgetLocale: function () {\r\n\t\treturn this.locale;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the name of this resource bundle. This corresponds to the name option\r\n\t * given to the constructor.\r\n\t * @return {string} name of the the current instance\r\n\t */\r\n\tgetName: function () {\r\n\t\treturn this.baseName;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the type of this resource bundle. This corresponds to the type option\r\n\t * given to the constructor.\r\n\t * @return {string} type of the the current instance\r\n\t */\r\n\tgetType: function () {\r\n\t\treturn this.type;\r\n\t},\r\n\r\n\t/*\r\n\t * @private\r\n\t * Pseudo-translate a string\r\n\t */\r\n\tpseudo: function (str) {\r\n\t\tif (!str) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar ret = \"\", i;\r\n\t\tfor (i = 0; i < str.length; i++) {\r\n\t\t\tif (this.type !== \"raw\") {\r\n\t\t\t\tif (this.type === \"html\" || this.type === \"xml\") {\r\n\t\t\t\t\tif (str.charAt(i) === '<') {\r\n\t\t\t\t\t\tret += str.charAt(i++);\r\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== '>') {\r\n\t\t\t\t\t\t\tret += str.charAt(i++);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (i < str.length) {\r\n\t\t\t\t\t\t\tret += str.charAt(i++);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (str.charAt(i) === '&') {\r\n\t\t\t\t\t\tret += str.charAt(i++);\r\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== ';' && str.charAt(i) !== ' ') {\r\n\t\t\t\t\t\t\tret += str.charAt(i++);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (i < str.length) {\r\n\t\t\t\t\t\t\tret += str.charAt(i++);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (i < str.length) { \r\n\t\t\t\t\tif (str.charAt(i) === '{') {\r\n\t\t\t\t\t\tret += str.charAt(i++);\r\n\t\t\t\t\t\twhile (i < str.length && str.charAt(i) !== '}') {\r\n\t\t\t\t\t\t\tret += str.charAt(i++);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (i < str.length) {\r\n\t\t\t\t\t\t\tret += str.charAt(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tret += this.pseudomap[str.charAt(i)] || str.charAt(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tret += this.pseudomap[str.charAt(i)] || str.charAt(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.lengthen) {\r\n\t\t\tvar add;\r\n\t\t\tif (ret.length <= 20) {\r\n\t\t\t\tadd = Math.round(ret.length / 2);\r\n\t\t\t} else if (ret.length > 20 && ret.length <= 40) {\r\n\t\t\t\tadd = Math.round(ret.length / 3);\r\n\t\t\t} else {\r\n\t\t\t\tadd = Math.round(ret.length / 5);\r\n\t\t\t}\r\n\t\t\tfor (i = add-1; i >= 0; i--) {\r\n\t\t\t\tret += (i % 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.locale.getScript() === \"Hans\" || this.locale.getScript() === \"Hant\" ||\r\n\t\t\t\tthis.locale.getScript() === \"Hani\" ||\r\n\t\t\t\tthis.locale.getScript() === \"Hrkt\" || this.locale.getScript() === \"Jpan\" ||\r\n\t\t\t\tthis.locale.getScript() === \"Hira\" || this.locale.getScript() === \"Kana\" ) {\r\n\t\t\t// simulate Asian languages by getting rid of all the spaces\r\n\t\t\tret = ret.replace(/ /g, \"\");\r\n\t\t}\r\n\t\treturn ret;\r\n\t},\r\n\t\r\n\t/*\r\n\t * @private\r\n\t * Escape html characters in the output.\r\n\t */\r\n\tescapeXml: function (str) {\r\n\t\tstr = str.replace(/&/g, '&amp;');\r\n\t\tstr = str.replace(/</g, '&lt;');\r\n\t\tstr = str.replace(/>/g, '&gt;');\r\n\t\treturn str;\r\n\t},\r\n\r\n\t/*\r\n\t * @private\r\n\t * @param {string} str the string to unescape\r\n\t */\r\n\tunescapeXml: function (str) {\r\n\t\tstr = str.replace(/&amp;/g, '&');\r\n\t\tstr = str.replace(/&lt;/g, '<');\r\n\t\tstr = str.replace(/&gt;/g, '>');\r\n\t\treturn str;\r\n\t},\r\n\t\r\n\t/*\r\n\t * @private\r\n\t * Create a key name out of a source string. All this does so far is \r\n\t * compress sequences of white space into a single space on the assumption\r\n\t * that this doesn't really change the meaning of the string, and therefore\r\n\t * all such strings that compress to the same thing should share the same\r\n\t * translation.\r\n\t * @param {string} source the source string to make a key out of\r\n\t */\r\n\tmakeKey: function (source) {\r\n\t\tvar key = source.replace(/\\s+/gm, ' ');\r\n\t\treturn (this.type === \"xml\" || this.type === \"html\") ? this.unescapeXml(key) : key;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return a localized string. If the string is not found in the loaded set of\r\n\t * resources, the original source string is returned. If the key is not given,\r\n\t * then the source string itself is used as the key. In the case where the \r\n\t * source string is used as the key, the whitespace is compressed down to 1 space\r\n\t * each, and the whitespace at the beginning and end of the string is trimmed.<p>\r\n\t * \r\n\t * The escape mode specifies what type of output you are escaping the returned\r\n\t * string for. Modes are similar to the types: \r\n\t * \r\n\t * <ul>\r\n\t * <li>\"html\" -- prevents HTML injection by escaping the characters &lt &gt; and &amp;\r\n\t * <li>\"xml\" -- currently same as \"html\" mode\r\n\t * <li>\"js\" -- prevents breaking Javascript syntax by backslash escaping all quote and \r\n\t * double-quote characters\r\n\t * <li>\"attribute\" -- meant for HTML attribute values. Currently this is the same as\r\n\t * \"js\" escape mode.\r\n\t * <li>\"default\" -- use the type parameter from the constructor as the escape mode as well\r\n\t * <li>\"none\" or undefined -- no escaping at all.\r\n\t * </ul>\r\n\t * \r\n\t * The type parameter of the constructor specifies what type of strings this bundle\r\n\t * is operating upon. This allows pseudo-translation and automatic key generation\r\n\t * to happen properly by telling this class how to parse the string. The escape mode \r\n\t * for this method is different in that it specifies how this string will be used in \r\n\t * the calling code and therefore how to escape it properly.<p> \r\n\t * \r\n\t * For example, a section of Javascript code may be constructing an HTML snippet in a \r\n\t * string to add to the web page. In this case, the type parameter in the constructor should\r\n\t * be \"html\" so that the source string can be parsed properly, but the escape mode should\r\n\t * be \"js\" so that the output string can be used in Javascript without causing syntax\r\n\t * errors.\r\n\t * \r\n\t * @param {?string=} source the source string to translate\r\n\t * @param {?string=} key optional name of the key, if any\r\n\t * @param {?string=} escapeMode escape mode, if any\r\n\t * @return {IString|undefined} the translation of the given source/key or undefined \r\n\t * if the translation is not found and the source is undefined \r\n\t */\r\n\tgetString: function (source, key, escapeMode) {\r\n\t\tif (!source && !key) return new IString(\"\");\r\n\r\n\t\tvar trans;\r\n\t\tif (this.locale.isPseudo()) {\r\n\t\t\tvar str = source ? source : this.map[key];\r\n\t\t\ttrans = this.pseudo(str || key);\r\n\t\t} else {\r\n\t\t\tvar keyName = key || this.makeKey(source);\r\n\t\t\tif (typeof(this.map[keyName]) !== 'undefined') {\r\n\t\t\t\ttrans = this.map[keyName];\r\n\t\t\t} else if (this.missing === \"pseudo\") {\r\n\t\t\t\ttrans = this.pseudo(source || key);\r\n\t\t\t} else if (this.missing === \"empty\") {\r\n\t\t\t\ttrans = \"\";\r\n\t\t\t} else {\r\n\t\t\t\ttrans = source;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (escapeMode && escapeMode !== \"none\") {\r\n\t\t\tif (escapeMode == \"default\") {\r\n\t\t\t\tescapeMode = this.type;\r\n\t\t\t}\r\n\t\t\tif (escapeMode === \"xml\" || escapeMode === \"html\") {\r\n\t\t\t\ttrans = this.escapeXml(trans);\r\n\t\t\t} else if (escapeMode == \"js\" || escapeMode === \"attribute\") {\r\n\t\t\t\ttrans = trans.replace(/'/g, \"\\\\\\'\").replace(/\"/g, \"\\\\\\\"\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (trans === undefined) {\r\n\t\t\treturn undefined;\r\n\t\t} else {\r\n\t\t\tvar ret = new IString(trans);\r\n\t\t\tret.setLocale(this.locale.getSpec(), true, this.loadParams); // no callback\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return a localized string as a Javascript object. This does the same thing as\r\n\t * the getString() method, but it returns a regular Javascript string instead of\r\n\t * and IString instance. This means it cannot be formatted with the format()\r\n\t * method without being wrapped in an IString instance first.\r\n\t * \r\n\t * @param {?string=} source the source string to translate\r\n\t * @param {?string=} key optional name of the key, if any\r\n\t * @param {?string=} escapeMode escape mode, if any\r\n\t * @return {string|undefined} the translation of the given source/key or undefined \r\n\t * if the translation is not found and the source is undefined\r\n\t */\r\n\tgetStringJS: function(source, key, escapeMode) {\r\n\t\treturn this.getString(source, key, escapeMode).toString();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return true if the current bundle contains a translation for the given key and\r\n\t * source. The\r\n\t * getString method will always return a string for any given key and source \r\n\t * combination, so it cannot be used to tell if a translation exists. Either one\r\n\t * or both of the source and key must be specified. If both are not specified,\r\n\t * this method will return false.\r\n\t * \r\n\t * @param {?string=} source source string to look up\r\n\t * @param {?string=} key key to look up\r\n\t * @return {boolean} true if this bundle contains a translation for the key, and \r\n\t * false otherwise\r\n\t */\r\n\tcontainsKey: function(source, key) {\r\n\t\tif (typeof(source) === 'undefined' && typeof(key) === 'undefined') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar keyName = key || this.makeKey(source);\r\n\t\treturn typeof(this.map[keyName]) !== 'undefined';\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the merged resources as an entire object. When loading resources for a\r\n\t * locale that are not just a set of translated strings, but instead an entire \r\n\t * structured javascript object, you can gain access to that object via this call. This method\r\n\t * will ensure that all the of the parts of the object are correct for the locale.<p>\r\n\t * \r\n\t * For pre-assembled data, it starts by loading <i>ilib.data[name]</i>, where \r\n\t * <i>name</i> is the base name for this set of resources. Then, it successively \r\n\t * merges objects in the base data using progressively more locale-specific data. \r\n\t * It loads it in this order from <i>ilib.data</i>:\r\n\t * \r\n\t * <ol>\r\n\t * <li> language\r\n\t * <li> region\r\n\t * <li> language_script\r\n\t * <li> language_region\r\n\t * <li> region_variant\r\n\t * <li> language_script_region\r\n\t * <li> language_region_variant\r\n\t * <li> language_script_region_variant\r\n\t * </ol>\r\n\t * \r\n\t * For dynamically loaded data, the code attempts to load the same sequence as\r\n\t * above, but with slash path separators instead of underscores.<p>\r\n\t *  \r\n\t * Loading the resources this way allows the program to share resources between all\r\n\t * locales that share a common language, region, or script. As a \r\n\t * general rule-of-thumb, resources should be as generic as possible in order to\r\n\t * cover as many locales as possible.\r\n\t * \r\n\t * @return {Object} returns the object that is the basis for this resources instance\r\n\t */\r\n\tgetResObj: function () {\r\n\t\treturn this.map;\r\n\t}\r\n};\r\n\r\nmodule.exports = ResBundle;","/*\r\n * IDate.js - Represent a date in any calendar. This class is subclassed for each \r\n * calendar and includes some shared functionality.\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends LocaleInfo.js */\r\n\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\n\r\n/**\r\n * @class\r\n * Superclass for all the calendar date classes that contains shared \r\n * functionality. This class is never instantiated on its own. Instead,\r\n * you should use the {@link DateFactory} function to manufacture a new\r\n * instance of a subclass of IDate. This class is called IDate for \"ilib\r\n * date\" so that it does not conflict with the built-in Javascript Date\r\n * class.\r\n * \r\n * @private\r\n * @constructor\r\n * @param {Object=} options The date components to initialize this date with\r\n */\r\nvar IDate = function(options) {\r\n};\r\n\r\n/* place for the subclasses to put their constructors so that the factory method\r\n * can find them. Do this to add your date after it's defined: \r\n * IDate._constructors[\"mytype\"] = IDate.MyTypeConstructor;\r\n */\r\nIDate._constructors = {};\r\n\r\nIDate.prototype = {\r\n\tgetType: function() {\r\n\t\treturn \"date\";\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the unix time equivalent to this date instance. Unix time is\r\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC (Gregorian). This \r\n\t * method only returns a valid number for dates between midnight, \r\n\t * Jan 1, 1970 UTC (Gregorian) and Jan 19, 2038 at 3:14:07am UTC (Gregorian) when \r\n\t * the unix time runs out. If this instance encodes a date outside of that range, \r\n\t * this method will return -1. For date types that are not Gregorian, the point \r\n\t * in time represented by this date object will only give a return value if it\r\n\t * is in the correct range in the Gregorian calendar as given previously.\r\n\t * \r\n\t * @return {number} a number giving the unix time, or -1 if the date is outside the\r\n\t * valid unix time range\r\n\t */\r\n\tgetTime: function() {\r\n\t\treturn this.rd.getTime(); \r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the extended unix time equivalent to this Gregorian date instance. Unix time is\r\n\t * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time\r\n\t * (or the type \"time_t\" in C/C++) is only encoded with an unsigned 32 bit integer, and thus \r\n\t * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above \r\n\t * 32 bits and the Date object allows you to encode up to 100 million days worth of time \r\n\t * after Jan 1, 1970, and even more interestingly, 100 million days worth of time before\r\n\t * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended \r\n\t * range. If this instance encodes a date outside of that range, this method will return\r\n\t * NaN.\r\n\t * \r\n\t * @return {number} a number giving the extended unix time, or Nan if the date is outside \r\n\t * the valid extended unix time range\r\n\t */\r\n\tgetTimeExtended: function() {\r\n\t\treturn this.rd.getTimeExtended();\r\n\t},\r\n\r\n\t/**\r\n\t * Set the time of this instance according to the given unix time. Unix time is\r\n\t * the number of milliseconds since midnight on Jan 1, 1970.\r\n\t * \r\n\t * @param {number} millis the unix time to set this date to in milliseconds \r\n\t */\r\n\tsetTime: function(millis) {\r\n\t\tthis.rd = this.newRd({\r\n\t\t\tunixtime: millis,\r\n\t\t\tcal: this.cal\r\n\t\t});\r\n\t\tthis._calcDateComponents();\r\n\t},\r\n\t\r\n\tgetDays: function() {\r\n\t\treturn this.day;\r\n\t},\r\n\tgetMonths: function() {\r\n\t\treturn this.month;\r\n\t},\r\n\tgetYears: function() {\r\n\t\treturn this.year;\r\n\t},\r\n\tgetHours: function() {\r\n\t\treturn this.hour;\r\n\t},\r\n\tgetMinutes: function() {\r\n\t\treturn this.minute;\r\n\t},\r\n\tgetSeconds: function() {\r\n\t\treturn this.second;\r\n\t},\r\n\tgetMilliseconds: function() {\r\n\t\treturn this.millisecond;\r\n\t},\r\n\tgetEra: function() {\r\n\t\treturn (this.year < 1) ? -1 : 1;\r\n\t},\r\n\r\n\tsetDays: function(day) {\r\n\t\tthis.day = parseInt(day, 10) || 1;\r\n\t\tthis.rd._setDateComponents(this);\r\n\t},\r\n\tsetMonths: function(month) {\r\n\t\tthis.month = parseInt(month, 10) || 1;\r\n\t\tthis.rd._setDateComponents(this);\r\n\t},\r\n\tsetYears: function(year) {\r\n\t\tthis.year = parseInt(year, 10) || 0;\r\n\t\tthis.rd._setDateComponents(this);\r\n\t},\r\n\t\r\n\tsetHours: function(hour) {\r\n\t\tthis.hour = parseInt(hour, 10) || 0;\r\n\t\tthis.rd._setDateComponents(this);\r\n\t},\r\n\tsetMinutes: function(minute) {\r\n\t\tthis.minute = parseInt(minute, 10) || 0;\r\n\t\tthis.rd._setDateComponents(this);\r\n\t},\r\n\tsetSeconds: function(second) {\r\n\t\tthis.second = parseInt(second, 10) || 0;\r\n\t\tthis.rd._setDateComponents(this);\r\n\t},\r\n\tsetMilliseconds: function(milli) {\r\n\t\tthis.millisecond = parseInt(milli, 10) || 0;\r\n\t\tthis.rd._setDateComponents(this);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return a new date instance in the current calendar that represents the first instance \r\n\t * of the given day of the week before the current date. The day of the week is encoded\r\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\r\n\t * \r\n\t * @param {number} dow the day of the week before the current date that is being sought\r\n\t * @return {IDate} the date being sought\r\n\t */\r\n\tbefore: function (dow) {\r\n\t\treturn new this.constructor({\r\n\t\t\trd: this.rd.before(dow, this.offset),\r\n\t\t\ttimezone: this.timezone\r\n\t\t});\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return a new date instance in the current calendar that represents the first instance \r\n\t * of the given day of the week after the current date. The day of the week is encoded\r\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\r\n\t * \r\n\t * @param {number} dow the day of the week after the current date that is being sought\r\n\t * @return {IDate} the date being sought\r\n\t */\r\n\tafter: function (dow) {\r\n\t\treturn new this.constructor({\r\n\t\t\trd: this.rd.after(dow, this.offset),\r\n\t\t\ttimezone: this.timezone\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n\t * Return a new Gregorian date instance that represents the first instance of the \r\n\t * given day of the week on or before the current date. The day of the week is encoded\r\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\r\n\t * \r\n\t * @param {number} dow the day of the week on or before the current date that is being sought\r\n\t * @return {IDate} the date being sought\r\n\t */\r\n\tonOrBefore: function (dow) {\r\n\t\treturn new this.constructor({\r\n\t\t\trd: this.rd.onOrBefore(dow, this.offset),\r\n\t\t\ttimezone: this.timezone\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n\t * Return a new Gregorian date instance that represents the first instance of the \r\n\t * given day of the week on or after the current date. The day of the week is encoded\r\n\t * as a number where 0 = Sunday, 1 = Monday, etc.\r\n\t * \r\n\t * @param {number} dow the day of the week on or after the current date that is being sought\r\n\t * @return {IDate} the date being sought\r\n\t */\r\n\tonOrAfter: function (dow) {\r\n\t\treturn new this.constructor({\r\n\t\t\trd: this.rd.onOrAfter(dow, this.offset),\r\n\t\t\ttimezone: this.timezone\r\n\t\t});\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return a Javascript Date object that is equivalent to this date\r\n\t * object.\r\n\t * \r\n\t * @return {Date|undefined} a javascript Date object\r\n\t */\r\n\tgetJSDate: function() {\r\n\t\tvar unix = this.rd.getTimeExtended();\r\n\t\treturn isNaN(unix) ? undefined : new Date(unix); \r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the Rata Die (fixed day) number of this date.\r\n\t * \r\n\t * @protected\r\n\t * @return {number} the rd date as a number\r\n\t */\r\n\tgetRataDie: function() {\r\n\t\treturn this.rd.getRataDie();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Set the date components of this instance based on the given rd.\r\n\t * @protected\r\n\t * @param {number} rd the rata die date to set\r\n\t */\r\n\tsetRd: function (rd) {\r\n\t\tthis.rd = this.newRd({\r\n\t\t\trd: rd,\r\n\t\t\tcal: this.cal\r\n\t\t});\r\n\t\tthis._calcDateComponents();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the Julian Day equivalent to this calendar date as a number.\r\n\t * \r\n\t * @return {number} the julian date equivalent of this date\r\n\t */\r\n\tgetJulianDay: function() {\r\n\t\treturn this.rd.getJulianDay();\r\n\t},\r\n\t\r\n\t/**\r\n\t * Set the date of this instance using a Julian Day.\r\n\t * @param {number|JulianDay} date the Julian Day to use to set this date\r\n\t */\r\n\tsetJulianDay: function (date) {\r\n\t\tthis.rd = this.newRd({\r\n\t\t\tjulianday: (typeof(date) === 'object') ? date.getDate() : date,\r\n\t\t\tcal: this.cal\r\n\t\t});\r\n\t\tthis._calcDateComponents();\r\n\t},\r\n\r\n\t/**\r\n\t * Return the time zone associated with this date, or \r\n\t * undefined if none was specified in the constructor.\r\n\t * \r\n\t * @return {string|undefined} the name of the time zone for this date instance\r\n\t */\r\n\tgetTimeZone: function() {\r\n\t\treturn this.timezone || \"local\";\r\n\t},\r\n\t\r\n\t/**\r\n\t * Set the time zone associated with this date.\r\n\t * @param {string=} tzName the name of the time zone to set into this date instance,\r\n\t * or \"undefined\" to unset the time zone \r\n\t */\r\n\tsetTimeZone: function (tzName) {\r\n\t\tif (!tzName || tzName === \"\") {\r\n\t\t\t// same as undefining it\r\n\t\t\tthis.timezone = undefined;\r\n\t\t\tthis.tz = undefined;\r\n\t\t} else if (typeof(tzName) === 'string') {\r\n\t\t\tthis.timezone = tzName;\r\n\t\t\tthis.tz = undefined;\r\n\t\t\t// assuming the same UTC time, but a new time zone, now we have to \r\n\t\t\t// recalculate what the date components are\r\n\t\t\tthis._calcDateComponents();\r\n\t\t}\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the rd number of the first Sunday of the given ISO year.\r\n\t * @protected\r\n\t * @param {number} year the year for which the first Sunday is being sought\r\n\t * @return {number} the rd of the first Sunday of the ISO year\r\n\t */\r\n\tfirstSunday: function (year) {\r\n\t\tvar firstDay = this.newRd({\r\n\t\t\tyear: year,\r\n\t\t\tmonth: 1,\r\n\t\t\tday: 1,\r\n\t\t\thour: 0,\r\n\t\t\tminute: 0,\r\n\t\t\tsecond: 0,\r\n\t\t\tmillisecond: 0,\r\n\t\t\tcal: this.cal\r\n\t\t});\r\n\t\tvar firstThu = this.newRd({\r\n\t\t\trd: firstDay.onOrAfter(4),\r\n\t\t\tcal: this.cal\r\n\t\t});\r\n\t\treturn firstThu.before(0);\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the ISO 8601 week number in the current year for the current date. The week\r\n\t * number ranges from 0 to 55, as some years have 55 weeks assigned to them in some\r\n\t * calendars.\r\n\t * \r\n\t * @return {number} the week number for the current date\r\n\t */\r\n\tgetWeekOfYear: function() {\r\n\t\tvar rd = Math.floor(this.rd.getRataDie());\r\n\t\tvar year = this._calcYear(rd + this.offset);\r\n\t\tvar yearStart = this.firstSunday(year);\r\n\t\tvar nextYear;\r\n\t\t\r\n\t\t// if we have a January date, it may be in this ISO year or the previous year\r\n\t\tif (rd < yearStart) {\r\n\t\t\tyearStart = this.firstSunday(year-1);\r\n\t\t} else {\r\n\t\t\t// if we have a late December date, it may be in this ISO year, or the next year\r\n\t\t\tnextYear = this.firstSunday(year+1);\r\n\t\t\tif (rd >= nextYear) {\r\n\t\t\t\tyearStart = nextYear;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn Math.floor((rd-yearStart)/7) + 1;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the ordinal number of the week within the month. The first week of a month is\r\n\t * the first one that contains 4 or more days in that month. If any days precede this\r\n\t * first week, they are marked as being in week 0. This function returns values from 0\r\n\t * through 6.<p>\r\n\t * \r\n\t * The locale is a required parameter because different locales that use the same \r\n\t * Gregorian calendar consider different days of the week to be the beginning of\r\n\t * the week. This can affect the week of the month in which some days are located.\r\n\t * \r\n\t * @param {Locale|string} locale the locale or locale spec to use when figuring out \r\n\t * the first day of the week\r\n\t * @return {number} the ordinal number of the week within the current month\r\n\t */\r\n\tgetWeekOfMonth: function(locale) {\r\n\t\tvar li = new LocaleInfo(locale);\r\n\t\t\r\n\t\tvar first = this.newRd({\r\n\t\t\tyear: this._calcYear(this.rd.getRataDie()+this.offset),\r\n\t\t\tmonth: this.getMonths(),\r\n\t\t\tday: 1,\r\n\t\t\thour: 0,\r\n\t\t\tminute: 0,\r\n\t\t\tsecond: 0,\r\n\t\t\tmillisecond: 0,\r\n\t\t\tcal: this.cal\r\n\t\t});\r\n\t\tvar weekStart = first.onOrAfter(li.getFirstDayOfWeek());\r\n\t\t\r\n\t\tif (weekStart - first.getRataDie() > 3) {\r\n\t\t\t// if the first week has 4 or more days in it of the current month, then consider\r\n\t\t\t// that week 1. Otherwise, it is week 0. To make it week 1, move the week start\r\n\t\t\t// one week earlier.\r\n\t\t\tweekStart -= 7;\r\n\t\t}\r\n\t\treturn Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;\r\n\t}\r\n};\r\n\r\nmodule.exports = IDate;","/*\r\n * CalendarFactory.js - Constructs new instances of the right subclass of Calendar\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends\r\nilib.js\r\nLocale.js\r\nLocaleInfo.js\r\nCalendar.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\n/**\r\n * Factory method to create a new instance of a calendar subclass.<p>\r\n * \r\n * The options parameter can be an object that contains the following\r\n * properties:\r\n * \r\n * <ul>\r\n * <li><i>type</i> - specify the type of the calendar desired. The\r\n * list of valid values changes depending on which calendars are \r\n * defined. When assembling your iliball.js, include those calendars \r\n * you wish to use in your program or web page, and they will register \r\n * themselves with this factory method. The \"official\", \"gregorian\",\r\n * and \"julian\" calendars are all included by default, as they are the\r\n * standard calendars for much of the world.\r\n * <li><i>locale</i> - some calendars vary depending on the locale.\r\n * For example, the \"official\" calendar transitions from a Julian-style\r\n * calendar to a Gregorian-style calendar on a different date for\r\n * each country, as the governments of those countries decided to\r\n * adopt the Gregorian calendar at different times.\r\n *  \r\n * <li><i>onLoad</i> - a callback function to call when the calendar object is fully \r\n * loaded. When the onLoad option is given, the calendar factory will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two.\r\n * \r\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while.\r\n *  \r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * If a locale is specified, but no type, then the calendar that is default for\r\n * the locale will be instantiated and returned. If neither the type nor\r\n * the locale are specified, then the calendar for the default locale will\r\n * be used. \r\n * \r\n * @static\r\n * @param {Object=} options options controlling the construction of this instance, or\r\n * undefined to use the default options\r\n * @return {Calendar} an instance of a calendar object of the appropriate type\r\n */\r\nvar CalendarFactory = function (options) {\r\n\tvar locale,\r\n\t\ttype,\r\n\t\tsync = true,\r\n\t\tinstance;\r\n\r\n\tif (options) {\r\n\t\tif (options.locale) {\r\n\t\t\tlocale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\t\t\r\n\t\ttype = options.type || options.calendar;\r\n\t\t\r\n\t\tif (typeof(options.sync) === 'boolean') {\r\n\t\t\tsync = options.sync;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (!locale) {\r\n\t\tlocale = new Locale();\t// default locale\r\n\t}\r\n\t\r\n\tif (!type) {\r\n\t\tnew LocaleInfo(locale, {\r\n\t\t\tsync: sync,\r\n\t\t\tloadParams: options && options.loadParams,\r\n\t\t\tonLoad: ilib.bind(this, function(info) {\r\n\t\t\t\ttype = info.getCalendar();\r\n\t\t\t\t\r\n\t\t\t\tinstance = CalendarFactory._init(type, options);\r\n\t\t\t\t\r\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\toptions.onLoad(instance);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t} else {\r\n\t\tinstance = CalendarFactory._init(type, options);\r\n\t}\r\n\t\r\n\treturn instance;\r\n};\r\n\r\n/**\r\n * Map calendar names to classes to initialize in the dynamic code model.\r\n * TODO: Need to figure out some way that this doesn't have to be updated by hand.\r\n * @private\r\n */\r\nCalendarFactory._dynMap = {\r\n\t\"coptic\":       \"Coptic\",\r\n\t\"ethiopic\":     \"Ethiopic\",\r\n\t\"gregorian\":    \"Gregorian\",\r\n\t\"han\":          \"Han\",\r\n\t\"hebrew\":       \"Hebrew\",\r\n\t\"islamic\":      \"Islamic\",\r\n\t\"julian\":       \"Julian\",\r\n\t\"persian\":      \"Persian\",\r\n\t\"persian-algo\": \"PersianAlgo\",\r\n\t\"thaisolar\":    \"ThaiSolar\"\r\n};\r\n\r\n/**\r\n * Dynamically load the code for a calendar and calendar class if necessary.\r\n * @protected\r\n */\r\nCalendarFactory._dynLoadCalendar = function (name) {\r\n\tif (!Calendar._constructors[name]) {\r\n\t\tvar entry = CalendarFactory._dynMap[name];\r\n\t\tif (entry) {\r\n\t\t\tCalendar._constructors[name] = require(\"./\" + entry + \"Cal.js\");\r\n\t\t}\r\n\t}\r\n\treturn Calendar._constructors[name];\r\n};\r\n\r\n/** @private */\r\nCalendarFactory._init = function(type, options) {\r\n\tvar cons;\r\n\t\r\n\tif (ilib.isDynCode()) {\r\n\t\tCalendarFactory._dynLoadCalendar(type);\r\n\t}\r\n\t\r\n\tcons = Calendar._constructors[type];\r\n\t\r\n\t// pass the same options through to the constructor so the subclass\r\n\t// has the ability to do something with if it needs to\r\n\treturn cons && new cons(options);\r\n};\r\n\r\n/**\r\n * Return an array of known calendar types that the factory method can instantiate.\r\n * \r\n * @return {Array.<string>} an array of calendar types\r\n */\r\nCalendarFactory.getCalendars = function () {\r\n\tvar arr = [],\r\n\t\tc;\r\n\t\r\n\tif (ilib.isDynCode()) {\r\n\t\tfor (c in CalendarFactory._dynMap) {\r\n\t\t\tCalendarFactory._dynLoadCalendar(c);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (c in Calendar._constructors) {\r\n\t\tif (c && Calendar._constructors[c]) {\r\n\t\t\tarr.push(c); // code like a pirate\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn arr;\r\n};\r\n\r\nmodule.exports = CalendarFactory;","/*\r\n * gregratadie.js - Represent the RD date number in the Gregorian calendar\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nGregorianCal.js\r\nRataDie.js\r\nMathUtils.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar GregorianCal = require(\"./GregorianCal.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Gregorian RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Gregorian date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @extends RataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date\r\n */\r\nvar GregRataDie = function(params) {\r\n\tthis.cal = params && params.cal || new GregorianCal();\r\n\t/** @type {number|undefined} */\r\n\tthis.rd = undefined;\r\n\tRataDie.call(this, params);\r\n};\r\n\r\nGregRataDie.prototype = new RataDie();\r\nGregRataDie.prototype.parent = RataDie;\r\nGregRataDie.prototype.constructor = GregRataDie;\r\n\r\n/**\r\n * the cumulative lengths of each month, for a non-leap year \r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nGregRataDie.cumMonthLengths = [\r\n    0,   /* Jan */\r\n\t31,  /* Feb */\r\n\t59,  /* Mar */\r\n\t90,  /* Apr */\r\n\t120, /* May */\r\n\t151, /* Jun */\r\n\t181, /* Jul */\r\n\t212, /* Aug */\r\n\t243, /* Sep */\r\n\t273, /* Oct */\r\n\t304, /* Nov */\r\n\t334, /* Dec */\r\n\t365\r\n];\r\n\r\n/**\r\n * the cumulative lengths of each month, for a leap year \r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nGregRataDie.cumMonthLengthsLeap = [\r\n\t0,   /* Jan */\r\n\t31,  /* Feb */\r\n\t60,  /* Mar */\r\n\t91,  /* Apr */\r\n\t121, /* May */\r\n\t152, /* Jun */\r\n\t182, /* Jul */\r\n\t213, /* Aug */\r\n\t244, /* Sep */\r\n\t274, /* Oct */\r\n\t305, /* Nov */\r\n\t335, /* Dec */\r\n\t366\r\n];\r\n\r\n/**\r\n * Calculate the Rata Die (fixed day) number of the given date.\r\n * \r\n * @private\r\n * @param {Object} date the date components to calculate the RD from\r\n */\r\nGregRataDie.prototype._setDateComponents = function(date) {\r\n\tvar year = parseInt(date.year, 10) || 0;\r\n\tvar month = parseInt(date.month, 10) || 1;\r\n\tvar day = parseInt(date.day, 10) || 1;\r\n\tvar hour = parseInt(date.hour, 10) || 0;\r\n\tvar minute = parseInt(date.minute, 10) || 0;\r\n\tvar second = parseInt(date.second, 10) || 0;\r\n\tvar millisecond = parseInt(date.millisecond, 10) || 0;\r\n\r\n\tvar years = 365 * (year - 1) +\r\n\t\tMath.floor((year-1)/4) -\r\n\t\tMath.floor((year-1)/100) +\r\n\t\tMath.floor((year-1)/400);\r\n\t\r\n\tvar dayInYear = (month > 1 ? GregRataDie.cumMonthLengths[month-1] : 0) +\r\n\t\tday +\r\n\t\t(GregorianCal.prototype.isLeapYear.call(this.cal, year) && month > 2 ? 1 : 0);\r\n\tvar rdtime = (hour * 3600000 +\r\n\t\tminute * 60000 +\r\n\t\tsecond * 1000 +\r\n\t\tmillisecond) / \r\n\t\t86400000; \r\n\t/*\r\n\tdebug(\"getRataDie: converting \" +  JSON.stringify(this));\r\n\tdebug(\"getRataDie: year is \" +  years);\r\n\tdebug(\"getRataDie: day in year is \" +  dayInYear);\r\n\tdebug(\"getRataDie: rdtime is \" +  rdtime);\r\n\tdebug(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\r\n\t*/\r\n\t\r\n\t/**\r\n\t * @type {number|undefined} the RD number of this Gregorian date\r\n\t */\r\n\tthis.rd = years + dayInYear + rdtime;\r\n};\r\n\r\n/**\r\n * Return the rd number of the particular day of the week on or before the \r\n * given rd. eg. The Sunday on or before the given rd.\r\n * @private\r\n * @param {number} rd the rata die date of the reference date\r\n * @param {number} dayOfWeek the day of the week that is being sought relative \r\n * to the current date\r\n * @return {number} the rd of the day of the week\r\n */\r\nGregRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\r\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);\r\n};\r\n\r\nmodule.exports = GregRataDie;","/*\r\n * thaisolar.js - Represent a Thai solar calendar object.\r\n *\r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* !depends ilib.js Calendar.js GregorianCal.js MathUtils.js */\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\nvar GregorianCal = require(\"./GregorianCal.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Thai solar calendar object. This class encodes information about\r\n * a Thai solar calendar.<p>\r\n *\r\n *\r\n * @constructor\r\n * @extends Calendar\r\n */\r\nvar ThaiSolarCal = function() {\r\n\tthis.type = \"thaisolar\";\r\n};\r\n\r\nThaiSolarCal.prototype = new GregorianCal({noinstance: true});\r\nThaiSolarCal.prototype.parent = GregorianCal;\r\nThaiSolarCal.prototype.constructor = ThaiSolarCal;\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Thai solar calendar.\r\n * The year parameter may be given as a number, or as a ThaiSolarDate object.\r\n * @param {number|ThaiSolarDate} year the year for which the leap year information is being sought\r\n * @return {boolean} true if the given year is a leap year\r\n */\r\nThaiSolarCal.prototype.isLeapYear = function(year) {\r\n\tvar y = (typeof(year) === 'number' ? year : year.getYears());\r\n\ty -= 543;\r\n\tvar centuries = MathUtils.mod(y, 400);\r\n\treturn (MathUtils.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);\r\n};\r\n\r\n\r\n/* register this calendar for the factory method */\r\nCalendar._constructors[\"thaisolar\"] = ThaiSolarCal;\r\n\r\nmodule.exports = ThaiSolarCal;","/*\r\n * EthiopicRataDie.js - Represent an RD date in the Ethiopic calendar\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nEthiopicCal.js\r\nRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar EthiopicCal = require(\"./EthiopicCal.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Ethiopic RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen\r\n * \r\n * <li><i>day</i> - 1 to 30\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Ethiopic date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @extends RataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic RD date\r\n */\r\nvar EthiopicRataDie = function(params) {\r\n\tthis.cal = params && params.cal || new EthiopicCal();\r\n\tthis.rd = undefined;\r\n\tRataDie.call(this, params);\r\n};\r\n\r\nEthiopicRataDie.prototype = new RataDie();\r\nEthiopicRataDie.prototype.parent = RataDie;\r\nEthiopicRataDie.prototype.constructor = EthiopicRataDie;\r\n\r\n/**\r\n * The difference between the zero Julian day and the first Ethiopic date\r\n * of Friday, August 29, 8 CE Julian at 6:00am UTC.<p> \r\n * \r\n * See <a href=\"http://us.wow.com/wiki/Time_in_Ethiopia?s_chn=90&s_pt=aolsem&v_t=aolsem\"\r\n * Time in Ethiopia</a> for information about how time is handled in Ethiopia.\r\n * \r\n * @protected\r\n * @type number\r\n */\r\nEthiopicRataDie.prototype.epoch = 1724219.75;\r\n\r\n/**\r\n * Calculate the Rata Die (fixed day) number of the given date from the\r\n * date components.\r\n * \r\n * @protected\r\n * @param {Object} date the date components to calculate the RD from\r\n */\r\nEthiopicRataDie.prototype._setDateComponents = function(date) {\r\n\tvar year = date.year;\r\n\tvar years = 365 * (year - 1) + Math.floor(year/4);\r\n\tvar dayInYear = (date.month-1) * 30 + date.day;\r\n\tvar rdtime = (date.hour * 3600000 +\r\n\t\tdate.minute * 60000 +\r\n\t\tdate.second * 1000 +\r\n\t\tdate.millisecond) / \r\n\t\t86400000;\r\n\t\r\n\t/*\r\n\tconsole.log(\"calcRataDie: converting \" +  JSON.stringify(parts));\r\n\tconsole.log(\"getRataDie: year is \" +  years);\r\n\tconsole.log(\"getRataDie: day in year is \" +  dayInYear);\r\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\r\n\tconsole.log(\"getRataDie: rd is \" +  (years + dayInYear + rdtime));\r\n\t*/\r\n\t\r\n\tthis.rd = years + dayInYear + rdtime;\r\n};\r\n\r\nmodule.exports = EthiopicRataDie;\r\n","/*\r\n * coptic.js - Represent a Coptic calendar object.\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* !depends ilib.js Calendar.js Locale.js Utils.js EthiopicCal.js */\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar Locale = require(\"./Locale.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\nvar EthiopicCal = require(\"./EthiopicCal.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Coptic calendar object. This class encodes information about\r\n * a Coptic calendar.<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends EthiopicCal\r\n */\r\nvar CopticCal = function() {\r\n\tthis.type = \"coptic\";\r\n};\r\n\r\nCopticCal.prototype = new EthiopicCal();\r\nCopticCal.prototype.parent = EthiopicCal;\r\nCopticCal.prototype.constructor = CopticCal;\r\n\r\n\r\n/* register this calendar for the factory method */\r\nCalendar._constructors[\"coptic\"] = CopticCal;\r\n\r\nmodule.exports = CopticCal;","/*\r\n * CType.js - Character type definitions\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends CType.js IString.js\r\n\r\n// !data ctype\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar CType = require(\"./CType.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * Return whether or not the first character is an ideographic character.<p>\r\n * \r\n * @static\r\n * @param {string|IString|number} ch character or code point to examine\r\n * @return {boolean} true if the first character is an ideographic character.\r\n */\r\nvar isIdeo = function (ch) {\r\n\tvar num;\r\n\tswitch (typeof(ch)) {\r\n\t\tcase 'number':\r\n\t\t\tnum = ch;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\tnum = IString.toCodePoint(ch, 0);\r\n\t\t\tbreak;\r\n\t\tcase 'undefined':\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\tnum = ch._toCodePoint(0);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn CType._inRange(num, 'cjk', ilib.data.ctype) ||\r\n\t\tCType._inRange(num, 'cjkradicals', ilib.data.ctype) ||\r\n\t\tCType._inRange(num, 'enclosedcjk', ilib.data.ctype) ||\r\n\t\tCType._inRange(num, 'cjkpunct', ilib.data.ctype) ||\r\n\t\tCType._inRange(num, 'cjkcompatibility', ilib.data.ctype);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @param {boolean} sync\r\n * @param {Object|undefined} loadParams\r\n * @param {function(*)|undefined} onLoad\r\n */\r\nisIdeo._init = function (sync, loadParams, onLoad) {\r\n\tCType._init(sync, loadParams, onLoad);\r\n};\r\n\r\nmodule.exports = isIdeo;","/*\r\n * isAscii.js - Character type is ASCII\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends CType.js IString.js ilib.js\r\n\r\n// !data ctype\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar CType = require(\"./CType.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * Return whether or not the first character is in the ASCII range.<p>\r\n * \r\n * @static\r\n * @param {string|IString|number} ch character or code point to examine\r\n * @return {boolean} true if the first character is in the ASCII range.\r\n */\r\nvar isAscii = function (ch) {\r\n\tvar num;\r\n\tswitch (typeof(ch)) {\r\n\t\tcase 'number':\r\n\t\t\tnum = ch;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\tnum = IString.toCodePoint(ch, 0);\r\n\t\t\tbreak;\r\n\t\tcase 'undefined':\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\tnum = ch._toCodePoint(0);\r\n\t\t\tbreak;\r\n\t}\r\n\treturn CType._inRange(num, 'ascii', ilib.data.ctype);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @param {boolean} sync\r\n * @param {Object|undefined} loadParams\r\n * @param {function(*)|undefined} onLoad\r\n */\r\nisAscii._init = function (sync, loadParams, onLoad) {\r\n\tCType._init(sync, loadParams, onLoad);\r\n};\r\n\r\nmodule.exports = isAscii;","/*\r\n * isDigit.js - Character type is digit\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends CType.js IString.js ilib.js\r\n\r\n// !data ctype\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar CType = require(\"./CType.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * Return whether or not the first character is a digit character in the\r\n * Latin script.<p>\r\n * \r\n * @static\r\n * @param {string|IString|number} ch character or code point to examine\r\n * @return {boolean} true if the first character is a digit character in the\r\n * Latin script. \r\n */\r\nvar isDigit = function (ch) {\r\n\tvar num;\r\n\tswitch (typeof(ch)) {\r\n\t\tcase 'number':\r\n\t\t\tnum = ch;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\tnum = IString.toCodePoint(ch, 0);\r\n\t\t\tbreak;\r\n\t\tcase 'undefined':\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\tnum = ch._toCodePoint(0);\r\n\t\t\tbreak;\r\n\t}\r\n\treturn CType._inRange(num, 'digit', ilib.data.ctype);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @param {boolean} sync\r\n * @param {Object|undefined} loadParams\r\n * @param {function(*)|undefined} onLoad\r\n */\r\nisDigit._init = function (sync, loadParams, onLoad) {\r\n\tCType._init(sync, loadParams, onLoad);\r\n};\r\n\r\nmodule.exports = isDigit;\r\n","/*\r\n * ctype.islpha.js - Character type is alphabetic\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends CType.js IString.js ilib.js\r\n\r\n// !data ctype_l\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar CType = require(\"./CType.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * Return whether or not the first character is alphabetic.<p>\r\n * \r\n * @static\r\n * @param {string|IString|number} ch character or code point to examine\r\n * @return {boolean} true if the first character is alphabetic.\r\n */\r\nvar isAlpha = function (ch) {\r\n\tvar num;\r\n\tswitch (typeof(ch)) {\r\n\t\tcase 'number':\r\n\t\t\tnum = ch;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\tnum = IString.toCodePoint(ch, 0);\r\n\t\t\tbreak;\r\n\t\tcase 'undefined':\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\tnum = ch._toCodePoint(0);\r\n\t\t\tbreak;\r\n\t}\r\n\treturn CType._inRange(num, 'Lu', ilib.data.ctype_l) ||\r\n\t\tCType._inRange(num, 'Ll', ilib.data.ctype_l) ||\r\n\t\tCType._inRange(num, 'Lt', ilib.data.ctype_l) ||\r\n\t\tCType._inRange(num, 'Lm', ilib.data.ctype_l) ||\r\n\t\tCType._inRange(num, 'Lo', ilib.data.ctype_l);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @param {boolean} sync\r\n * @param {Object|undefined} loadParams\r\n * @param {function(*)|undefined} onLoad\r\n */\r\nisAlpha._init = function (sync, loadParams, onLoad) {\r\n\tCType._load(\"ctype_l\", sync, loadParams, onLoad);\r\n};\r\n\r\nmodule.exports = isAlpha;","/*\r\n * isPunct.js - Character type is punctuation\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends CType.js IString.js\r\n\r\n// !data ctype_p\r\n\r\nvar ilib = require(\"./ilib.js\");\r\n\r\nvar CType = require(\"./CType.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * Return whether or not the first character is punctuation.<p>\r\n * \r\n * @static\r\n * @param {string|IString|number} ch character or code point to examine\r\n * @return {boolean} true if the first character is punctuation.\r\n */\r\nvar isPunct = function (ch) {\r\n\tvar num;\r\n\tswitch (typeof(ch)) {\r\n\t\tcase 'number':\r\n\t\t\tnum = ch;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\tnum = IString.toCodePoint(ch, 0);\r\n\t\t\tbreak;\r\n\t\tcase 'undefined':\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\tnum = ch._toCodePoint(0);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn CType._inRange(num, 'Pd', ilib.data.ctype_p) ||\r\n\t\tCType._inRange(num, 'Ps', ilib.data.ctype_p) ||\r\n\t\tCType._inRange(num, 'Pe', ilib.data.ctype_p) ||\r\n\t\tCType._inRange(num, 'Pc', ilib.data.ctype_p) ||\r\n\t\tCType._inRange(num, 'Po', ilib.data.ctype_p) ||\r\n\t\tCType._inRange(num, 'Pi', ilib.data.ctype_p) ||\r\n\t\tCType._inRange(num, 'Pf', ilib.data.ctype_p);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @param {boolean} sync\r\n * @param {Object|undefined} loadParams\r\n * @param {function(*)|undefined} onLoad\r\n */\r\nisPunct._init = function (sync, loadParams, onLoad) {\r\n\tCType._load(\"ctype_p\", sync, loadParams, onLoad);\r\n};\r\n\r\nmodule.exports = isPunct;\r\n","/*\r\n * isSpace.js - Character type is space char\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends CType.js IString.js\r\n\r\n// !data ctype ctype_z\r\n\r\nvar ilib = require(\"./ilib.js\");\r\n\r\nvar CType = require(\"./CType.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * Return whether or not the first character is a whitespace character.<p>\r\n * \r\n * @static\r\n * @param {string|IString|number} ch character or code point to examine\r\n * @return {boolean} true if the first character is a whitespace character.\r\n */\r\nvar isSpace = function (ch) {\r\n\tvar num;\r\n\tswitch (typeof(ch)) {\r\n\t\tcase 'number':\r\n\t\t\tnum = ch;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\tnum = IString.toCodePoint(ch, 0);\r\n\t\t\tbreak;\r\n\t\tcase 'undefined':\r\n\t\t\treturn false;\r\n\t\tdefault:\r\n\t\t\tnum = ch._toCodePoint(0);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn CType._inRange(num, 'space', ilib.data.ctype) ||\r\n\t\tCType._inRange(num, 'Zs', ilib.data.ctype_z) ||\r\n\t\tCType._inRange(num, 'Zl', ilib.data.ctype_z) ||\r\n\t\tCType._inRange(num, 'Zp', ilib.data.ctype_z);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @param {boolean} sync\r\n * @param {Object|undefined} loadParams\r\n * @param {function(*)|undefined} onLoad\r\n */\r\nisSpace._init = function (sync, loadParams, onLoad) {\r\n\tCType._load(\"ctype_z\", sync, loadParams, function () {\r\n\t\tCType._init(sync, loadParams, onLoad);\r\n\t});\r\n};\r\n\r\nmodule.exports = isSpace;","/*\r\n * Currency.js - Currency definition\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// !depends ilib.js Utils.js Locale.js LocaleInfo.js\r\n\r\n// !data currency\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar ResBundle = require(\"./ResBundle.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new currency information instance. Instances of this class encode \r\n * information about a particular currency.<p>\r\n * \r\n * Note: that if you are looking to format currency for display, please see\r\n * the number formatting class {NumFmt}. This class only gives information\r\n * about currencies.<p> \r\n * \r\n * The options can contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>locale</i> - specify the locale for this instance\r\n * <li><i>code</i> - find info on a specific currency with the given ISO 4217 code \r\n * <li><i>sign</i> - search for a currency that uses this sign\r\n * <li><i>onLoad</i> - a callback function to call when the currency data is fully \r\n * loaded. When the onLoad option is given, this class will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two. \r\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while.\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * When searching for a currency by its sign, this class cannot guarantee \r\n * that it will return info about a specific currency. The reason is that currency \r\n * signs are sometimes shared between different currencies and the sign is \r\n * therefore ambiguous. If you need a \r\n * guarantee, find the currency using the code instead.<p>\r\n * \r\n * The way this class finds a currency by sign is the following. If the sign is \r\n * unambiguous, then\r\n * the currency is returned. If there are multiple currencies that use the same\r\n * sign, and the current locale uses that sign, then the default currency for\r\n * the current locale is returned. If there are multiple, but the current locale\r\n * does not use that sign, then the currency with the largest circulation is\r\n * returned. For example, if you are in the en-GB locale, and the sign is \"$\",\r\n * then this class will notice that there are multiple currencies with that\r\n * sign (USD, CAD, AUD, HKD, MXP, etc.) Since \"$\" is not used in en-GB, it will \r\n * pick the one with the largest circulation, which in this case is the US Dollar\r\n * (USD).<p>\r\n * \r\n * If neither the code or sign property is set, the currency that is most common \r\n * for the locale\r\n * will be used instead. If the locale is not set, the default locale will be used.\r\n * If the code is given, but it is not found in the list of known currencies, this\r\n * constructor will throw an exception. If the sign is given, but it is not found,\r\n * this constructor will default to the currency for the current locale. If both\r\n * the code and sign properties are given, then the sign property will be ignored\r\n * and only the code property used. If the locale is given, but it is not a known\r\n * locale, this class will default to the default locale instead.<p>\r\n * \r\n * \r\n * @constructor\r\n * @param options {Object} a set of properties to govern how this instance is constructed.\r\n * @throws \"currency xxx is unknown\" when the given currency code is not in the list of \r\n * known currencies. xxx is replaced with the requested code.\r\n */\r\nvar Currency = function (options) {\r\n\tthis.sync = true;\r\n\t\r\n\tif (options) {\r\n\t\tif (options.code) {\r\n\t\t\tthis.code = options.code;\r\n\t\t}\r\n\t\tif (options.locale) {\r\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\t\tif (options.sign) {\r\n\t\t\tthis.sign = options.sign;\r\n\t\t}\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tthis.sync = options.sync;\r\n\t\t}\r\n\t\tif (options.loadParams) {\r\n\t\t\tthis.loadParams = options.loadParams;\r\n\t\t}\r\n\t}\r\n\t\r\n\tthis.locale = this.locale || new Locale();\r\n\tif (typeof(ilib.data.currency) === 'undefined') {\r\n\t\tUtils.loadData({\r\n\t\t\tname: \"currency.json\",\r\n\t\t\tobject: Currency, \r\n\t\t\tlocale: \"-\",\r\n\t\t\tsync: this.sync, \r\n\t\t\tloadParams: this.loadParams, \r\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(currency) {\r\n\t\t\t\tilib.data.currency = currency;\r\n\t\t\t\tthis._loadLocinfo(options && options.onLoad);\r\n\t\t\t})\r\n\t\t});\r\n\t} else {\r\n\t\tthis._loadLocinfo(options && options.onLoad);\r\n\t}\r\n};\r\n\r\n/**\r\n * Return an array of the ids for all ISO 4217 currencies that\r\n * this copy of ilib knows about.\r\n * \r\n * @static\r\n * @return {Array.<string>} an array of currency ids that this copy of ilib knows about.\r\n */\r\nCurrency.getAvailableCurrencies = function() {\r\n\tvar ret = [],\r\n\t\tcur,\r\n\t\tcurrencies = new ResBundle({\r\n\t\t\tname: \"currency\"\r\n\t\t}).getResObj();\r\n\t\r\n\tfor (cur in currencies) {\r\n\t\tif (cur && currencies[cur]) {\r\n\t\t\tret.push(cur);\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn ret;\r\n};\r\n\r\nCurrency.prototype = {\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_loadLocinfo: function(onLoad) {\r\n\t\tnew LocaleInfo(this.locale, {\r\n\t\t\tonLoad: ilib.bind(this, function (li) {\r\n\t\t\t\tvar currInfo;\r\n\t\t\t\t\r\n\t\t\t\tthis.locinfo = li;\r\n\t\t    \tif (this.code) {\r\n\t\t    \t\tcurrInfo = ilib.data.currency[this.code];\r\n\t\t    \t\tif (!currInfo) {\r\n\t\t    \t\t\tthrow \"currency \" + this.code + \" is unknown\";\r\n\t\t    \t\t}\r\n\t\t    \t} else if (this.sign) {\r\n\t\t    \t\tcurrInfo = ilib.data.currency[this.sign]; // maybe it is really a code...\r\n\t\t    \t\tif (typeof(currInfo) !== 'undefined') {\r\n\t\t    \t\t\tthis.code = this.sign;\r\n\t\t    \t\t} else {\r\n\t\t    \t\t\tthis.code = this.locinfo.getCurrency();\r\n\t\t    \t\t\tcurrInfo = ilib.data.currency[this.code];\r\n\t\t    \t\t\tif (currInfo.sign !== this.sign) {\r\n\t\t    \t\t\t\t// current locale does not use the sign, so search for it\r\n\t\t    \t\t\t\tfor (var cur in ilib.data.currency) {\r\n\t\t    \t\t\t\t\tif (cur && ilib.data.currency[cur]) {\r\n\t\t    \t\t\t\t\t\tcurrInfo = ilib.data.currency[cur];\r\n\t\t    \t\t\t\t\t\tif (currInfo.sign === this.sign) {\r\n\t\t    \t\t\t\t\t\t\t// currency data is already ordered so that the currency with the\r\n\t\t    \t\t\t\t\t\t\t// largest circulation is at the beginning, so all we have to do\r\n\t\t    \t\t\t\t\t\t\t// is take the first one in the list that matches\r\n\t\t    \t\t\t\t\t\t\tthis.code = cur;\r\n\t\t    \t\t\t\t\t\t\tbreak;\r\n\t\t    \t\t\t\t\t\t}\r\n\t\t    \t\t\t\t\t}\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t}\r\n\t\t    \t\t}\r\n\t\t    \t}\r\n\t\t    \t\r\n\t\t    \tif (!currInfo || !this.code) {\r\n\t\t    \t\tthis.code = this.locinfo.getCurrency();\r\n\t\t    \t\tcurrInfo = ilib.data.currency[this.code];\r\n\t\t    \t}\r\n\t\t    \t\r\n\t\t    \tthis.name = currInfo.name;\r\n\t\t    \tthis.fractionDigits = currInfo.decimals;\r\n\t\t    \tthis.sign = currInfo.sign;\r\n\t\t    \t\r\n\t\t\t\tif (typeof(onLoad) === 'function') {\r\n\t\t\t\t\tonLoad(this);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the ISO 4217 currency code for this instance.\r\n\t * @return {string} the ISO 4217 currency code for this instance\r\n\t */\r\n\tgetCode: function () {\r\n\t\treturn this.code;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the default number of fraction digits that is typically used\r\n\t * with this type of currency.\r\n\t * @return {number} the number of fraction digits for this currency\r\n\t */\r\n\tgetFractionDigits: function () {\r\n\t\treturn this.fractionDigits;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the sign commonly used to represent this currency.\r\n\t * @return {string} the sign commonly used to represent this currency\r\n\t */\r\n\tgetSign: function () {\r\n\t\treturn this.sign;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the name of the currency in English.\r\n\t * @return {string} the name of the currency in English\r\n\t */\r\n\tgetName: function () {\r\n\t\treturn this.name;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the locale for this currency. If the options to the constructor \r\n\t * included a locale property in order to find the currency that is appropriate\r\n\t * for that locale, then the locale is returned here. If the options did not\r\n\t * include a locale, then this method returns undefined.\r\n\t * @return {Locale} the locale used in the constructor of this instance,\r\n\t * or undefined if no locale was given in the constructor\r\n\t */\r\n\tgetLocale: function () {\r\n\t\treturn this.locale;\r\n\t}\r\n};\r\n\r\nmodule.exports = Currency;\r\n","/*\r\n * TimeZone.js - Definition of a time zone class\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n!depends \r\nilib.js \r\nLocale.js\r\nLocaleInfo.js\r\nUtils.js\r\nMathUtils.js\r\nJSUtils.js\r\nGregRataDie.js\r\nIString.js\r\nCalendarFactory.js\r\n*/\r\n\r\n// !data localeinfo zoneinfo\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\n\r\nvar GregRataDie = require(\"./GregRataDie.js\");\r\nvar CalendarFactory = require(\"./CalendarFactory.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * @class\r\n * Create a time zone instance. \r\n * \r\n * This class reports and transforms\r\n * information about particular time zones.<p>\r\n * \r\n * The options parameter may contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>id</i> - The id of the requested time zone such as \"Europe/London\" or \r\n * \"America/Los_Angeles\". These are taken from the IANA time zone database. (See\r\n * http://www.iana.org/time-zones for more information.) <p>\r\n * \r\n * There is one special \r\n * time zone that is not taken from the IANA database called simply \"local\". In\r\n * this case, this class will attempt to discover the current time zone and\r\n * daylight savings time settings by calling standard Javascript classes to \r\n * determine the offsets from UTC. \r\n * \r\n * <li><i>locale</i> - The locale for this time zone.\r\n * \r\n * <li><i>offset</i> - Choose the time zone based on the offset from UTC given in\r\n * number of minutes (negative is west, positive is east).\r\n * \r\n * <li><i>onLoad</i> - a callback function to call when the data is fully \r\n * loaded. When the onLoad option is given, this class will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the data is loaded, the onLoad function is called with the current \r\n * instance as a parameter. \r\n * \r\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while.\r\n *  \r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * There is currently no way in the ECMAscript\r\n * standard to tell which exact time zone is currently in use. Choosing the\r\n * id \"locale\" or specifying an explicit offset will not give a specific time zone, \r\n * as it is impossible to tell with certainty which zone the offsets \r\n * match.<p>\r\n * \r\n * When the id \"local\" is given or the offset option is specified, this class will\r\n * have the following behaviours:\r\n * <ul>\r\n * <li>The display name will always be given as the RFC822 style, no matter what\r\n * style is requested\r\n * <li>The id will also be returned as the RFC822 style display name\r\n * <li>When the offset is explicitly given, this class will assume the time zone \r\n * does not support daylight savings time, and the offsets will be calculated \r\n * the same way year round.\r\n * <li>When the offset is explicitly given, the inDaylightSavings() method will \r\n * always return false.\r\n * <li>When the id \"local\" is given, this class will attempt to determine the \r\n * daylight savings time settings by examining the offset from UTC on Jan 1\r\n * and June 1 of the current year. If they are different, this class assumes\r\n * that the local time zone uses DST. When the offset for a particular date is\r\n * requested, it will use the built-in Javascript support to determine the \r\n * offset for that date.\r\n * </ul> \r\n * \r\n * If a more specific time zone is \r\n * needed with display names and known start/stop times for DST, use the \"id\" \r\n * property instead to specify the time zone exactly. You can perhaps ask the\r\n * user which time zone they prefer so that your app does not need to guess.<p>\r\n * \r\n * If the id and the offset are both not given, the default time zone for the \r\n * locale is retrieved from\r\n * the locale info. If the locale is not specified, the default locale for the\r\n * library is used.<p>\r\n * \r\n * Because this class was designed for use in web sites, and the vast majority\r\n * of dates and times being formatted are recent date/times, this class is simplified\r\n * by not implementing historical time zones. That is, when governments change the \r\n * time zone rules for a particular zone, only the latest such rule is implemented \r\n * in this class. That means that determining the offset for a date that is prior \r\n * to the last change may give the wrong result. Historical time zone calculations\r\n * may be implemented in a later version of iLib if there is enough demand for it,\r\n * but it would entail a much larger set of time zone data that would have to be\r\n * loaded.  \r\n * \r\n * \r\n * @constructor\r\n * @param {Object} options Options guiding the construction of this time zone instance\r\n */\r\nvar TimeZone = function(options) {\r\n\tthis.sync = true;\r\n\tthis.locale = new Locale();\r\n\tthis.isLocal = false;\r\n\t\r\n\tif (options) {\r\n\t\tif (options.locale) {\r\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.id) {\r\n\t\t\tvar id = options.id.toString();\r\n\t\t\tif (id === 'local') {\r\n\t\t\t\tthis.isLocal = true;\r\n\t\t\t\t\r\n\t\t\t\t// use standard Javascript Date to figure out the time zone offsets\r\n\t\t\t\tvar now = new Date(), \r\n\t\t\t\t\tjan1 = new Date(now.getFullYear(), 0, 1),  // months in std JS Date object are 0-based\r\n\t\t\t\t\tjun1 = new Date(now.getFullYear(), 5, 1);\r\n\t\t\t\t\r\n\t\t\t\t// Javascript's method returns the offset backwards, so we have to\r\n\t\t\t\t// take the negative to get the correct offset\r\n\t\t\t\tthis.offsetJan1 = -jan1.getTimezoneOffset();\r\n\t\t\t\tthis.offsetJun1 = -jun1.getTimezoneOffset();\r\n\t\t\t\t// the offset of the standard time for the time zone is always the one that is closest \r\n\t\t\t\t// to negative infinity of the two, no matter whether you are in the northern or southern \r\n\t\t\t\t// hemisphere, east or west\r\n\t\t\t\tthis.offset = Math.min(this.offsetJan1, this.offsetJun1);\r\n\t\t\t}\r\n\t\t\tthis.id = id;\r\n\t\t} else if (options.offset) {\r\n\t\t\tthis.offset = (typeof(options.offset) === 'string') ? parseInt(options.offset, 10) : options.offset;\r\n\t\t\tthis.id = this.getDisplayName(undefined, undefined);\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tthis.sync = !!options.sync;\r\n\t\t}\r\n\t\t\r\n\t\tthis.loadParams = options.loadParams;\r\n\t\tthis.onLoad = options.onLoad;\r\n\t}\r\n\r\n\t//console.log(\"timezone: locale is \" + this.locale);\r\n\t\r\n\tif (!this.id) {\r\n\t\tnew LocaleInfo(this.locale, {\r\n\t\t\tsync: this.sync,\r\n\t\t\tonLoad: ilib.bind(this, function (li) {\r\n\t\t\t\tthis.id = li.getTimeZone() || \"Etc/UTC\";\r\n\t\t\t\tthis._loadtzdata();\r\n\t\t\t})\r\n\t\t});\r\n\t} else {\r\n\t\tthis._loadtzdata();\r\n\t}\r\n\r\n\t//console.log(\"localeinfo is: \" + JSON.stringify(this.locinfo));\r\n\t//console.log(\"id is: \" + JSON.stringify(this.id));\r\n};\r\n\r\n/*\r\n * Explanation of the compressed time zone info properties.\r\n * {\r\n *     \"o\": \"8:0\",      // offset from UTC\r\n *     \"f\": \"W{c}T\",    // standard abbreviation. For time zones that observe DST, the {c} replacement is replaced with the \r\n *                      // letter in the e.c or s.c properties below \r\n *     \"e\": {           // info about the end of DST\r\n *         \"j\": 78322.5 // Julian day when the transition happens. Either specify the \"j\" property or all of the \"m\", \"r\", and \r\n *                      // \"t\" properties, but not both sets.\r\n *         \"m\": 3,      // month that it ends\r\n *         \"r\": \"l0\",   // rule for the day it ends \"l\" = \"last\", numbers are Sun=0 through Sat=6. Other syntax is \"0>7\". \r\n *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=\r\n *         \"t\": \"2:0\",  // time of day that the DST turns off, hours:minutes\r\n *         \"c\": \"S\"     // character to replace into the abbreviation for standard time \r\n *     },\r\n *     \"s\": {           // info about the start of DST\r\n *         \"j\": 78189.5 // Julian day when the transition happens. Either specify the \"j\" property or all of the \"m\", \"r\", and \r\n *                      // \"t\" properties, but not both sets.\r\n *         \"m\": 10,     // month that it starts\r\n *         \"r\": \"l0\",   // rule for the day it starts \"l\" = \"last\", numbers are Sun=0 through Sat=6. Other syntax is \"0>7\".\r\n *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=\r\n *         \"t\": \"2:0\",  // time of day that the DST turns on, hours:minutes\r\n *         \"v\": \"1:0\",  // amount of time saved in hours:minutes\r\n *         \"c\": \"D\"     // character to replace into the abbreviation for daylight time\r\n *     },\r\n *     \"c\": \"AU\",       // ISO code for the country that contains this time zone\r\n *     \"n\": \"W. Australia {c} Time\"\r\n *                      // long English name of the zone. The {c} replacement is for the word \"Standard\" or \"Daylight\" as appropriate\r\n * }\r\n */\r\nTimeZone.prototype._loadtzdata = function () {\r\n\t// console.log(\"id is: \" + JSON.stringify(this.id));\r\n\t// console.log(\"zoneinfo is: \" + JSON.stringify(ilib.data.zoneinfo[this.id]));\r\n\tif (!ilib.data.zoneinfo[this.id] && typeof(this.offset) === 'undefined') {\r\n\t\tUtils.loadData({\r\n\t\t\tobject: TimeZone, \r\n\t\t\tnonlocale: true,\t// locale independent \r\n\t\t\tname: \"zoneinfo/\" + this.id + \".json\", \r\n\t\t\tsync: this.sync, \r\n\t\t\tloadParams: this.loadParams, \r\n\t\t\tcallback: ilib.bind(this, function (tzdata) {\r\n\t\t\t\tif (tzdata && !JSUtils.isEmpty(tzdata)) {\r\n\t\t\t\t\tilib.data.zoneinfo[this.id] = tzdata;\r\n\t\t\t\t}\r\n\t\t\t\tthis._initZone();\r\n\t\t\t})\r\n\t\t});\r\n\t} else {\r\n\t\tthis._initZone();\r\n\t}\r\n};\r\n\r\nTimeZone.prototype._initZone = function() {\r\n\t/** \r\n\t * @private\r\n\t * @type {{o:string,f:string,e:Object.<{m:number,r:string,t:string,z:string}>,s:Object.<{m:number,r:string,t:string,z:string,v:string,c:string}>,c:string,n:string}} \r\n\t */\r\n\tthis.zone = ilib.data.zoneinfo[this.id];\r\n\tif (!this.zone && typeof(this.offset) === 'undefined') {\r\n\t\tthis.id = \"Etc/UTC\";\r\n\t\tthis.zone = ilib.data.zoneinfo[this.id];\r\n\t}\r\n\t\r\n\tthis._calcDSTSavings();\r\n\t\r\n\tif (typeof(this.offset) === 'undefined' && this.zone.o) {\r\n\t\tvar offsetParts = this._offsetStringToObj(this.zone.o);\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * @type {number} raw offset from UTC without DST, in minutes\r\n\t\t */\r\n\t\tthis.offset = (Math.abs(offsetParts.h || 0) * 60 + (offsetParts.m || 0)) * MathUtils.signum(offsetParts.h || 0);\r\n\t}\r\n\t\r\n\tif (this.onLoad && typeof(this.onLoad) === 'function') {\r\n\t\tthis.onLoad(this);\r\n\t}\r\n};\r\n\r\n/** @private */\r\nTimeZone._marshallIds = function (country, sync, callback) {\r\n\tvar tz, ids = [];\r\n\t\r\n\tif (!country) {\r\n\t\t// local is a special zone meaning \"the local time zone according to the JS engine we are running upon\"\r\n\t\tids.push(\"local\");\r\n\t\tfor (tz in ilib.data.timezones) {\r\n\t\t\tif (ilib.data.timezones[tz]) {\r\n\t\t\t\tids.push(ilib.data.timezones[tz]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (typeof(callback) === 'function') {\r\n\t\t\tcallback(ids);\r\n\t\t}\r\n\t} else {\r\n\t\tif (!ilib.data.zoneinfo.zonetab) {\r\n\t\t\tUtils.loadData({\r\n\t\t\t\tobject: TimeZone, \r\n\t\t\t\tnonlocale: true,\t// locale independent \r\n\t\t\t\tname: \"zoneinfo/zonetab.json\", \r\n\t\t\t\tsync: sync, \r\n\t\t\t\tcallback: ilib.bind(this, function (tzdata) {\r\n\t\t\t\t\tif (tzdata) {\r\n\t\t\t\t\t\tilib.data.zoneinfo.zonetab = tzdata;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tids = ilib.data.zoneinfo.zonetab[country];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (typeof(callback) === 'function') {\r\n\t\t\t\t\t\tcallback(ids);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tids = ilib.data.zoneinfo.zonetab[country];\r\n\t\t\tif (typeof(callback) === 'function') {\r\n\t\t\t\tcallback(ids);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn ids;\r\n};\r\n\r\n/**\r\n * Return an array of available zone ids that the constructor knows about.\r\n * The country parameter is optional. If it is not given, all time zones will\r\n * be returned. If it specifies a country code, then only time zones for that\r\n * country will be returned.\r\n * \r\n * @param {string|undefined} country country code for which time zones are being sought\r\n * @param {boolean} sync whether to find the available ids synchronously (true) or asynchronously (false)\r\n * @param {function(Array.<string>)} onLoad callback function to call when the data is finished loading\r\n * @return {Array.<string>} an array of zone id strings\r\n */\r\nTimeZone.getAvailableIds = function (country, sync, onLoad) {\r\n\tvar tz, ids = [];\r\n\t\r\n\tif (typeof(sync) !== 'boolean') {\r\n\t\tsync = true;\r\n\t}\r\n\t\r\n\tif (ilib.data.timezones.length === 0) {\r\n\t\tif (typeof(ilib._load) !== 'undefined' && typeof(ilib._load.listAvailableFiles) === 'function') {\r\n\t\t\tilib._load.listAvailableFiles(sync, function(hash) {\r\n\t\t\t\tfor (var dir in hash) {\r\n\t\t\t\t\tvar files = hash[dir];\r\n\t\t\t\t\tif (ilib.isArray(files)) {\r\n\t\t\t\t\t\tfiles.forEach(function (filename) {\r\n\t\t\t\t\t\t\tif (filename && filename.match(/^zoneinfo/)) {\r\n\t\t\t\t\t\t\t\tilib.data.timezones.push(filename.replace(/^zoneinfo\\//, \"\").replace(/\\.json$/, \"\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tids = TimeZone._marshallIds(country, sync, onLoad);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tfor (tz in ilib.data.zoneinfo) {\r\n\t\t\t\tif (ilib.data.zoneinfo[tz]) {\r\n\t\t\t\t\tilib.data.timezones.push(tz);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tids = TimeZone._marshallIds(country, sync, onLoad);\r\n\t\t}\r\n\t} else {\r\n\t\tids = TimeZone._marshallIds(country, sync, onLoad);\r\n\t}\r\n\t\r\n\treturn ids;\r\n};\r\n\r\n/**\r\n * Return the id used to uniquely identify this time zone.\r\n * @return {string} a unique id for this time zone\r\n */\r\nTimeZone.prototype.getId = function () {\r\n\treturn this.id.toString();\r\n};\r\n\r\n/**\r\n * Return the abbreviation that is used for the current time zone on the given date.\r\n * The date may be in DST or during standard time, and many zone names have different\r\n * abbreviations depending on whether or not the date is falls within DST.<p>\r\n * \r\n * There are two styles that are supported:\r\n * \r\n * <ol>\r\n * <li>standard - returns the 3 to 5 letter abbreviation of the time zone name such \r\n * as \"CET\" for \"Central European Time\" or \"PDT\" for \"Pacific Daylight Time\"\r\n * <li>rfc822 - returns an RFC 822 style time zone specifier, which specifies more\r\n * explicitly what the offset is from UTC\r\n * <li>long - returns the long name of the zone in English\r\n * </ol>\r\n *  \r\n * @param {IDate=} date a date to determine if it is in daylight time or standard time\r\n * @param {string=} style one of \"standard\" or \"rfc822\". Default if not specified is \"standard\"\r\n * @return {string} the name of the time zone, abbreviated according to the style \r\n */\r\nTimeZone.prototype.getDisplayName = function (date, style) {\r\n\tstyle = (this.isLocal || typeof(this.zone) === 'undefined') ? \"rfc822\" : (style || \"standard\");\r\n\tswitch (style) {\r\n\t\tdefault:\r\n\t\tcase 'standard':\r\n\t\t\tif (this.zone.f && this.zone.f !== \"zzz\") {\r\n\t\t\t\tif (this.zone.f.indexOf(\"{c}\") !== -1) {\r\n\t\t\t\t\tvar letter = \"\";\r\n\t\t\t\t\tletter = this.inDaylightTime(date) ? this.zone.s && this.zone.s.c : this.zone.e && this.zone.e.c; \r\n\t\t\t\t\tvar temp = new IString(this.zone.f);\r\n\t\t\t\t\treturn temp.format({c: letter || \"\"});\r\n\t\t\t\t}\r\n\t\t\t\treturn this.zone.f;\r\n\t\t\t} \r\n\t\t\tvar temp = \"GMT\" + this.zone.o;\r\n\t\t\tif (this.inDaylightTime(date)) {\r\n\t\t\t\ttemp += \"+\" + this.zone.s.v;\r\n\t\t\t}\r\n\t\t\treturn temp;\r\n\t\t\tbreak;\r\n\t\tcase 'rfc822':\r\n\t\t\tvar offset = this.getOffset(date), // includes the DST if applicable\r\n\t\t\t\tret = \"UTC\",\r\n\t\t\t\thour = offset.h || 0,\r\n\t\t\t\tminute = offset.m || 0;\r\n\t\t\t\r\n\t\t\tif (hour !== 0) {\r\n\t\t\t\tret += (hour > 0) ? \"+\" : \"-\";\r\n\t\t\t\tif (Math.abs(hour) < 10) {\r\n\t\t\t\t\tret += \"0\";\r\n\t\t\t\t}\r\n\t\t\t\tret += (hour < 0) ? -hour : hour;\r\n\t\t\t\tif (minute < 10) {\r\n\t\t\t\t\tret += \"0\";\r\n\t\t\t\t}\r\n\t\t\t\tret += minute;\r\n\t\t\t}\r\n\t\t\treturn ret; \r\n\t\tcase 'long':\r\n\t\t\tif (this.zone.n) {\r\n\t\t\t\tif (this.zone.n.indexOf(\"{c}\") !== -1) {\r\n\t\t\t\t\tvar str = this.inDaylightTime(date) ? \"Daylight\" : \"Standard\"; \r\n\t\t\t\t\tvar temp = new IString(this.zone.n);\r\n\t\t\t\t\treturn temp.format({c: str || \"\"});\r\n\t\t\t\t}\r\n\t\t\t\treturn this.zone.n;\r\n\t\t\t}\r\n\t\t\tvar temp = \"GMT\" + this.zone.o;\r\n\t\t\tif (this.inDaylightTime(date)) {\r\n\t\t\t\ttemp += \"+\" + this.zone.s.v;\r\n\t\t\t}\r\n\t\t\treturn temp;\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\n/**\r\n * Convert the offset string to an object with an h, m, and possibly s property\r\n * to indicate the hours, minutes, and seconds.\r\n * \r\n * @private\r\n * @param {string} str the offset string to convert to an object\r\n * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset for the zone at \r\n * the given date/time, in hours, minutes, and seconds\r\n */\r\nTimeZone.prototype._offsetStringToObj = function (str) {\r\n\tvar offsetParts = (typeof(str) === 'string') ? str.split(\":\") : [],\r\n\t\tret = {h:0},\r\n\t\ttemp;\r\n\t\r\n\tif (offsetParts.length > 0) {\r\n\t\tret.h = parseInt(offsetParts[0], 10);\r\n\t\tif (offsetParts.length > 1) {\r\n\t\t\ttemp = parseInt(offsetParts[1], 10);\r\n\t\t\tif (temp) {\r\n\t\t\t\tret.m = temp;\r\n\t\t\t}\r\n\t\t\tif (offsetParts.length > 2) {\r\n\t\t\t\ttemp = parseInt(offsetParts[2], 10);\r\n\t\t\t\tif (temp) {\r\n\t\t\t\t\tret.s = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Returns the offset of this time zone from UTC at the given date/time. If daylight saving \r\n * time is in effect at the given date/time, this method will return the offset value \r\n * adjusted by the amount of daylight saving.\r\n * @param {IDate=} date the date for which the offset is needed\r\n * @return {Object.<{h:number,m:number}>} an object giving the offset for the zone at \r\n * the given date/time, in hours, minutes, and seconds  \r\n */\r\nTimeZone.prototype.getOffset = function (date) {\r\n\tif (!date) {\r\n\t\treturn this.getRawOffset();\r\n\t}\r\n\tvar offset = this.getOffsetMillis(date)/60000;\r\n\t\r\n\tvar hours = MathUtils.down(offset/60),\r\n\t\tminutes = Math.abs(offset) - Math.abs(hours)*60;\r\n\r\n\tvar ret = {\r\n\t\th: hours\r\n\t};\r\n\tif (minutes != 0) {\r\n\t\tret.m = minutes;\r\n\t}\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Returns the offset of this time zone from UTC at the given date/time expressed in \r\n * milliseconds. If daylight saving \r\n * time is in effect at the given date/time, this method will return the offset value \r\n * adjusted by the amount of daylight saving. Negative numbers indicate offsets west\r\n * of UTC and conversely, positive numbers indicate offset east of UTC.\r\n *  \r\n * @param {IDate=} date the date for which the offset is needed, or null for the\r\n * present date\r\n * @return {number} the number of milliseconds of offset from UTC that the given date is\r\n */\r\nTimeZone.prototype.getOffsetMillis = function (date) {\r\n\tvar ret;\r\n\t\r\n\t// check if the dst property is defined -- the intrinsic JS Date object doesn't work so\r\n\t// well if we are in the overlap time at the end of DST\r\n\tif (this.isLocal && typeof(date.dst) === 'undefined') {\r\n\t\tvar d = (!date) ? new Date() : new Date(date.getTimeExtended());\r\n\t\treturn -d.getTimezoneOffset() * 60000;\r\n\t} \r\n\t\r\n\tret = this.offset;\r\n\t\r\n\tif (date && this.inDaylightTime(date)) {\r\n\t\tret += this.dstSavings;\r\n\t}\r\n\t\r\n\treturn ret * 60000;\r\n};\r\n\r\n/**\r\n * Return the offset in milliseconds when the date has an RD number in wall\r\n * time rather than in UTC time.\r\n * @protected\r\n * @param date the date to check in wall time\r\n * @returns {number} the number of milliseconds of offset from UTC that the given date is\r\n */\r\nTimeZone.prototype._getOffsetMillisWallTime = function (date) {\r\n\tvar ret;\r\n\t\r\n\tret = this.offset;\r\n\t\r\n\tif (date && this.inDaylightTime(date, true)) {\r\n\t\tret += this.dstSavings;\r\n\t}\r\n\t\r\n\treturn ret * 60000;\r\n};\r\n\r\n/**\r\n * Returns the offset of this time zone from UTC at the given date/time. If daylight saving \r\n * time is in effect at the given date/time, this method will return the offset value \r\n * adjusted by the amount of daylight saving.\r\n * @param {IDate=} date the date for which the offset is needed\r\n * @return {string} the offset for the zone at the given date/time as a string in the \r\n * format \"h:m:s\" \r\n */\r\nTimeZone.prototype.getOffsetStr = function (date) {\r\n\tvar offset = this.getOffset(date),\r\n\t\tret;\r\n\t\r\n\tret = offset.h;\r\n\tif (typeof(offset.m) !== 'undefined') {\r\n\t\tret += \":\" + offset.m;\r\n\t\tif (typeof(offset.s) !== 'undefined') {\r\n\t\t\tret += \":\" + offset.s;\r\n\t\t}\r\n\t} else {\r\n\t\tret += \":0\";\r\n\t}\r\n\t\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Gets the offset from UTC for this time zone.\r\n * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset from \r\n * UTC for this time zone, in hours, minutes, and seconds \r\n */\r\nTimeZone.prototype.getRawOffset = function () {\r\n\tvar hours = MathUtils.down(this.offset/60),\r\n\t\tminutes = Math.abs(this.offset) - Math.abs(hours)*60;\r\n\t\r\n\tvar ret = {\r\n\t\th: hours\r\n\t};\r\n\tif (minutes != 0) {\r\n\t\tret.m = minutes;\r\n\t}\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Gets the offset from UTC for this time zone expressed in milliseconds. Negative numbers\r\n * indicate zones west of UTC, and positive numbers indicate zones east of UTC.\r\n * \r\n * @return {number} an number giving the offset from \r\n * UTC for this time zone in milliseconds \r\n */\r\nTimeZone.prototype.getRawOffsetMillis = function () {\r\n\treturn this.offset * 60000;\r\n};\r\n\r\n/**\r\n * Gets the offset from UTC for this time zone without DST savings.\r\n * @return {string} the offset from UTC for this time zone, in the format \"h:m:s\" \r\n */\r\nTimeZone.prototype.getRawOffsetStr = function () {\r\n\tvar off = this.getRawOffset();\r\n\treturn off.h + \":\" + (off.m || \"0\");\r\n};\r\n\r\n/**\r\n * Return the amount of time in hours:minutes that the clock is advanced during\r\n * daylight savings time.\r\n * @return {Object.<{h:number,m:number,s:number}>} the amount of time that the \r\n * clock advances for DST in hours, minutes, and seconds \r\n */\r\nTimeZone.prototype.getDSTSavings = function () {\r\n\tif (this.isLocal) {\r\n\t\t// take the absolute because the difference in the offsets may be positive or\r\n\t\t// negative, depending on the hemisphere\r\n\t\tvar savings = Math.abs(this.offsetJan1 - this.offsetJun1);\r\n\t\tvar hours = MathUtils.down(savings/60),\r\n\t\t\tminutes = savings - hours*60;\r\n\t\treturn {\r\n\t\t\th: hours,\r\n\t\t\tm: minutes\r\n\t\t};\r\n\t} else if (this.zone && this.zone.s) {\r\n\t\treturn this._offsetStringToObj(this.zone.s.v);\t// this.zone.start.savings\r\n\t}\r\n\treturn {h:0};\r\n};\r\n\r\n/**\r\n * Return the amount of time in hours:minutes that the clock is advanced during\r\n * daylight savings time.\r\n * @return {string} the amount of time that the clock advances for DST in the\r\n * format \"h:m:s\"\r\n */\r\nTimeZone.prototype.getDSTSavingsStr = function () {\r\n\tif (this.isLocal) {\r\n\t\tvar savings = this.getDSTSavings();\r\n\t\treturn savings.h + \":\" + savings.m;\r\n\t} else if (typeof(this.offset) !== 'undefined' && this.zone && this.zone.s) {\r\n\t\treturn this.zone.s.v;\t// this.zone.start.savings\r\n\t}\r\n\treturn \"0:0\";\r\n};\r\n\r\n/**\r\n * return the rd of the start of DST transition for the given year\r\n * @protected\r\n * @param {Object} rule set of rules\r\n * @param {number} year year to check\r\n * @return {number} the rd of the start of DST for the year\r\n */\r\nTimeZone.prototype._calcRuleStart = function (rule, year) {\r\n\tvar type = \"=\", \r\n\t\tweekday = 0, \r\n\t\tday, \r\n\t\trefDay, \r\n\t\tcal, \r\n\t\thour = 0, \r\n\t\tminute = 0, \r\n\t\tsecond = 0,\r\n\t\ttime,\r\n\t\ti;\r\n\t\r\n\tif (typeof(rule.j) !== 'undefined') {\r\n\t\trefDay = new GregRataDie({\r\n\t\t\tjulianday: rule.j\r\n\t\t});\r\n\t} else {\r\n\t\tif (rule.r.charAt(0) == 'l' || rule.r.charAt(0) == 'f') {\r\n\t\t\tcal = CalendarFactory({type: \"gregorian\"});\r\n\t\t\ttype = rule.r.charAt(0);\r\n\t\t\tweekday = parseInt(rule.r.substring(1), 10);\r\n\t\t\tday = (type === 'l') ? cal.getMonLength(rule.m, year) : 1;\r\n\t\t\t//console.log(\"_calcRuleStart: Calculating the \" + \r\n\t\t\t//\t\t(rule.r.charAt(0) == 'f' ? \"first \" : \"last \") + weekday + \r\n\t\t\t//\t\t\" of month \" + rule.m);\r\n\t\t} else {\r\n\t\t\ti = rule.r.indexOf('<');\r\n\t\t\tif (i == -1) {\r\n\t\t\t\ti = rule.r.indexOf('>');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (i != -1) {\r\n\t\t\t\ttype = rule.r.charAt(i);\r\n\t\t\t\tweekday = parseInt(rule.r.substring(0, i), 10);\r\n\t\t\t\tday = parseInt(rule.r.substring(i+1), 10); \r\n\t\t\t\t//console.log(\"_calcRuleStart: Calculating the \" + weekday + \r\n\t\t\t\t//\t\ttype + day + \" of month \" + rule.m);\r\n\t\t\t} else {\r\n\t\t\t\tday = parseInt(rule.r, 10);\r\n\t\t\t\t//console.log(\"_calcRuleStart: Calculating the \" + day + \" of month \" + rule.m);\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tif (rule.t) {\r\n\t\t\ttime = rule.t.split(\":\");\r\n\t\t\thour = parseInt(time[0], 10);\r\n\t\t\tif (time.length > 1) {\r\n\t\t\t\tminute = parseInt(time[1], 10);\r\n\t\t\t\tif (time.length > 2) {\r\n\t\t\t\t\tsecond = parseInt(time[2], 10);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//console.log(\"calculating rd of \" + year + \"/\" + rule.m + \"/\" + day);\r\n\t\trefDay = new GregRataDie({\r\n\t\t\tyear: year, \r\n\t\t\tmonth: rule.m, \r\n\t\t\tday: day, \r\n\t\t\thour: hour, \r\n\t\t\tminute: minute, \r\n\t\t\tsecond: second\r\n\t\t});\r\n\t}\r\n\t//console.log(\"refDay is \" + JSON.stringify(refDay));\r\n\tvar d = refDay.getRataDie();\r\n\t\r\n\tswitch (type) {\r\n\t\tcase 'l':\r\n\t\tcase '<':\r\n\t\t\t//console.log(\"returning \" + refDay.onOrBefore(rd, weekday));\r\n\t\t\td = refDay.onOrBefore(weekday); \r\n\t\t\tbreak;\r\n\t\tcase 'f':\r\n\t\tcase '>':\r\n\t\t\t//console.log(\"returning \" + refDay.onOrAfterRd(rd, weekday));\r\n\t\t\td = refDay.onOrAfter(weekday); \r\n\t\t\tbreak;\r\n\t}\r\n\treturn d;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTimeZone.prototype._calcDSTSavings = function () {\r\n\tvar saveParts = this.getDSTSavings();\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @type {number} savings in minutes when DST is in effect \r\n\t */\r\n\tthis.dstSavings = (Math.abs(saveParts.h || 0) * 60 + (saveParts.m || 0)) * MathUtils.signum(saveParts.h || 0);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTimeZone.prototype._getDSTStartRule = function (year) {\r\n\t// TODO: update this when historic/future zones are supported\r\n\treturn this.zone.s;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTimeZone.prototype._getDSTEndRule = function (year) {\r\n\t// TODO: update this when historic/future zones are supported\r\n\treturn this.zone.e;\r\n};\r\n\r\n/**\r\n * Returns whether or not the given date is in daylight saving time for the current\r\n * zone. Note that daylight savings time is observed for the summer. Because\r\n * the seasons are reversed, daylight savings time in the southern hemisphere usually\r\n * runs from the end of the year through New Years into the first few months of the\r\n * next year. This method will correctly calculate the start and end of DST for any\r\n * location.\r\n * \r\n * @param {IDate=} date a date for which the info about daylight time is being sought,\r\n * or undefined to tell whether we are currently in daylight savings time\r\n * @param {boolean=} wallTime if true, then the given date is in wall time. If false or\r\n * undefined, it is in the usual UTC time.\r\n * @return {boolean} true if the given date is in DST for the current zone, and false\r\n * otherwise.\r\n */\r\nTimeZone.prototype.inDaylightTime = function (date, wallTime) {\r\n\tvar rd, startRd, endRd, year;\r\n\r\n\tif (this.isLocal) {\r\n\t\t// check if the dst property is defined -- the intrinsic JS Date object doesn't work so\r\n\t\t// well if we are in the overlap time at the end of DST, so we have to work around that\r\n\t\t// problem by adding in the savings ourselves\r\n\t\tvar offset = 0;\r\n\t\tif (typeof(date.dst) !== 'undefined' && !date.dst) {\r\n\t\t\toffset = this.dstSavings * 60000;\r\n\t\t}\r\n\t\t\r\n\t\tvar d = new Date(date ? date.getTimeExtended() + offset: undefined);\r\n\t\t// the DST offset is always the one that is closest to positive infinity, no matter \r\n\t\t// if you are in the northern or southern hemisphere, east or west\r\n\t\tvar dst = Math.max(this.offsetJan1, this.offsetJun1);\r\n\t\treturn (-d.getTimezoneOffset() === dst);\r\n\t}\r\n\t\r\n\tif (!date || !date.cal || date.cal.type !== \"gregorian\") {\r\n\t\t// convert to Gregorian so that we can tell if it is in DST or not\r\n\t\tvar time = date && typeof(date.getTimeExtended) === 'function' ? date.getTimeExtended() : undefined;\r\n\t\trd = new GregRataDie({unixtime: time}).getRataDie();\r\n\t\tyear = new Date(time).getUTCFullYear();\r\n\t} else {\r\n\t\trd = date.rd.getRataDie();\r\n\t\tyear = date.year;\r\n\t}\r\n\t// rd should be a Gregorian RD number now, in UTC\r\n\t\r\n\t// if we aren't using daylight time in this zone for the given year, then we are \r\n\t// not in daylight time\r\n\tif (!this.useDaylightTime(year)) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t// these calculate the start/end in local wall time\r\n\tvar startrule = this._getDSTStartRule(year);\r\n\tvar endrule = this._getDSTEndRule(year);\r\n\tstartRd = this._calcRuleStart(startrule, year);\r\n\tendRd = this._calcRuleStart(endrule, year);\r\n\t\r\n\tif (wallTime) {\r\n\t\t// rd is in wall time, so we have to make sure to skip the missing time\r\n\t\t// at the start of DST when standard time ends and daylight time begins\r\n\t\tstartRd += this.dstSavings/1440;\r\n\t} else {\r\n\t\t// rd is in UTC, so we have to convert the start/end to UTC time so \r\n\t\t// that they can be compared directly to the UTC rd number of the date\r\n\t\t\r\n\t\t// when DST starts, time is standard time already, so we only have\r\n\t\t// to subtract the offset to get to UTC and not worry about the DST savings\r\n\t\tstartRd -= this.offset/1440;  \r\n\t\t\r\n\t\t// when DST ends, time is in daylight time already, so we have to\r\n\t\t// subtract the DST savings to get back to standard time, then the\r\n\t\t// offset to get to UTC\r\n\t\tendRd -= (this.offset + this.dstSavings)/1440;\r\n\t}\r\n\t\r\n\t// In the northern hemisphere, the start comes first some time in spring (Feb-Apr), \r\n\t// then the end some time in the fall (Sept-Nov). In the southern\r\n\t// hemisphere, it is the other way around because the seasons are reversed. Standard\r\n\t// time is still in the winter, but the winter months are May-Aug, and daylight \r\n\t// savings time usually starts Aug-Oct of one year and runs through Mar-May of the \r\n\t// next year.\r\n\tif (rd < endRd && endRd - rd <= this.dstSavings/1440 && typeof(date.dst) === 'boolean') {\r\n\t\t// take care of the magic overlap time at the end of DST\r\n\t\treturn date.dst;\r\n\t}\r\n\tif (startRd < endRd) {\r\n\t\t// northern hemisphere\r\n\t\treturn (rd >= startRd && rd < endRd) ? true : false;\r\n\t} \r\n\t// southern hemisphere\r\n\treturn (rd >= startRd || rd < endRd) ? true : false;\r\n};\r\n\r\n/**\r\n * Returns true if this time zone switches to daylight savings time at some point\r\n * in the year, and false otherwise.\r\n * @param {number} year Whether or not the time zone uses daylight time in the given year. If\r\n * this parameter is not given, the current year is assumed.\r\n * @return {boolean} true if the time zone uses daylight savings time\r\n */\r\nTimeZone.prototype.useDaylightTime = function (year) {\r\n\t\r\n\t// this zone uses daylight savings time iff there is a rule defining when to start\r\n\t// and when to stop the DST\r\n\treturn (this.isLocal && this.offsetJan1 !== this.offsetJun1) ||\r\n\t\t(typeof(this.zone) !== 'undefined' && \r\n\t\ttypeof(this.zone.s) !== 'undefined' && \r\n\t\ttypeof(this.zone.e) !== 'undefined');\r\n};\r\n\r\n/**\r\n * Returns the ISO 3166 code of the country for which this time zone is defined.\r\n * @return {string} the ISO 3166 code of the country for this zone\r\n */\r\nTimeZone.prototype.getCountry = function () {\r\n\treturn this.zone.c;\r\n};\r\n\r\nmodule.exports = TimeZone;\r\n","/*\r\n * CopticRataDie.js - Represent an RD date in the Coptic calendar\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nCopticCal.js \r\nJSUtils.js\r\nEthiopicRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\nvar CopticCal = require(\"./CopticCal.js\");\r\nvar EthiopicRataDie = require(\"./EthiopicRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Coptic RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\r\n * \r\n * <li><i>day</i> - 1 to 30\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Coptic date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @extends EthiopicRataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic RD date\r\n */\r\nvar CopticRataDie = function(params) {\r\n\tthis.cal = params && params.cal || new CopticCal();\r\n\tthis.rd = undefined;\r\n\t/**\r\n\t * The difference between the zero Julian day and the first Coptic date\r\n\t * of Friday, August 29, 284 CE Julian at 7:00am UTC. \r\n\t * @private\r\n\t * @const\r\n\t * @type number\r\n\t */\r\n\tthis.epoch = 1825028.5;\r\n\r\n\tvar tmp = {};\r\n\tif (params) {\r\n\t\tJSUtils.shallowCopy(params, tmp);\r\n\t}\r\n\ttmp.cal = this.cal; // override the cal parameter that may be passed in\r\n\tEthiopicRataDie.call(this, tmp);\r\n};\r\n\r\nCopticRataDie.prototype = new EthiopicRataDie();\r\nCopticRataDie.prototype.parent = EthiopicRataDie;\r\nCopticRataDie.prototype.constructor = CopticRataDie;\r\n\r\nmodule.exports = CopticRataDie;","/*\r\n * Address.js - Represent a mailing address\r\n * \r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*globals console RegExp */\r\n\r\n/* !depends \r\nilib.js\r\nUtils.js\r\nJSUtils.js\r\nLocale.js \r\nisIdeo.js \r\nisAscii.js\r\nisDigit.js\r\nIString.js\r\n*/\r\n\r\n// !data address countries nativecountries ctrynames\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\nvar Locale = require(\"./Locale.js\");\r\nvar CType = require(\"./CType.js\");\r\nvar isIdeo = require(\"./isIdeo.js\");\r\nvar isAscii = require(\"./isAscii.js\");\r\nvar isDigit = require(\"./isDigit.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new Address instance and parse a physical address.<p>\r\n * \r\n * This function parses a physical address written in a free-form string. \r\n * It returns an object with a number of properties from the list below \r\n * that it may have extracted from that address.<p>\r\n * \r\n * The following is a list of properties that the algorithm will return:<p>\r\n * \r\n * <ul>\r\n * <li><i>streetAddress</i>: The street address, including house numbers and all.\r\n * <li><i>locality</i>: The locality of this address (usually a city or town). \r\n * <li><i>region</i>: The region where the locality is located. In the US, this\r\n * corresponds to states. In other countries, this may be provinces,\r\n * cantons, prefectures, etc. In some smaller countries, there are no\r\n * such divisions.\r\n * <li><i>postalCode</i>: Country-specific code for expediting mail. In the US, \r\n * this is the zip code.\r\n * <li><i>country</i>: The country of the address.\r\n * <li><i>countryCode</i>: The ISO 3166 2-letter region code for the destination\r\n * country in this address.\r\n * </ul> \r\n * \r\n * The above properties will not necessarily appear in the instance. For \r\n * any individual property, if the free-form address does not contain \r\n * that property or it cannot be parsed out, the it is left out.<p>\r\n * \r\n * The options parameter may contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>locale</i> - locale or localeSpec to use to parse the address. If not \r\n * specified, this function will use the current ilib locale\r\n * \r\n * <li><i>onLoad</i> - a callback function to call when the address info for the\r\n * locale is fully loaded and the address has been parsed. When the onLoad \r\n * option is given, the address object \r\n * will attempt to load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two. \r\n * \r\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while. \r\n *\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * When an address cannot be parsed properly, the entire address will be placed\r\n * into the streetAddress property.<p>\r\n * \r\n * When the freeformAddress is another Address, this will act like a copy\r\n * constructor.<p>\r\n * \r\n * \r\n * @constructor\r\n * @param {string|Address} freeformAddress free-form address to parse, or a\r\n * javascript object containing the fields\r\n * @param {Object} options options to the parser\r\n */\r\nvar Address = function (freeformAddress, options) {\r\n\tvar address;\r\n\r\n\tif (!freeformAddress) {\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tthis.sync = true;\r\n\tthis.loadParams = {};\r\n\t\r\n\tif (options) {\r\n\t\tif (options.locale) {\r\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tthis.sync = (options.sync == true);\r\n\t\t}\r\n\t\t\r\n\t\tif (options.loadParams) {\r\n\t\t\tthis.loadParams = options.loadParams;\r\n\t\t}\r\n\t}\r\n\r\n\tthis.locale = this.locale || new Locale();\r\n\t// initialize from an already parsed object\r\n\tif (typeof(freeformAddress) === 'object') {\r\n\t\t/**\r\n\t\t * The street address, including house numbers and all.\r\n\t\t * @expose\r\n\t\t * @type {string|undefined} \r\n\t\t */\r\n\t\tthis.streetAddress = freeformAddress.streetAddress;\r\n\t\t/**\r\n\t\t * The locality of this address (usually a city or town).\r\n\t\t * @expose\r\n\t\t * @type {string|undefined} \r\n\t\t */\r\n\t\tthis.locality = freeformAddress.locality;\r\n\t\t/**\r\n\t\t * The region (province, canton, prefecture, state, etc.) where the address is located.\r\n\t\t * @expose\r\n\t\t * @type {string|undefined} \r\n\t\t */\r\n\t\tthis.region = freeformAddress.region;\r\n\t\t/**\r\n\t\t * Country-specific code for expediting mail. In the US, this is the zip code.\r\n\t\t * @expose\r\n\t\t * @type {string|undefined} \r\n\t\t */\r\n\t\tthis.postalCode = freeformAddress.postalCode;\r\n\t\t/**\r\n\t\t * Optional city-specific code for a particular post office, used to expidite\r\n\t\t * delivery.\r\n\t\t * @expose\r\n\t\t * @type {string|undefined} \r\n\t\t */\r\n\t\tthis.postOffice = freeformAddress.postOffice;\r\n\t\t/**\r\n\t\t * The country of the address.\r\n\t\t * @expose\r\n\t\t * @type {string|undefined}\r\n\t\t */\r\n\t\tthis.country = freeformAddress.country;\r\n\t\tif (freeformAddress.countryCode) {\r\n\t\t\t/**\r\n\t\t\t * The 2 or 3 letter ISO 3166 region code for the destination country in this address.\r\n\t\t\t * @expose\r\n\t\t\t * @type {string} \r\n\t\t\t * \r\n\t\t\t */\r\n\t\t\tthis.countryCode = freeformAddress.countryCode;\r\n\t\t}\r\n\t\tif (freeformAddress.format) {\r\n\t\t\t/**\r\n\t\t\t * private\r\n\t\t\t * @type {string}\r\n\t\t\t */\r\n\t\t\tthis.format = freeformAddress.format;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\taddress = freeformAddress.replace(/[ \\t\\r]+/g, \" \").trim();\r\n\taddress = address.replace(/[\\s\\n]+$/, \"\");\r\n\taddress = address.replace(/^[\\s\\n]+/, \"\");\r\n\t//console.log(\"\\n\\n-------------\\nAddress is '\" + address + \"'\");\r\n\t\r\n\tthis.lines = address.split(/[,，\\n]/g);\r\n\tthis.removeEmptyLines(this.lines);\r\n\t\r\n\tisAscii._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {\r\n\t\tisIdeo._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {\r\n\t\t\tisDigit._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {\r\n\t\t\t\tif (typeof(ilib.data.nativecountries) === 'undefined') {\r\n\t\t\t\t\tUtils.loadData({\r\n\t\t\t\t\t\tobject: Address,\r\n\t\t\t\t\t\tname: \"nativecountries.json\", // countries in their own language \r\n\t\t\t\t\t\tlocale: \"-\", // only need to load the root file \r\n\t\t\t\t\t\tnonlocale: true,\r\n\t\t\t\t\t\tsync: this.sync, \r\n\t\t\t\t\t\tloadParams: this.loadParams, \r\n\t\t\t\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(nativecountries) {\r\n\t\t\t\t\t\t\tilib.data.nativecountries = nativecountries;\r\n\t\t\t\t\t\t\tthis._loadCountries(options && options.onLoad);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._loadCountries(options && options.onLoad);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}));\r\n\t}));\r\n};\r\n\r\n/** @protected */\r\nAddress.prototype = {\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_loadCountries: function(onLoad) {\r\n\t\tif (typeof(ilib.data.countries) === 'undefined') {\r\n\t\t\tUtils.loadData({\r\n\t\t\t\tobject: Address,\r\n\t\t\t\tname: \"countries.json\", // countries in English\r\n\t\t\t\tlocale: \"-\", // only need to load the root file\r\n\t\t\t\tnonlocale: true,\r\n\t\t\t\tsync: this.sync, \r\n\t\t\t\tloadParams: this.loadParams, \r\n\t\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(countries) {\r\n\t\t\t\t\tilib.data.countries = countries;\r\n\t\t\t\t\tthis._loadCtrynames(onLoad);\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis._loadCtrynames(onLoad);\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_loadCtrynames: function(onLoad) {\r\n\t\tUtils.loadData({\r\n\t\t\tname: \"ctrynames.json\", \r\n\t\t\tobject: Address, \r\n\t\t\tlocale: this.locale,\r\n\t\t\tsync: this.sync, \r\n\t\t\tloadParams: this.loadParams, \r\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ctrynames) {\r\n\t\t\t\tthis._determineDest(ctrynames, onLoad);\r\n\t\t\t})\r\n\t\t});\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object?} ctrynames\r\n\t */\r\n\t_findDest: function (ctrynames) {\r\n\t\tvar match;\r\n\t\t\r\n\t\tfor (var countryName in ctrynames) {\r\n\t\t\tif (countryName && countryName !== \"generated\") {\r\n\t\t\t\t// find the longest match in the current table\r\n\t\t\t\t// ctrynames contains the country names mapped to region code\r\n\t\t\t\t// for efficiency, only test for things longer than the current match\r\n\t\t\t\tif (!match || match.text.length < countryName.length) {\r\n\t\t\t\t\tvar temp = this._findCountry(countryName);\r\n\t\t\t\t\tif (temp) {\r\n\t\t\t\t\t\tmatch = temp;\r\n\t\t\t\t\t\tthis.country = match.text;\r\n\t\t\t\t\t\tthis.countryCode = ctrynames[countryName];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn match;\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t * @param {Object?} localizedCountries\r\n\t * @param {function(Address):undefined} callback\r\n\t */\r\n\t_determineDest: function (localizedCountries, callback) {\r\n\t\tvar match;\r\n\t\t\r\n\t\t/*\r\n\t\t * First, find the name of the destination country, as that determines how to parse\r\n\t\t * the rest of the address. For any address, there are three possible ways \r\n\t\t * that the name of the country could be written:\r\n\t\t * 1. In the current language\r\n\t\t * 2. In its own native language\r\n\t\t * 3. In English\r\n\t\t * We'll try all three.\r\n\t\t */\r\n\t\tvar tables = [];\r\n\t\tif (localizedCountries) {\r\n\t\t\ttables.push(localizedCountries);\r\n\t\t}\r\n\t\ttables.push(ilib.data.nativecountries);\r\n\t\ttables.push(ilib.data.countries);\r\n\t\t\r\n\t\tfor (var i = 0; i < tables.length; i++) {\r\n\t\t\tmatch = this._findDest(tables[i]);\r\n\t\t\t\r\n\t\t\tif (match) {\r\n\t\t\t\tthis.lines[match.line] = this.lines[match.line].substring(0, match.start) + this.lines[match.line].substring(match.start + match.text.length);\r\n\r\n\t\t\t\tthis._init(callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// no country, so try parsing it as if we were in the same country\r\n\t\tthis.country = undefined;\r\n\t\tthis.countryCode = this.locale.getRegion();\r\n\t\tthis._init(callback);\r\n\t},\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {function(Address):undefined} callback\r\n\t */\r\n\t_init: function(callback) {\r\n\t\tUtils.loadData({\r\n\t\t\tobject: Address, \r\n\t\t\tlocale: new Locale(this.countryCode), \r\n\t\t\tname: \"address.json\", \r\n\t\t\tsync: this.sync, \r\n\t\t\tloadParams: this.loadParams,\r\n\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, function(info) {\r\n\t\t\t\tif (!info || JSUtils.isEmpty(info)) {\r\n\t\t\t\t\t// load the \"unknown\" locale instead\r\n\t\t\t\t\tUtils.loadData({\r\n\t\t\t\t\t\tobject: Address, \r\n\t\t\t\t\t\tlocale: new Locale(\"XX\"), \r\n\t\t\t\t\t\tname: \"address.json\", \r\n\t\t\t\t\t\tsync: this.sync, \r\n\t\t\t\t\t\tloadParams: this.loadParams,\r\n\t\t\t\t\t\tcallback: /** @type function(Object=):undefined */ ilib.bind(this, function(info) {\r\n\t\t\t\t\t\t\tthis.info = info;\r\n\t\t\t\t\t\t\tthis._parseAddress();\r\n\t\t\t\t\t\t\tif (typeof(callback) === 'function') {\r\n\t\t\t\t\t\t\t\tcallback(this);\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.info = info;\r\n\t\t\t\t\tthis._parseAddress();\r\n\t\t\t\t\tif (typeof(callback) === 'function') {\r\n\t\t\t\t\t\tcallback(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_parseAddress: function() {\r\n\t\t// clean it up first\r\n\t\tvar i, \r\n\t\t\tasianChars = 0, \r\n\t\t\tlatinChars = 0,\r\n\t\t\tstartAt,\r\n\t\t\tinfoFields,\r\n\t\t\tfield,\r\n\t\t\tpattern,\r\n\t\t\tmatchFunction,\r\n\t\t\tmatch,\r\n\t\t\tfieldNumber;\r\n\t\t\r\n\t\t// for locales that support both latin and asian character addresses, \r\n\t\t// decide if we are parsing an asian or latin script address\r\n\t\tif (this.info && this.info.multiformat) {\r\n\t\t\tfor (var j = 0; j < this.lines.length; j++) {\r\n\t\t\t\tvar line = new IString(this.lines[j]);\r\n\t\t\t\tvar it = line.charIterator();\r\n\t\t\t\twhile (it.hasNext()) {\r\n\t\t\t\t\tvar c = it.next();\r\n\t\t\t\t\tif (isIdeo(c) || CType.withinRange(c, \"Hangul\")) {\r\n\t\t\t\t\t\tasianChars++;\r\n\t\t\t\t\t} else if (isAscii(c) && !isDigit(c)) {\r\n\t\t\t\t\t\tlatinChars++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.format = (asianChars >= latinChars) ? \"asian\" : \"latin\";\r\n\t\t\tstartAt = this.info.startAt[this.format];\r\n\t\t\tinfoFields = this.info.fields[this.format];\r\n\t\t\t// //console.log(\"multiformat locale: format is now \" + this.format);\r\n\t\t} else {\r\n\t\t\tstartAt = (this.info && this.info.startAt) || \"end\";\r\n\t\t\tinfoFields = this.info.fields;\r\n\t\t}\r\n\t\tthis.compare = (startAt === \"end\") ? this.endsWith : this.startsWith;\r\n\t\t\r\n\t\t//console.log(\"this.lines is: \" + JSON.stringify(this.lines));\r\n\t\t\r\n\t\tfor (i = 0; i < infoFields.length && this.lines.length > 0; i++) {\r\n\t\t\t/** @type {{name:string, line:string, pattern:(string|Array.<string>), matchGroup:number}} */\r\n\t\t\tfield = infoFields[i];\r\n\t\t\tthis.removeEmptyLines(this.lines);\r\n\t\t\t//console.log(\"Searching for field \" + field.name);\r\n\t\t\tif (field.pattern) {\r\n\t\t\t\tif (typeof(field.pattern) === 'string') {\r\n\t\t\t\t\tpattern = new RegExp(field.pattern, \"img\");\r\n\t\t\t\t\tmatchFunction = this.matchRegExp;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpattern = field.pattern;\r\n\t\t\t\t\tmatchFunction = this.matchPattern;\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\tswitch (field.line) {\r\n\t\t\t\tcase 'startAtFirst':\r\n\t\t\t\t\tfor (fieldNumber = 0; fieldNumber < this.lines.length; fieldNumber++) {\r\n\t\t\t\t\t\tmatch = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);\r\n\t\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'startAtLast':\r\n\t\t\t\t\tfor (fieldNumber = this.lines.length-1; fieldNumber >= 0; fieldNumber--) {\r\n\t\t\t\t\t\tmatch = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);\r\n\t\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'first':\r\n\t\t\t\t\tfieldNumber = 0;\r\n\t\t\t\t\tmatch = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'last':\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tfieldNumber = this.lines.length - 1;\r\n\t\t\t\t\tmatch = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\t// //console.log(\"found match for \" + field.name + \": \" + JSON.stringify(match));\r\n\t\t\t\t\t// //console.log(\"remaining line is \" + match.line);\r\n\t\t\t\t\tthis.lines[fieldNumber] = match.line;\r\n\t\t\t\t\tthis[field.name] = match.match;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// if nothing is given, default to taking the whole field\r\n\t\t\t\tthis[field.name] = this.lines.splice(fieldNumber,1)[0].trim();\r\n\t\t\t\t//console.log(\"typeof(this[field.name]) is \" + typeof(this[field.name]) + \" and value is \" + JSON.stringify(this[field.name]));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\t// all the left overs go in the street address field\r\n\t\tthis.removeEmptyLines(this.lines);\r\n\t\tif (this.lines.length > 0) {\r\n\t\t\t//console.log(\"this.lines is \" + JSON.stringify(this.lines) + \" and splicing to get streetAddress\");\r\n\t\t\t// Korea uses spaces between words, despite being an \"asian\" locale\r\n\t\t\tvar joinString = (this.info.joinString && this.info.joinString[this.format]) || ((this.format && this.format === \"asian\") ? \"\" : \", \");\r\n\t\t\tthis.streetAddress = this.lines.join(joinString).trim();\r\n\t\t}\r\n\t\t\r\n\t\tthis.lines = undefined;\r\n\t\t//console.log(\"final result is \" + JSON.stringify(this));\r\n\t},\r\n\t\r\n\t/**\r\n\t * @protected\r\n\t * Find the named country either at the end or the beginning of the address.\r\n\t */\r\n\t_findCountry: function(name) {\r\n\t\tvar start = -1, match, line = 0;\r\n\t\t\r\n\t\tif (this.lines.length > 0) {\r\n\t\t\tstart = this.startsWith(this.lines[line], name);\r\n\t\t\tif (start === -1) {\r\n\t\t\t\tline = this.lines.length-1;\r\n\t\t\t\tstart = this.endsWith(this.lines[line], name);\r\n\t\t\t}\r\n\t\t\tif (start !== -1) {\r\n\t\t\t\tmatch = {\r\n\t\t\t\t\ttext: this.lines[line].substring(start, start + name.length),\r\n\t\t\t\t\tline: line,\r\n\t\t\t\t\tstart: start\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn match;\r\n\t},\r\n\t\r\n\tendsWith: function (subject, query) {\r\n\t\tvar start = subject.length-query.length,\r\n\t\t\ti,\r\n\t\t\tpat;\r\n\t\t//console.log(\"endsWith: checking \" + query + \" against \" + subject);\r\n\t\tfor (i = 0; i < query.length; i++) {\r\n\t\t\t// TODO: use case mapper instead of toLowerCase()\r\n\t\t\tif (subject.charAt(start+i).toLowerCase() !== query.charAt(i).toLowerCase()) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start > 0) {\r\n\t\t\tpat = /\\s/;\r\n\t\t\tif (!pat.test(subject.charAt(start-1))) {\r\n\t\t\t\t// make sure if we are not at the beginning of the string, that the match is \r\n\t\t\t\t// not the end of some other word\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn start;\r\n\t},\r\n\t\r\n\tstartsWith: function (subject, query) {\r\n\t\tvar i;\r\n\t\t// //console.log(\"startsWith: checking \" + query + \" against \" + subject);\r\n\t\tfor (i = 0; i < query.length; i++) {\r\n\t\t\t// TODO: use case mapper instead of toLowerCase()\r\n\t\t\tif (subject.charAt(i).toLowerCase() !== query.charAt(i).toLowerCase()) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\t\r\n\tremoveEmptyLines: function (arr) {\r\n\t\tvar i = 0;\r\n\t\t\r\n\t\twhile (i < arr.length) {\r\n\t\t\tif (arr[i]) {\r\n\t\t\t\tarr[i] = arr[i].trim();\r\n\t\t\t\tif (arr[i].length === 0) {\r\n\t\t\t\t\tarr.splice(i,1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tarr.splice(i,1);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\r\n\tmatchRegExp: function(address, line, expression, matchGroup, startAt) {\r\n\t\tvar lastMatch,\r\n\t\t\tmatch,\r\n\t\t\tret = {},\r\n\t\t\tlast;\r\n\t\t\r\n\t\t//console.log(\"searching for regexp \" + expression.source + \" in line \" + line);\r\n\t\t\r\n\t\tmatch = expression.exec(line);\r\n\t\tif (startAt === 'end') {\r\n\t\t\twhile (match !== null && match.length > 0) {\r\n\t\t\t\t//console.log(\"found matches \" + JSON.stringify(match));\r\n\t\t\t\tlastMatch = match;\r\n\t\t\t\tmatch = expression.exec(line);\r\n\t\t\t}\r\n\t\t\tmatch = lastMatch;\r\n\t\t}\r\n\t\t\r\n\t\tif (match && match !== null) {\r\n\t\t\t//console.log(\"found matches \" + JSON.stringify(match));\r\n\t\t\tmatchGroup = matchGroup || 0;\r\n\t\t\tif (match[matchGroup] !== undefined) {\r\n\t\t\t\tret.match = match[matchGroup].trim();\r\n\t\t\t\tret.match = ret.match.replace(/^\\-|\\-+$/, '');\r\n\t\t\t\tret.match = ret.match.replace(/\\s+$/, '');\r\n\t\t\t\tlast = (startAt === 'end') ? line.lastIndexOf(match[matchGroup]) : line.indexOf(match[matchGroup]); \r\n\t\t\t\t//console.log(\"last is \" + last);\r\n\t\t\t\tret.line = line.slice(0,last);\r\n\t\t\t\tif (address.format !== \"asian\") {\r\n\t\t\t\t\tret.line += \" \";\r\n\t\t\t\t}\r\n\t\t\t\tret.line += line.slice(last+match[matchGroup].length);\r\n\t\t\t\tret.line = ret.line.trim();\r\n\t\t\t\t//console.log(\"found match \" + ret.match + \" from matchgroup \" + matchGroup + \" and rest of line is \" + ret.line);\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t//} else {\r\n\t\t\t//console.log(\"no match\");\r\n\t\t}\r\n\t\t\r\n\t\treturn undefined;\r\n\t},\r\n\t\r\n\tmatchPattern: function(address, line, pattern, matchGroup) {\r\n\t\tvar start,\r\n\t\t\tj,\r\n\t\t\tret = {};\r\n\t\t\r\n\t\t//console.log(\"searching in line \" + line);\r\n\t\t\r\n\t\t// search an array of possible fixed strings\r\n\t\t//console.log(\"Using fixed set of strings.\");\r\n\t\tfor (j = 0; j < pattern.length; j++) {\r\n\t\t\tstart = address.compare(line, pattern[j]); \r\n\t\t\tif (start !== -1) {\r\n                            ret.match = line.substring(start, start+pattern[j].length);\r\n                            if (start !== 0) {\r\n                                ret.line = line.substring(0,start).trim();\r\n                            } else {\r\n                                ret.line = line.substring(pattern[j].length).trim();\r\n                            }\r\n\t\t\t\t//console.log(\"found match \" + ret.match + \" and rest of line is \" + ret.line);\r\n                            return ret;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn undefined;\r\n\t}\r\n};\r\n\r\nmodule.exports = Address;\r\n","/*\r\n * Name.js - Person name parser\r\n *\r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js \r\nLocale.js\r\nUtils.js \r\nisAlpha.js \r\nisIdeo.js \r\nisPunct.js \r\nisSpace.js\r\nJSUtils.js \r\nIString.js\r\n*/\r\n\r\n// !data name\r\n\r\n// notes:\r\n// icelandic given names: http://en.wiktionary.org/wiki/Appendix:Icelandic_given_names\r\n// danish approved given names: http://www.familiestyrelsen.dk/samliv/navne/\r\n// http://www.mentalfloss.com/blogs/archives/59277\r\n// other countries with first name restrictions: Norway, China, New Zealand, Japan, Sweden, Germany, Hungary\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar IString = require(\"./IString.js\");\r\nvar CType = require(\"./CType.js\");\r\nvar isAlpha = require(\"./isAlpha.js\");\r\nvar isIdeo = require(\"./isIdeo.js\");\r\nvar isPunct = require(\"./isPunct.js\");\r\nvar isSpace = require(\"./isSpace.js\");\r\n\r\n/**\r\n * @class\r\n * A class to parse names of people. Different locales have different conventions when it\r\n * comes to naming people.<p>\r\n *\r\n * The options can contain any of the following properties:\r\n *\r\n * <ul>\r\n * <li><i>locale</i> - use the rules and conventions of the given locale in order to parse\r\n * the name\r\n * <li><i>style</i> - explicitly use the named style to parse the name. Valid values so\r\n * far are \"western\" and \"asian\". If this property is not specified, then the style will\r\n * be gleaned from the name itself. This class will count the total number of Latin or Asian\r\n * characters. If the majority of the characters are in one style, that style will be\r\n * used to parse the whole name.\r\n * <li><i>order</i> - explicitly use the given order for names. In some locales, such\r\n * as Russian, names may be written equally validly as \"givenName familyName\" or \"familyName\r\n * givenName\". This option tells the parser which order to prefer, and overrides the\r\n * default order for the locale. Valid values are \"gf\" (given-family) or \"fg\" (family-given).\r\n * <li><i>useSpaces</i> - explicitly specifies whether to use spaces or not between the given name , middle name\r\n * and family name.\r\n * <li>onLoad - a callback function to call when the name info is fully\r\n * loaded and the name has been parsed. When the onLoad option is given, the name object\r\n * will attempt to load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the\r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two.\r\n *\r\n * <li>sync - tell whether to load any missing locale data synchronously or\r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while.\r\n *\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the\r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object\r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n *\r\n * When the parser has completed its parsing, it fills in the fields listed below.<p>\r\n *\r\n * For names that include auxilliary words, such as the family name \"van der Heijden\", all\r\n * of the auxilliary words (\"van der\") will be included in the field.<p>\r\n *\r\n * For names in Spanish locales, it is assumed that the family name is doubled. That is,\r\n * a person may have a paternal family name followed by a maternal family name. All\r\n * family names will be listed in the familyName field as normal, separated by spaces.\r\n * When formatting the short version of such names, only the paternal family name will\r\n * be used.\r\n *\r\n *\r\n * @constructor\r\n * @param {string|Name=} name the name to parse\r\n * @param {Object=} options Options governing the construction of this name instance\r\n */\r\nvar Name = function (name, options) {\r\n    var sync = true;\r\n\r\n    if (!name || name.length === 0) {\r\n    \treturn;\r\n    }\r\n\r\n    this.loadParams = {};\r\n\r\n    if (options) {\r\n        if (options.locale) {\r\n            this.locale = (typeof (options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n        }\r\n\r\n        if (options.style && (options.style === \"asian\" || options.style === \"western\")) {\r\n            this.style = options.style;\r\n        }\r\n\r\n        if (options.order && (options.order === \"gmf\" || options.order === \"fmg\" || options.order === \"fgm\")) {\r\n            this.order = options.order;\r\n        }\r\n\r\n        if (typeof (options.sync) !== 'undefined') {\r\n            sync = (options.sync == true);\r\n        }\r\n\r\n        if (typeof (options.loadParams) !== 'undefined') {\r\n            this.loadParams = options.loadParams;\r\n        }\r\n    }\r\n\r\n    if (!Name.cache) {\r\n        Name.cache = {};\r\n    }\r\n\r\n\tthis.locale = this.locale || new Locale();\r\n\t\r\n\tisAlpha._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\r\n\t\tisIdeo._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\r\n\t\t\tisPunct._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\r\n\t\t\t\tisSpace._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\r\n\t\t\t\t\tUtils.loadData({\r\n\t\t\t\t\t\tobject: Name, \r\n\t\t\t\t\t\tlocale: this.locale, \r\n\t\t\t\t\t\tname: \"name.json\", \r\n\t\t\t\t\t\tsync: sync, \r\n\t\t\t\t\t\tloadParams: this.loadParams, \r\n\t\t\t\t\t\tcallback: ilib.bind(this, function (info) {\r\n\t\t\t\t\t\t\tif (!info) {\r\n\t\t\t\t\t\t\t\tinfo = Name.defaultInfo;\r\n\t\t\t\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\r\n\t\t\t\t\t\t\t\tName.cache[spec] = info;\r\n\t\t\t\t\t\t\t}\r\n                            if (typeof (name) === 'object') {\r\n    \t\t\t\t\t\t\t// copy constructor\r\n\t\t\t\t\t\t\t    /**\r\n\t\t\t\t\t\t\t     * The prefixes for this name\r\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\r\n\t\t\t\t\t\t\t     */\r\n\t\t\t\t\t\t\t    this.prefix = name.prefix;\r\n\t\t\t\t\t\t\t    /**\r\n\t\t\t\t\t\t\t     * The given (personal) name in this name.\r\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\r\n\t\t\t\t\t\t\t     */\r\n\t\t\t\t\t\t\t    this.givenName = name.givenName;\r\n\t\t\t\t\t\t\t    /**\r\n\t\t\t\t\t\t\t     * The middle names used in this name. If there are multiple middle names, they all\r\n\t\t\t\t\t\t\t     * appear in this field separated by spaces.\r\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\r\n\t\t\t\t\t\t\t     */\r\n\t\t\t\t\t\t\t    this.middleName = name.middleName;\r\n\t\t\t\t\t\t\t    /**\r\n\t\t\t\t\t\t\t     * The family names in this name. If there are multiple family names, they all\r\n\t\t\t\t\t\t\t     * appear in this field separated by spaces.\r\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\r\n\t\t\t\t\t\t\t     */\r\n\t\t\t\t\t\t\t    this.familyName = name.familyName;\r\n\t\t\t\t\t\t\t    /**\r\n\t\t\t\t\t\t\t     * The suffixes for this name. If there are multiple suffixes, they all\r\n\t\t\t\t\t\t\t     * appear in this field separated by spaces.\r\n\t\t\t\t\t\t\t     * @type {string|Array.<string>}\r\n\t\t\t\t\t\t\t     */\r\n\t\t\t\t\t\t\t    this.suffix = name.suffix;\r\n\r\n\t\t\t\t\t\t\t    // private properties\r\n\t\t\t\t\t\t\t    this.locale = name.locale;\r\n\t\t\t\t\t\t\t    this.style = name.style;\r\n\t\t\t\t\t\t\t    this.order = name.order;\r\n\t\t\t\t\t\t\t    this.useSpaces = name.useSpaces;\r\n\t\t\t\t\t\t\t    this.isAsianName = name.isAsianName;\r\n\t\t\t\t\t    \t    return;\r\n\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t\t/** \r\n\t\t\t\t\t\t\t * @type {{\r\n\t\t\t\t\t\t\t *   nameStyle:string,\r\n\t\t\t\t\t\t\t *   order:string,\r\n\t\t\t\t\t\t\t *   prefixes:Array.<string>,\r\n\t\t\t\t\t\t\t *   suffixes:Array.<string>,\r\n\t\t\t\t\t\t\t *   auxillaries:Array.<string>,\r\n\t\t\t\t\t\t\t *   honorifics:Array.<string>,\r\n\t\t\t\t\t\t\t *   knownFamilyNames:Array.<string>,\r\n\t\t\t\t\t\t\t *   noCompoundFamilyNames:boolean,\r\n\t\t\t\t\t\t\t *   sortByHeadWord:boolean\r\n\t\t\t\t\t\t\t * }} */\r\n\t\t\t\t\t\t\tthis.info = info;\r\n\t\t\t\t\t\t\tthis._init(name);\r\n\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\t\t\t\t\t\r\n\t\t\t\t}));\r\n\t\t\t}));\r\n\t\t}));\r\n\t}));\r\n};\r\n\r\nName.defaultInfo = ilib.data.name ||  {\r\n\t\"components\": {\r\n\t\t\"short\": {\r\n\t\t\t\"g\": 1,\r\n\t\t\t\"f\": 1\r\n\t\t},\r\n\t\t\"medium\": {\r\n\t\t\t\"g\": 1,\r\n\t\t\t\"m\": 1,\r\n\t\t\t\"f\": 1\r\n\t\t},\r\n\t\t\"long\": {\r\n\t\t\t\"p\": 1,\r\n\t\t\t\"g\": 1,\r\n\t\t\t\"m\": 1,\r\n\t\t\t\"f\": 1\r\n\t\t},\r\n\t\t\"full\": {\r\n\t\t\t\"p\": 1,\r\n\t\t\t\"g\": 1,\r\n\t\t\t\"m\": 1,\r\n\t\t\t\"f\": 1,\r\n\t\t\t\"s\": 1\r\n\t\t}\r\n\t},\r\n\t\"format\": \"{prefix} {givenName} {middleName} {familyName}{suffix}\",\r\n\t\"sortByHeadWord\": false,\r\n\t\"nameStyle\": \"western\",\r\n\t\"conjunctions\": {\r\n\t\t\"and1\": \"and\",\r\n\t\t\"and2\": \"and\",\r\n\t\t\"or1\": \"or\",\r\n\t\t\"or2\": \"or\"\r\n\t},\r\n\t\"auxillaries\": {\r\n\t\t\"von\": 1,\r\n\t\t\"von der\": 1,\r\n\t\t\"von den\": 1,\r\n\t\t\"van\": 1,\r\n\t\t\"van der\": 1,\r\n        \"van de\": 1,\r\n        \"van den\": 1,\r\n        \"de\": 1,\r\n        \"di\": 1,\r\n\t\t\"la\": 1,\r\n\t\t\"lo\": 1,\r\n        \"des\": 1,\r\n        \"le\": 1,\r\n        \"les\": 1,\r\n\t\t\"du\": 1,\r\n        \"de la\": 1,\r\n        \"del\": 1,\r\n        \"de los\": 1,\r\n        \"de las\": 1\r\n\t},\r\n\t\"prefixes\": [\r\n\t\t\"doctor\",\r\n\t\t\"dr\",\r\n\t\t\"mr\",\r\n\t\t\"mrs\",\r\n\t\t\"ms\",\r\n\t\t\"mister\",\r\n\t\t\"madame\",\r\n\t\t\"madamoiselle\",\r\n\t\t\"miss\",\r\n\t\t\"monsieur\",\r\n\t\t\"señor\",\r\n        \"señora\",\r\n        \"señorita\"\r\n\t],\r\n\t\"suffixes\": [\r\n\t\t\",\",\r\n\t\t\"junior\",\r\n\t\t\"jr\",\r\n\t\t\"senior\",\r\n\t\t\"sr\",\r\n\t\t\"i\",\r\n\t\t\"ii\",\r\n\t\t\"iii\",\r\n\t\t\"esq\",\r\n\t\t\"phd\",\r\n\t\t\"md\"\r\n\t],\r\n    \"patronymicName\":[ ],\r\n    \"familyNames\":[ ]\r\n};\r\n\r\n/**\r\n * Return true if the given character is in the range of the Han, Hangul, or kana\r\n * scripts.\r\n * @static\r\n * @protected\r\n */\r\nName._isAsianChar = function(c) {\r\n\treturn isIdeo(c) ||\r\n\t\tCType.withinRange(c, \"hangul\") ||\r\n\t\tCType.withinRange(c, \"hiragana\") ||\r\n\t\tCType.withinRange(c, \"katakana\");\r\n};\r\n\r\n\r\n/**\r\n * @static\r\n * @protected\r\n */\r\nName._isAsianName = function (name, language) {\r\n    // the idea is to count the number of asian chars and the number\r\n    // of latin chars. If one is greater than the other, choose\r\n    // that style.\r\n    var asian = 0,\r\n        latin = 0,\r\n        i;\r\n\r\n    if (name && name.length > 0) {\r\n        for (i = 0; i < name.length; i++) {\r\n        \tvar c = name.charAt(i);\r\n\r\n            if (Name._isAsianChar(c)) {\r\n                if (language ==\"ko\" || language ==\"ja\" || language ==\"zh\") {\r\n                    return true;\r\n                }\r\n                asian++;\r\n            } else if (isAlpha(c)) {\r\n                if (!language ==\"ko\" || !language ==\"ja\" || !language ==\"zh\") {\r\n                    return false;\r\n                }\r\n                latin++;\r\n            }\r\n        }\r\n\r\n        return latin < asian;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Return true if any Latin letters are found in the string. Return\r\n * false if all the characters are non-Latin.\r\n * @static\r\n * @protected\r\n */\r\nName._isEuroName = function (name, language) {\r\n    var c,\r\n        n = new IString(name),\r\n        it = n.charIterator();\r\n\r\n    while (it.hasNext()) {\r\n        c = it.next();\r\n\r\n        if (!Name._isAsianChar(c) && !isPunct(c) && !isSpace(c)) {\r\n            return true;\r\n        } else if (Name._isAsianChar(c) && (language ==\"ko\" || language ==\"ja\" || language ==\"zh\")) {\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nName.prototype = {\r\n    /**\r\n     * @protected\r\n     */\r\n    _init: function (name) {\r\n        var parts, prefixArray, prefix, prefixLower,\r\n            suffixArray, suffix, suffixLower,\r\n            i, info, hpSuffix;\r\n        var currentLanguage = this.locale.getLanguage();\r\n\r\n        if (name) {\r\n            // for DFISH-12905, pick off the part that the LDAP server automatically adds to our names in HP emails\r\n            i = name.search(/\\s*[,\\/\\(\\[\\{<]/);\r\n            if (i !== -1) {\r\n                hpSuffix = name.substring(i);\r\n                hpSuffix = hpSuffix.replace(/\\s+/g, ' '); // compress multiple whitespaces\r\n                suffixArray = hpSuffix.split(\" \");\r\n                var conjunctionIndex = this._findLastConjunction(suffixArray);\r\n                if (conjunctionIndex > -1) {\r\n                    // it's got conjunctions in it, so this is not really a suffix\r\n                    hpSuffix = undefined;\r\n                } else {\r\n                    name = name.substring(0, i);\r\n                }\r\n            }\r\n\r\n            this.isAsianName = Name._isAsianName(name, currentLanguage);\r\n            if (this.info.nameStyle === \"asian\" || this.info.order === \"fmg\" || this.info.order === \"fgm\") {\r\n                info = this.isAsianName ? this.info : ilib.data.name;\r\n            } else {\r\n                info = this.isAsianName ? ilib.data.name : this.info;\r\n            }\r\n\r\n            if (this.isAsianName) {\r\n                // all-asian names\r\n                if (this.useSpaces == false) {\r\n                    name = name.replace(/\\s+/g, ''); // eliminate all whitespaces\r\n                }\r\n                parts = name.trim().split('');\r\n            }\r\n            //} \r\n            else {\r\n                name = name.replace(/, /g, ' , ');\r\n                name = name.replace(/\\s+/g, ' '); // compress multiple whitespaces\r\n                parts = name.trim().split(' ');\r\n            }\r\n\r\n            // check for prefixes\r\n            if (parts.length > 1) {\r\n                for (i = parts.length; i > 0; i--) {\r\n                    prefixArray = parts.slice(0, i);\r\n                    prefix = prefixArray.join(this.isAsianName ? '' : ' ');\r\n                    prefixLower = prefix.toLowerCase();\r\n                    prefixLower = prefixLower.replace(/[,\\.]/g, ''); // ignore commas and periods\r\n                    if (ilib.isArray(this.info.prefixes) &&\r\n                        (JSUtils.indexOf(this.info.prefixes, prefixLower) > -1 || this._isConjunction(prefixLower))) {\r\n                        if (this.prefix) {\r\n                            if (!this.isAsianName) {\r\n                                this.prefix += ' ';\r\n                            }\r\n                            this.prefix += prefix;\r\n                        } else {\r\n                            this.prefix = prefix;\r\n                        }\r\n                        parts = parts.slice(i);\r\n                        i = parts.length;\r\n                    }\r\n                }\r\n            }\r\n            // check for suffixes\r\n            if (parts.length > 1) {\r\n                for (i = parts.length; i > 0; i--) {\r\n                    suffixArray = parts.slice(-i);\r\n                    suffix = suffixArray.join(this.isAsianName ? '' : ' ');\r\n                    suffixLower = suffix.toLowerCase();\r\n                    suffixLower = suffixLower.replace(/[\\.]/g, ''); // ignore periods\r\n                    if (ilib.isArray(this.info.suffixes) && JSUtils.indexOf(this.info.suffixes, suffixLower) > -1) {\r\n                        if (this.suffix) {\r\n                            if (!this.isAsianName && !isPunct(this.suffix.charAt(0))) {\r\n                                this.suffix = ' ' + this.suffix;\r\n                            }\r\n                            this.suffix = suffix + this.suffix;\r\n                        } else {\r\n                            this.suffix = suffix;\r\n                        }\r\n                        parts = parts.slice(0, parts.length - i);\r\n                        i = parts.length;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (hpSuffix) {\r\n                this.suffix = (this.suffix && this.suffix + hpSuffix) || hpSuffix;\r\n            }\r\n\r\n            // adjoin auxillary words to their headwords\r\n            if (parts.length > 1 && !this.isAsianName) {\r\n                parts = this._joinAuxillaries(parts, this.isAsianName);\r\n            }\r\n\r\n            if (this.isAsianName) {\r\n                this._parseAsianName(parts, currentLanguage);\r\n            } else {\r\n                this._parseWesternName(parts);\r\n            }\r\n\r\n            this._joinNameArrays();\r\n        }\r\n    },\r\n\r\n    /**\r\n\t * @return {number} \r\n\t *\r\n\t_findSequence: function(parts, hash, isAsian) {\r\n\t\tvar sequence, sequenceLower, sequenceArray, aux = [], i, ret = {};\r\n\t\t\r\n\t\tif (parts.length > 0 && hash) {\r\n\t\t\t//console.info(\"_findSequence: finding sequences\");\r\n\t\t\tfor (var start = 0; start < parts.length-1; start++) {\r\n\t\t\t\tfor ( i = parts.length; i > start; i-- ) {\r\n\t\t\t\t\tsequenceArray = parts.slice(start, i);\r\n\t\t\t\t\tsequence = sequenceArray.join(isAsian ? '' : ' ');\r\n\t\t\t\t\tsequenceLower = sequence.toLowerCase();\r\n\t\t\t\t\tsequenceLower = sequenceLower.replace(/[,\\.]/g, '');  // ignore commas and periods\r\n\t\t\t\t\t\r\n\t\t\t\t\t//console.info(\"_findSequence: checking sequence: '\" + sequenceLower + \"'\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ( sequenceLower in hash ) {\r\n\t\t\t\t\t\tret.match = sequenceArray;\r\n\t\t\t\t\t\tret.start = start;\r\n\t\t\t\t\t\tret.end = i;\r\n\t\t\t\t\t\treturn ret;\r\n\t\t\t\t\t\t//console.info(\"_findSequence: Found sequence '\" + sequence + \"' New parts list is \" + JSON.stringify(parts));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn undefined;\r\n\t},\r\n\t*/\r\n\r\n    /**\r\n     * @protected\r\n     * @param {Array} parts\r\n     * @param {Array} names\r\n     * @param {boolean} isAsian\r\n     * @param {boolean=} noCompoundPrefix\r\n     */\r\n    _findPrefix: function (parts, names, isAsian, noCompoundPrefix) {\r\n        var i, prefix, prefixLower, prefixArray, aux = [];\r\n\r\n        if (parts.length > 0 && names) {\r\n            for (i = parts.length; i > 0; i--) {\r\n                prefixArray = parts.slice(0, i);\r\n                prefix = prefixArray.join(isAsian ? '' : ' ');\r\n                prefixLower = prefix.toLowerCase();\r\n                prefixLower = prefixLower.replace(/[,\\.]/g, ''); // ignore commas and periods\r\n\r\n                if (prefixLower in names) {\r\n                    aux = aux.concat(isAsian ? prefix : prefixArray);\r\n                    if (noCompoundPrefix) {\r\n                    \t// don't need to parse further. Just return it as is.\r\n                    \treturn aux;\r\n                    }\r\n                    parts = parts.slice(i);\r\n                    i = parts.length + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return aux;\r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _findSuffix: function (parts, names, isAsian) {\r\n        var i, j, seq = \"\";\r\n\r\n        for (i = 0; i < names.length; i++) {\r\n            if (parts.length >= names[i].length) {\r\n                j = 0;\r\n                while (j < names[i].length && parts[parts.length - j] === names[i][names[i].length - j]) {\r\n                    j++;\r\n                }\r\n                if (j >= names[i].length) {\r\n                    seq = parts.slice(parts.length - j).join(isAsian ? \"\" : \" \") + (isAsian ? \"\" : \" \") + seq;\r\n                    parts = parts.slice(0, parts.length - j);\r\n                    i = -1; // restart the search\r\n                }\r\n            }\r\n        }\r\n\r\n        this.suffix = seq;\r\n        return parts;\r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     * Tell whether or not the given word is a conjunction in this language.\r\n     * @param {string} word the word to test\r\n     * @return {boolean} true if the word is a conjunction\r\n     */\r\n    _isConjunction: function _isConjunction(word) {\r\n        return (this.info.conjunctions.and1 === word ||\r\n            this.info.conjunctions.and2 === word ||\r\n            this.info.conjunctions.or1 === word ||\r\n            this.info.conjunctions.or2 === word ||\r\n            (\"&\" === word) ||\r\n            (\"+\" === word));\r\n    },\r\n\r\n    /**\r\n     * Find the last instance of 'and' in the name\r\n     * @protected\r\n     * @param {Array.<string>} parts\r\n     * @return {number}\r\n     */\r\n    _findLastConjunction: function _findLastConjunction(parts) {\r\n        var conjunctionIndex = -1,\r\n            index, part;\r\n\r\n        for (index = 0; index < parts.length; index++) {\r\n            part = parts[index];\r\n            if (typeof (part) === 'string') {\r\n                part = part.toLowerCase();\r\n                // also recognize English\r\n                if (\"and\" === part || \"or\" === part || \"&\" === part || \"+\" === part) {\r\n                    conjunctionIndex = index;\r\n                }\r\n                if (this._isConjunction(part)) {\r\n                    conjunctionIndex = index;\r\n                }\r\n            }\r\n        }\r\n        return conjunctionIndex;\r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     * @param {Array.<string>} parts the current array of name parts\r\n     * @param {boolean} isAsian true if the name is being parsed as an Asian name\r\n     * @return {Array.<string>} the remaining parts after the prefixes have been removed\r\n     */\r\n    _extractPrefixes: function (parts, isAsian) {\r\n        var i = this._findPrefix(parts, this.info.prefixes, isAsian);\r\n        if (i > 0) {\r\n            this.prefix = parts.slice(0, i).join(isAsian ? \"\" : \" \");\r\n            return parts.slice(i);\r\n        }\r\n        // prefixes not found, so just return the array unmodified\r\n        return parts;\r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     * @param {Array.<string>} parts the current array of name parts\r\n     * @param {boolean} isAsian true if the name is being parsed as an Asian name\r\n     * @return {Array.<string>} the remaining parts after the suffices have been removed\r\n     */\r\n    _extractSuffixes: function (parts, isAsian) {\r\n        var i = this._findSuffix(parts, this.info.suffixes, isAsian);\r\n        if (i > 0) {\r\n            this.suffix = parts.slice(i).join(isAsian ? \"\" : \" \");\r\n            return parts.slice(0, i);\r\n        }\r\n        // suffices not found, so just return the array unmodified\r\n        return parts;\r\n    },\r\n\r\n    /**\r\n     * Adjoin auxillary words to their head words.\r\n     * @protected\r\n     * @param {Array.<string>} parts the current array of name parts\r\n     * @param {boolean} isAsian true if the name is being parsed as an Asian name\r\n     * @return {Array.<string>} the parts after the auxillary words have been plucked onto their head word\r\n     */\r\n    _joinAuxillaries: function (parts, isAsian) {\r\n        var start, i, prefixArray, prefix, prefixLower;\r\n\r\n        if (this.info.auxillaries && (parts.length > 2 || this.prefix)) {\r\n            for (start = 0; start < parts.length - 1; start++) {\r\n                for (i = parts.length; i > start; i--) {\r\n                    prefixArray = parts.slice(start, i);\r\n                    prefix = prefixArray.join(' ');\r\n                    prefixLower = prefix.toLowerCase();\r\n                    prefixLower = prefixLower.replace(/[,\\.]/g, ''); // ignore commas and periods\r\n\r\n                    if (prefixLower in this.info.auxillaries) {\r\n                        parts.splice(start, i + 1 - start, prefixArray.concat(parts[i]));\r\n                        i = start;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return parts;\r\n    },\r\n\r\n    /**\r\n     * Recursively join an array or string into a long string.\r\n     * @protected\r\n     */\r\n    _joinArrayOrString: function _joinArrayOrString(part) {\r\n        var i;\r\n        if (typeof (part) === 'object') {\r\n            for (i = 0; i < part.length; i++) {\r\n                part[i] = this._joinArrayOrString(part[i]);\r\n            }\r\n            var ret = \"\";\r\n            part.forEach(function (segment) {\r\n                if (ret.length > 0 && !isPunct(segment.charAt(0))) {\r\n                    ret += ' ';\r\n                }\r\n                ret += segment;\r\n            });\r\n\r\n            return ret;\r\n        }\r\n\r\n        return part;\r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _joinNameArrays: function _joinNameArrays() {\r\n        var prop;\r\n        for (prop in this) {\r\n\r\n            if (this[prop] !== undefined && typeof (this[prop]) === 'object' && this[prop] instanceof Array) {\r\n\r\n                this[prop] = this._joinArrayOrString(this[prop]);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _parseAsianName: function (parts, language) {\r\n        var familyNameArray = this._findPrefix(parts, this.info.knownFamilyNames, true, this.info.noCompoundFamilyNames);\r\n        var tempFullName = parts.join('');\r\n\r\n        if (familyNameArray && familyNameArray.length > 0) {\r\n            this.familyName = familyNameArray.join('');\r\n            this.givenName = parts.slice(this.familyName.length).join('');\r\n            \r\n            //Overide parsing rules if spaces are found in korean\r\n            if (language === \"ko\" && tempFullName.search(/\\s*[/\\s]/) > -1 && !this.suffix) {\r\n                this._parseKoreanName(tempFullName);\r\n            }\r\n        } else if (this.locale.getLanguage() === \"ja\") {\r\n            this._parseJapaneseName(parts);\r\n        } else if (this.suffix || this.prefix) {\r\n            this.familyName = parts.join('');\r\n        } else {\r\n            this.givenName = parts.join('');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _parseKoreanName: function (name) {\r\n        var tempName = name;\r\n\r\n        var spaceSplit = tempName.split(\" \");\r\n        var spceCount = spaceSplit.length;\r\n        var fistSpaceIndex = tempName.indexOf(\" \");\r\n        var lastSpaceIndex = tempName.lastIndexOf(\" \");\r\n\r\n        if (spceCount === 2) {\r\n            this.familyName = spaceSplit[0];\r\n            this.givenName = tempName.slice(fistSpaceIndex, tempName.length);\r\n        } else {\r\n            this.familyName = spaceSplit[0];\r\n            this.middleName = tempName.slice(fistSpaceIndex, lastSpaceIndex);\r\n            this.givenName = tempName.slice(lastSpaceIndex, tempName.length);\r\n        }\r\n        \r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _parseJapaneseName: function (parts) {\r\n    \tif (this.suffix && this.suffix.length > 1 && this.info.honorifics.indexOf(this.suffix)>-1) {\r\n    \t\tif (parts.length === 1) {\r\n    \t\t\tif (CType.withinRange(parts[0], \"cjk\")) {\r\n    \t\t\t\tthis.familyName = parts[0];\r\n    \t\t\t} else {\r\n    \t\t\t\tthis.givenName = parts[0];\r\n    \t\t\t}\r\n    \t\t\treturn;\r\n    \t\t} else if (parts.length === 2) {\r\n    \t\t\tthis.familyName = parts.slice(0,parts.length).join(\"\")\r\n    \t\t\treturn;\r\n    \t\t}\r\n    \t}\r\n    \tif (parts.length > 1) {\r\n    \t\tvar fn = \"\";                                                                    \r\n    \t\tfor (var i = 0; i < parts.length; i++) {\r\n    \t\t\tif (CType.withinRange(parts[i], \"cjk\")) {\r\n    \t\t\t\tfn += parts[i];\r\n    \t\t\t} else if (fn.length > 1 && CType.withinRange(parts[i], \"hiragana\")) {\r\n    \t\t\t\tthis.familyName = fn;\r\n    \t\t\t\tthis.givenName = parts.slice(i,parts.length).join(\"\");\r\n    \t\t\t\treturn;\r\n    \t\t\t} else {\r\n    \t\t\t\tbreak;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \tif (parts.length === 1) {\r\n    \t\tthis.familyName = parts[0];\r\n    \t} else if (parts.length === 2) {\r\n    \t\tthis.familyName = parts[0];\r\n    \t\tthis.givenName = parts[1];\r\n    \t} else if (parts.length === 3) {\r\n    \t\tthis.familyName = parts[0];\r\n    \t\tthis.givenName = parts.slice(1,parts.length).join(\"\");\r\n    \t} else if (parts.length > 3) {\r\n    \t\tthis.familyName = parts.slice(0,2).join(\"\")\r\n    \t\tthis.givenName = parts.slice(2,parts.length).join(\"\");\r\n    \t}      \r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _parseSpanishName: function (parts) {\r\n        var conjunctionIndex;\r\n\r\n        if (parts.length === 1) {\r\n            if (this.prefix || typeof (parts[0]) === 'object') {\r\n                this.familyName = parts[0];\r\n            } else {\r\n                this.givenName = parts[0];\r\n            }\r\n        } else if (parts.length === 2) {\r\n            // we do G F\r\n            this.givenName = parts[0];\r\n            this.familyName = parts[1];\r\n        } else if (parts.length === 3) {\r\n            conjunctionIndex = this._findLastConjunction(parts);\r\n            // if there's an 'and' in the middle spot, put everything in the first name\r\n            if (conjunctionIndex === 1) {\r\n                this.givenName = parts;\r\n            } else {\r\n                // else, do G F F\r\n                this.givenName = parts[0];\r\n                this.familyName = parts.slice(1);\r\n            }\r\n        } else if (parts.length > 3) {\r\n            //there are at least 4 parts to this name\r\n\r\n            conjunctionIndex = this._findLastConjunction(parts);\r\n            ////console.log(\"@@@@@@@@@@@@@@@@\"+conjunctionIndex)\r\n            if (conjunctionIndex > 0) {\r\n                // if there's a conjunction that's not the first token, put everything up to and \r\n                // including the token after it into the first name, the last 2 tokens into\r\n                // the family name (if they exist) and everything else in to the middle name\r\n                // 0 1 2 3 4 5\r\n                // G A G\r\n                // G A G F\r\n                // G G A G\r\n                // G A G F F\r\n                // G G A G F\r\n                // G G G A G\r\n                // G A G M F F\r\n                // G G A G F F\r\n                // G G G A G F\r\n                // G G G G A G\r\n                this.givenName = parts.splice(0, conjunctionIndex + 2);\r\n                if (parts.length > 1) {\r\n                    this.familyName = parts.splice(parts.length - 2, 2);\r\n                    if (parts.length > 0) {\r\n                        this.middleName = parts;\r\n                    }\r\n                } else if (parts.length === 1) {\r\n                    this.familyName = parts[0];\r\n                }\r\n            } else {\r\n                this.givenName = parts.splice(0, 1);\r\n                this.familyName = parts.splice(parts.length - 2, 2);\r\n                this.middleName = parts;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _parseIndonesianName: function (parts) {\r\n        var conjunctionIndex;\r\n\r\n        if (parts.length === 1) {\r\n            //if (this.prefix || typeof(parts[0]) === 'object') {\r\n            //this.familyName = parts[0];\r\n            //} else {\r\n            this.givenName = parts[0];\r\n            //}\r\n            //} else if (parts.length === 2) {\r\n            // we do G F\r\n            //this.givenName = parts[0];\r\n            //this.familyName = parts[1];\r\n        } else if (parts.length >= 2) {\r\n            //there are at least 3 parts to this name\r\n\r\n            conjunctionIndex = this._findLastConjunction(parts);\r\n            if (conjunctionIndex > 0) {\r\n                // if there's a conjunction that's not the first token, put everything up to and \r\n                // including the token after it into the first name, the last 2 tokens into\r\n                // the family name (if they exist) and everything else in to the middle name\r\n                // 0 1 2 3 4 5\r\n                // G A G\r\n                // G A G F\r\n                // G G A G\r\n                // G A G F F\r\n                // G G A G F\r\n                // G G G A G\r\n                // G A G M F F\r\n                // G G A G F F\r\n                // G G G A G F\r\n                // G G G G A G\r\n                this.givenName = parts.splice(0, conjunctionIndex + 2);\r\n                if (parts.length > 1) {\r\n                    //this.familyName = parts.splice(parts.length-2, 2);\r\n                    //if ( parts.length > 0 ) {\r\n                    this.middleName = parts;\r\n                }\r\n                //} else if (parts.length === 1) {\r\n                //\tthis.familyName = parts[0];\r\n                //}\r\n            } else {\r\n                this.givenName = parts.splice(0, 1);\r\n                //this.familyName = parts.splice(parts.length-2, 2);\r\n                this.middleName = parts;\r\n            }\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * @protected\r\n     */\r\n    _parseGenericWesternName: function (parts) {\r\n        /* Western names are parsed as follows, and rules are applied in this \r\n         * order:\r\n         *\r\n         * G\r\n         * G F\r\n         * G M F\r\n         * G M M F\r\n         * P F\r\n         * P G F\r\n         */\r\n        var conjunctionIndex;\r\n\r\n        if (parts.length === 1) {\r\n            if (this.prefix || typeof (parts[0]) === 'object') {\r\n                // already has a prefix, so assume it goes with the family name like \"Dr. Roberts\" or\r\n                // it is a name with auxillaries, which is almost always a family name\r\n                this.familyName = parts[0];\r\n            } else {\r\n                this.givenName = parts[0];\r\n            }\r\n        } else if (parts.length === 2) {\r\n            // we do G F\r\n            if (this.info.order == 'fgm') {\r\n                this.givenName = parts[1];\r\n                this.familyName = parts[0];\r\n            } else if (this.info.order == \"gmf\" || typeof (this.info.order) == 'undefined') {\r\n                this.givenName = parts[0];\r\n                this.familyName = parts[1];\r\n            }\r\n        } else if (parts.length >= 3) {\r\n            //find the first instance of 'and' in the name\r\n            conjunctionIndex = this._findLastConjunction(parts);\r\n\r\n            if (conjunctionIndex > 0) {\r\n                // if there's a conjunction that's not the first token, put everything up to and \r\n                // including the token after it into the first name, the last token into\r\n                // the family name (if it exists) and everything else in to the middle name\r\n                // 0 1 2 3 4 5\r\n                // G A G M M F\r\n                // G G A G M F\r\n                // G G G A G F\r\n                // G G G G A G\r\n                //if(this.order == \"gmf\") {\r\n                this.givenName = parts.slice(0, conjunctionIndex + 2);\r\n\r\n                if (conjunctionIndex + 1 < parts.length - 1) {\r\n                    this.familyName = parts.splice(parts.length - 1, 1);\r\n                    ////console.log(this.familyName);\r\n                    if (conjunctionIndex + 2 < parts.length - 1) {\r\n                        this.middleName = parts.slice(conjunctionIndex + 2, parts.length - conjunctionIndex - 3);\r\n                    }\r\n                } else if (this.order == \"fgm\") {\r\n                    this.familyName = parts.slice(0, conjunctionIndex + 2);\r\n                    if (conjunctionIndex + 1 < parts.length - 1) {\r\n                        this.middleName = parts.splice(parts.length - 1, 1);\r\n                        if (conjunctionIndex + 2 < parts.length - 1) {\r\n                            this.givenName = parts.slice(conjunctionIndex + 2, parts.length - conjunctionIndex - 3);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.givenName = parts[0];\r\n\r\n                this.middleName = parts.slice(1, parts.length - 1);\r\n\r\n                this.familyName = parts[parts.length - 1];\r\n            }\r\n        }\r\n    },\r\n    \r\n     /**\r\n     * parse patrinomic name from the russian names \r\n     * @protected\r\n     * @param {Array.<string>} parts the current array of name parts\r\n     * @return number  index of the part which contains patronymic name\r\n     */\r\n    _findPatronymicName: function(parts) {\r\n    \tvar index, part;\r\n    \tfor (index = 0; index < parts.length; index++) {\r\n    \t\tpart = parts[index];\r\n    \t\tif (typeof (part) === 'string') {\r\n    \t\t\tpart = part.toLowerCase();\r\n\r\n    \t\t\tvar subLength = this.info.patronymicName.length;\r\n    \t\t\twhile(subLength--) {\r\n    \t\t\t\tif(part.indexOf(this.info.patronymicName[subLength])!== -1 )\r\n    \t\t\t\t\treturn index;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \treturn -1;\r\n    },\r\n\r\n    /**\r\n\t * find if the given part is patronymic name\r\n\t * \r\n\t * @protected\r\n\t * @param {string} part string from name parts @\r\n\t * @return number index of the part which contains familyName\r\n\t */\r\n    _isPatronymicName: function(part) {\r\n\t    var pName;\r\n\t    if ( typeof (part) === 'string') {\r\n\t\t    pName = part.toLowerCase();\r\n\r\n\t\t    var subLength = this.info.patronymicName.length;\r\n\t\t    while (subLength--) {\r\n\t\t\t    if (pName.indexOf(this.info.patronymicName[subLength]) !== -1)\r\n\t\t\t\t    return true;\r\n\t\t    }\r\n\t    }\r\n\t    return false;\r\n    },\r\n\r\n    /**\r\n\t * find family name from the russian name\r\n\t * \r\n\t * @protected\r\n\t * @param {Array.<string>} parts the current array of name parts\r\n\t * @return boolean true if patronymic, false otherwise\r\n\t */\r\n    _findFamilyName: function(parts) {\r\n\t    var index, part, substring;\r\n\t    for (index = 0; index < parts.length; index++) {\r\n\t\t    part = parts[index];\r\n\r\n\t\t    if ( typeof (part) === 'string') {\r\n\t\t\t    part = part.toLowerCase();\r\n\t\t\t    var length = part.length - 1;\r\n\r\n\t\t\t    if (this.info.familyName.indexOf(part) !== -1) {\r\n\t\t\t\t    return index;\r\n\t\t\t    } else if (part[length] === 'в' || part[length] === 'н' ||\r\n\t\t\t        part[length] === 'й') {\r\n\t\t\t\t    substring = part.slice(0, -1);\r\n\t\t\t\t    if (this.info.familyName.indexOf(substring) !== -1) {\r\n\t\t\t\t\t    return index;\r\n\t\t\t\t    }\r\n\t\t\t    } else if ((part[length - 1] === 'в' && part[length] === 'а') ||\r\n\t\t\t        (part[length - 1] === 'н' && part[length] === 'а') ||\r\n\t\t\t        (part[length - 1] === 'а' && part[length] === 'я')) {\r\n\t\t\t\t    substring = part.slice(0, -2);\r\n\t\t\t\t    if (this.info.familyName.indexOf(substring) !== -1) {\r\n\t\t\t\t\t    return index;\r\n\t\t\t\t    }\r\n\t\t\t    }\r\n\t\t    }\r\n\t    }\r\n\t    return -1;\r\n    },\r\n\r\n    /**\r\n\t * parse russian name\r\n\t * \r\n\t * @protected\r\n\t * @param {Array.<string>} parts the current array of name parts\r\n\t * @return\r\n\t */\r\n    _parseRussianName: function(parts) {\r\n\t    var conjunctionIndex, familyIndex = -1;\r\n\r\n\t    if (parts.length === 1) {\r\n\t\t    if (this.prefix || typeof (parts[0]) === 'object') {\r\n\t\t\t    // already has a prefix, so assume it goes with the family name\r\n\t\t\t\t// like \"Dr. Roberts\" or\r\n\t\t\t    // it is a name with auxillaries, which is almost always a\r\n\t\t\t\t// family name\r\n\t\t\t    this.familyName = parts[0];\r\n\t\t    } else {\r\n\t\t\t    this.givenName = parts[0];\r\n\t\t    }\r\n\t    } else if (parts.length === 2) {\r\n\t\t    // we do G F\r\n\t\t    if (this.info.order === 'fgm') {\r\n\t\t\t    this.givenName = parts[1];\r\n\t\t\t    this.familyName = parts[0];\r\n\t\t    } else if (this.info.order === \"gmf\") {\r\n\t\t\t    this.givenName = parts[0];\r\n\t\t\t    this.familyName = parts[1];\r\n\t\t    } else if ( typeof (this.info.order) === 'undefined') {\r\n\t\t\t    if (this._isPatronymicName(parts[1]) === true) {\r\n\t\t\t\t    this.middleName = parts[1];\r\n\t\t\t\t    this.givenName = parts[0];\r\n\t\t\t    } else if ((familyIndex = this._findFamilyName(parts)) !== -1) {\r\n\t\t\t\t    if (familyIndex === 1) {\r\n\t\t\t\t\t    this.givenName = parts[0];\r\n\t\t\t\t\t    this.familyName = parts[1];\r\n\t\t\t\t    } else {\r\n\t\t\t\t\t    this.familyName = parts[0];\r\n\t\t\t\t\t    this.givenName = parts[1];\r\n\t\t\t\t    }\r\n\r\n\t\t\t    } else {\r\n\t\t\t\t    this.givenName = parts[0];\r\n\t\t\t\t    this.familyName = parts[1];\r\n\t\t\t    }\r\n\r\n\t\t    }\r\n\t    } else if (parts.length >= 3) {\r\n\t\t    // find the first instance of 'and' in the name\r\n\t\t    conjunctionIndex = this._findLastConjunction(parts);\r\n\t\t    var patronymicNameIndex = this._findPatronymicName(parts);\r\n\t\t    if (conjunctionIndex > 0) {\r\n\t\t\t    // if there's a conjunction that's not the first token, put\r\n\t\t\t\t// everything up to and\r\n\t\t\t    // including the token after it into the first name, the last\r\n\t\t\t\t// token into\r\n\t\t\t    // the family name (if it exists) and everything else in to the\r\n\t\t\t\t// middle name\r\n\t\t\t    // 0 1 2 3 4 5\r\n\t\t\t    // G A G M M F\r\n\t\t\t    // G G A G M F\r\n\t\t\t    // G G G A G F\r\n\t\t\t    // G G G G A G\r\n\t\t\t    // if(this.order == \"gmf\") {\r\n\t\t\t    this.givenName = parts.slice(0, conjunctionIndex + 2);\r\n\r\n\t\t\t    if (conjunctionIndex + 1 < parts.length - 1) {\r\n\t\t\t\t    this.familyName = parts.splice(parts.length - 1, 1);\r\n\t\t\t\t    // //console.log(this.familyName);\r\n\t\t\t\t    if (conjunctionIndex + 2 < parts.length - 1) {\r\n\t\t\t\t\t    this.middleName = parts.slice(conjunctionIndex + 2,\r\n\t\t\t\t\t        parts.length - conjunctionIndex - 3);\r\n\t\t\t\t    }\r\n\t\t\t    } else if (this.order == \"fgm\") {\r\n\t\t\t\t    this.familyName = parts.slice(0, conjunctionIndex + 2);\r\n\t\t\t\t    if (conjunctionIndex + 1 < parts.length - 1) {\r\n\t\t\t\t\t    this.middleName = parts.splice(parts.length - 1, 1);\r\n\t\t\t\t\t    if (conjunctionIndex + 2 < parts.length - 1) {\r\n\t\t\t\t\t\t    this.givenName = parts.slice(conjunctionIndex + 2,\r\n\t\t\t\t\t\t        parts.length - conjunctionIndex - 3);\r\n\t\t\t\t\t    }\r\n\t\t\t\t    }\r\n\t\t\t    }\r\n\t\t    } else if (patronymicNameIndex !== -1) {\r\n\t\t\t    this.middleName = parts[patronymicNameIndex];\r\n\r\n\t\t\t    if (patronymicNameIndex === (parts.length - 1)) {\r\n\t\t\t\t    this.familyName = parts[0];\r\n\t\t\t\t    this.givenName = parts.slice(1, patronymicNameIndex);\r\n\t\t\t    } else {\r\n\t\t\t\t    this.givenName = parts.slice(0, patronymicNameIndex);\r\n\r\n\t\t\t\t    this.familyName = parts[parts.length - 1];\r\n\t\t\t    }\r\n\t\t    } else {\r\n\t\t\t    this.givenName = parts[0];\r\n\r\n\t\t\t    this.middleName = parts.slice(1, parts.length - 1);\r\n\r\n\t\t\t    this.familyName = parts[parts.length - 1];\r\n\t\t    }\r\n\t    }\r\n    },\r\n    \r\n    \r\n    /**\r\n     * @protected\r\n     */\r\n    _parseWesternName: function (parts) {\r\n\r\n        if (this.locale.getLanguage() === \"es\" || this.locale.getLanguage() === \"pt\") {\r\n            // in spain and mexico and portugal, we parse names differently than in the rest of the world \r\n            // because of the double family names\r\n            this._parseSpanishName(parts);\r\n        } else if (this.locale.getLanguage() === \"ru\") {\r\n            /*\r\n             * In Russian, names can be given equally validly as given-family\r\n             * or family-given. Use the value of the \"order\" property of the\r\n             * constructor options to give the default when the order is ambiguous.\r\n             */\r\n            this._parseRussianName(parts);\r\n        } else if (this.locale.getLanguage() === \"id\") {\r\n            // in indonesia, we parse names differently than in the rest of the world \r\n            // because names don't have family names usually.\r\n            this._parseIndonesianName(parts);\r\n        } else {\r\n        \tthis._parseGenericWesternName(parts);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * When sorting names with auxiliary words (like \"van der\" or \"de los\"), determine\r\n     * which is the \"head word\" and return a string that can be easily sorted by head\r\n     * word. In English, names are always sorted by initial characters. In places like\r\n     * the Netherlands or Germany, family names are sorted by the head word of a list\r\n     * of names rather than the first element of that name.\r\n     * @return {string|undefined} a string containing the family name[s] to be used for sorting\r\n     * in the current locale, or undefined if there is no family name in this object\r\n     */\r\n    getSortFamilyName: function () {\r\n        var name,\r\n            auxillaries,\r\n            auxString,\r\n            parts,\r\n            i;\r\n\r\n        // no name to sort by\r\n        if (!this.familyName) {\r\n            return undefined;\r\n        }\r\n\r\n        // first break the name into parts\r\n        if (this.info) {\r\n            if (this.info.sortByHeadWord) {\r\n                if (typeof (this.familyName) === 'string') {\r\n                    name = this.familyName.replace(/\\s+/g, ' '); // compress multiple whitespaces\r\n                    parts = name.trim().split(' ');\r\n                } else {\r\n                    // already split\r\n                    parts = /** @type Array */ this.familyName;\r\n                }\r\n\r\n                auxillaries = this._findPrefix(parts, this.info.auxillaries, false);\r\n                if (auxillaries && auxillaries.length > 0) {\r\n                    if (typeof (this.familyName) === 'string') {\r\n                        auxString = auxillaries.join(' ');\r\n                        name = this.familyName.substring(auxString.length + 1) + ', ' + auxString;\r\n                    } else {\r\n                        name = parts.slice(auxillaries.length).join(' ') +\r\n                            ', ' +\r\n                            parts.slice(0, auxillaries.length).join(' ');\r\n                    }\r\n                }\r\n            } else if (this.info.knownFamilyNames && this.familyName) {\r\n                parts = this.familyName.split('');\r\n                var familyNameArray = this._findPrefix(parts, this.info.knownFamilyNames, true, this.info.noCompoundFamilyNames);\r\n                name = \"\";\r\n                for (i = 0; i < familyNameArray.length; i++) {\r\n                    name += (this.info.knownFamilyNames[familyNameArray[i]] || \"\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return name || this.familyName;\r\n    },\r\n\r\n    getHeadFamilyName: function () {},\r\n\r\n    /** \r\n     * @protected\r\n     * Return a shallow copy of the current instance.\r\n     */\r\n    clone: function () {\r\n        return new Name(this);\r\n    }\r\n};\r\n\r\nmodule.exports = Name;\r\n","/*\r\n * INumber.js - Parse a number in any locale\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n!depends \r\nilib.js \r\nLocale.js \r\nisDigit.js \r\nisSpace.js\r\nLocaleInfo.js\r\nUtils.js\r\nCurrency.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\n\r\nvar CType = require(\"./CType.js\");\r\nvar isDigit = require(\"./isDigit.js\");\r\nvar isSpace = require(\"./isSpace.js\");\r\n\r\nvar Currency = require(\"./Currency.js\");\r\n\r\n\r\n/**\r\n * @class\r\n * Parse a string as a number, ignoring all locale-specific formatting.<p>\r\n * \r\n * This class is different from the standard Javascript parseInt() and parseFloat() \r\n * functions in that the number to be parsed can have formatting characters in it \r\n * that are not supported by those two\r\n * functions, and it handles numbers written in other locales properly. For example, \r\n * if you pass the string \"203,231.23\" to the parseFloat() function in Javascript, it \r\n * will return you the number 203. The INumber class will parse it correctly and \r\n * the value() function will return the number 203231.23. If you pass parseFloat() the \r\n * string \"203.231,23\" with the locale set to de-DE, it will return you 203 again. This\r\n * class will return the correct number 203231.23 again.<p>\r\n * \r\n * The options object may contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>locale</i> - specify the locale of the string to parse. This is used to\r\n * figure out what the decimal point character is. If not specified, the default locale\r\n * for the app or browser is used.\r\n * <li><i>type</i> - specify whether this string should be interpretted as a number,\r\n * currency, or percentage amount. When the number is interpretted as a currency\r\n * amount, the getCurrency() method will return something useful, otherwise it will\r\n * return undefined. If\r\n * the number is to be interpretted as percentage amount and there is a percentage sign\r\n * in the string, then the number will be returned\r\n * as a fraction from the valueOf() method. If there is no percentage sign, then the \r\n * number will be returned as a regular number. That is \"58.3%\" will be returned as the \r\n * number 0.583 but \"58.3\" will be returned as 58.3. Valid values for this property \r\n * are \"number\", \"currency\", and \"percentage\". Default if this is not specified is\r\n * \"number\".\r\n * <li><i>onLoad</i> - a callback function to call when the locale data is fully \r\n * loaded. When the onLoad option is given, this class will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two. \r\n * \r\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while.\r\n *  \r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * <p>\r\n * \r\n * This class is named INumber (\"ilib number\") so as not to conflict with the \r\n * built-in Javascript Number class.\r\n * \r\n * @constructor\r\n * @param {string|number|INumber|Number|undefined} str a string to parse as a number, or a number value\r\n * @param {Object=} options Options controlling how the instance should be created \r\n */\r\nvar INumber = function (str, options) {\r\n\tvar i, stripped = \"\", \r\n\t\tsync = true,\r\n\t\tloadParams,\r\n\t\tonLoad;\r\n\t\r\n\tthis.locale = new Locale();\r\n\tthis.type = \"number\";\r\n\t\r\n\tif (options) {\r\n\t\tif (options.locale) {\r\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\t\tif (options.type) {\r\n\t\t\tswitch (options.type) {\r\n\t\t\t\tcase \"number\":\r\n\t\t\t\tcase \"currency\":\r\n\t\t\t\tcase \"percentage\":\r\n\t\t\t\t\tthis.type = options.type;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tsync = (options.sync == true);\r\n\t\t}\r\n\t\tloadParams = options.loadParams;\r\n\t\tonLoad = options.onLoad;\r\n\t}\r\n\t\r\n\tisDigit._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\r\n\t\tisSpace._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\r\n\t\t\tnew LocaleInfo(this.locale, {\r\n\t\t\t\tsync: sync,\r\n\t\t\t\tonLoad: ilib.bind(this, function (li) {\r\n\t\t\t\t\tthis.decimal = li.getDecimalSeparator();\r\n\t\t\t\t\t\r\n\t\t\t\t\tswitch (typeof(str)) {\r\n\t\t\t\t\tcase 'string':\r\n\t\t\t\t\t\t// stripping should work for all locales, because you just ignore all the\r\n\t\t\t\t\t\t// formatting except the decimal char\r\n\t\t\t\t\t\tvar unary = true; // looking for the unary minus still?\r\n\t\t\t\t\t\tvar lastNumericChar = 0;\r\n\t\t\t\t\t\tthis.str = str || \"0\";\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\t\tfor (i = 0; i < this.str.length; i++) {\r\n\t\t\t\t\t\t\tif (unary && this.str.charAt(i) === '-') {\r\n\t\t\t\t\t\t\t\tunary = false;\r\n\t\t\t\t\t\t\t\tstripped += this.str.charAt(i);\r\n\t\t\t\t\t\t\t\tlastNumericChar = i;\r\n\t\t\t\t\t\t\t} else if (isDigit(this.str.charAt(i))) {\r\n\t\t\t\t\t\t\t\tstripped += this.str.charAt(i);\r\n\t\t\t\t\t\t\t\tunary = false;\r\n\t\t\t\t\t\t\t\tlastNumericChar = i;\r\n\t\t\t\t\t\t\t} else if (this.str.charAt(i) === this.decimal) {\r\n\t\t\t\t\t\t\t\tstripped += \".\"; // always convert to period\r\n\t\t\t\t\t\t\t\tunary = false;\r\n\t\t\t\t\t\t\t\tlastNumericChar = i;\r\n\t\t\t\t\t\t\t} // else ignore\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// record what we actually parsed\r\n\t\t\t\t\t\tthis.parsed = this.str.substring(0, lastNumericChar+1);\r\n\t\t\t\t\t\tthis.value = parseFloat(stripped);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'number':\r\n\t\t\t\t\t\tthis.str = \"\" + str;\r\n\t\t\t\t\t\tthis.value = str;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tcase 'object':\r\n\t\t\t\t\t\tthis.value = /** @type {number} */ str.valueOf();\r\n\t\t\t\t\t\tthis.str = \"\" + this.value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tcase 'undefined':\r\n\t\t\t\t\t\tthis.value = 0;\r\n\t\t\t\t\t\tthis.str = \"0\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tswitch (this.type) {\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t// don't need to do anything special for other types\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"percentage\":\r\n\t\t\t\t\t\t\tif (this.str.indexOf(li.getPercentageSymbol()) !== -1) {\r\n\t\t\t\t\t\t\t\tthis.value /= 100;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"currency\":\r\n\t\t\t\t\t\t\tstripped = \"\";\r\n\t\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\t\t\twhile (i < this.str.length &&\r\n\t\t\t\t\t\t\t\t   !isDigit(this.str.charAt(i)) &&\r\n\t\t\t\t\t\t\t\t   !isSpace(this.str.charAt(i))) {\r\n\t\t\t\t\t\t\t\tstripped += this.str.charAt(i++);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (stripped.length === 0) {\r\n\t\t\t\t\t\t\t\twhile (i < this.str.length && \r\n\t\t\t\t\t\t\t\t\t   isDigit(this.str.charAt(i)) ||\r\n\t\t\t\t\t\t\t\t\t   isSpace(this.str.charAt(i)) ||\r\n\t\t\t\t\t\t\t\t\t   this.str.charAt(i) === '.' ||\r\n\t\t\t\t\t\t\t\t\t   this.str.charAt(i) === ',' ) {\r\n\t\t\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\twhile (i < this.str.length && \r\n\t\t\t\t\t\t\t\t\t   !isDigit(this.str.charAt(i)) &&\r\n\t\t\t\t\t\t\t\t\t   !isSpace(this.str.charAt(i))) {\r\n\t\t\t\t\t\t\t\t\tstripped += this.str.charAt(i++);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tnew Currency({\r\n\t\t\t\t\t\t\t\tlocale: this.locale, \r\n\t\t\t\t\t\t\t\tsign: stripped,\r\n\t\t\t\t\t\t\t\tsync: sync,\r\n\t\t\t\t\t\t\t\tonLoad: ilib.bind(this, function (cur) {\r\n\t\t\t\t\t\t\t\t\tthis.currency = cur;\r\n\t\t\t\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\t\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}));\r\n\t}));\r\n};\r\n\r\nINumber.prototype = {\r\n\t/**\r\n\t * Return the locale for this formatter instance.\r\n\t * @return {Locale} the locale instance for this formatter\r\n\t */\r\n\tgetLocale: function () {\r\n\t\treturn this.locale;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the original string that this number instance was created with.\r\n\t * @return {string} the original string\r\n\t */\r\n\ttoString: function () {\r\n\t\treturn this.str;\r\n\t},\r\n\t\r\n\t/**\r\n\t * If the type of this INumber instance is \"currency\", then the parser will attempt\r\n\t * to figure out which currency this amount represents. The amount can be written\r\n\t * with any of the currency signs or ISO 4217 codes that are currently\r\n\t * recognized by ilib, and the currency signs may occur before or after the\r\n\t * numeric portion of the string. If no currency can be recognized, then the \r\n\t * default currency for the locale is returned. If multiple currencies can be\r\n\t * recognized (for example if the currency sign is \"$\"), then this method \r\n\t * will prefer the one for the current locale. If multiple currencies can be\r\n\t * recognized, but none are used in the current locale, then the first currency\r\n\t * encountered will be used. This may produce random results, though the larger\r\n\t * currencies occur earlier in the list. For example, if the sign found in the\r\n\t * string is \"$\" and that is not the sign of the currency of the current locale\r\n\t * then the US dollar will be recognized, as it is the largest currency that uses\r\n\t * the \"$\" as its sign.\r\n\t * \r\n\t * @return {Currency|undefined} the currency instance for this amount, or \r\n\t * undefined if this INumber object is not of type currency\r\n\t */\r\n\tgetCurrency: function () {\r\n\t\treturn this.currency;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the value of this INumber object as a primitive number instance.\r\n\t * @return {number} the value of this number instance\r\n\t */\r\n\tvalueOf: function () {\r\n\t\treturn this.value;\r\n\t}\r\n};\r\n\r\nmodule.exports = INumber;","/*\r\n * GregorianDate.js - Represent a date in the Gregorian calendar\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nIDate.js \r\nGregorianCal.js \r\nSearchUtils.js\r\nMathUtils.js\r\nLocale.js\r\nLocaleInfo.js \r\nJulianDay.js\r\nGregRataDie.js\r\nTimeZone.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar SearchUtils = require(\"./SearchUtils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar JulianDay = require(\"./JulianDay.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar GregorianCal = require(\"./GregorianCal.js\");\r\nvar GregRataDie = require(\"./GregRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Gregorian date object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>dst</i> - boolean used to specify whether the given time components are\r\n * intended to be in daylight time or not. This is only used in the overlap\r\n * time when transitioning from DST to standard time, and the time components are \r\n * ambiguous. Otherwise at all other times of the year, this flag is ignored.\r\n * If you specify the date using unix time (UTC) or a julian day, then the time is\r\n * already unambiguous and this flag does not need to be specified.\r\n * <p>\r\n * For example, in the US, the transition out of daylight savings time \r\n * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls \r\n * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as \r\n * \"Nov 2, 2014 1:30am\", then there are two 1:30am times in that day, and you would \r\n * have to give the standard flag to indicate which of those two you mean. \r\n * (dst=true means daylight time, dst=false means standard time).   \r\n * \r\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \r\n * of this gregorian date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * \r\n * <li><i>locale</i> - locale for this gregorian date. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale.\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Gregorian date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends IDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date\r\n */\r\nvar GregorianDate = function(params) {\r\n\tthis.cal = new GregorianCal();\r\n\tthis.timezone = \"local\";\r\n\r\n\tif (params) {\r\n\t\tif (typeof(params.noinstance) === 'boolean' && params.noinstance) {\r\n\t\t\t// for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (params.locale) {\r\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t\t\tvar li = new LocaleInfo(this.locale);\r\n\t\t\tthis.timezone = li.getTimeZone(); \r\n\t\t}\r\n\t\tif (params.timezone) {\r\n\t\t\tthis.timezone = params.timezone.toString();\r\n\t\t}\r\n\t\t\r\n\t\tif (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\r\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\r\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\r\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\r\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\r\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\r\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\r\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\r\n\t\t\tif (typeof(params.dst) === 'boolean') {\r\n\t\t\t\tthis.dst = params.dst;\r\n\t\t\t}\r\n\t\t\tthis.rd = this.newRd(params);\r\n\t\t\t\r\n\t\t\t// add the time zone offset to the rd to convert to UTC\r\n\t\t\tthis.offset = 0;\r\n\t\t\tif (this.timezone === \"local\" && typeof(params.dst) === 'undefined') {\r\n\t\t\t\t// if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean\r\n\t\t\t\t// in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this\r\n\t\t\t\t// case, use the ilib calculations below, which can distinguish between the two properly\r\n\t\t\t\tvar d = new Date(this.year, this.month-1, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n\t\t\t\tthis.offset = -d.getTimezoneOffset() / 1440;\r\n\t\t\t} else {\r\n\t\t\t\tif (!this.tz) {\r\n\t\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t\t}\r\n\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \r\n\t\t\t\t// are set in order to figure out which time zone rules apply and \r\n\t\t\t\t// what the offset is at that point in the year\r\n\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\r\n\t\t\t}\r\n\t\t\tif (this.offset !== 0) {\r\n\t\t\t\tthis.rd = this.newRd({\r\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\r\n\tif (!this.rd) {\r\n\t\tthis.rd = this.newRd(params);\r\n\t\tthis._calcDateComponents();\r\n\t}\r\n};\r\n\r\nGregorianDate.prototype = new IDate({noinstance: true});\r\nGregorianDate.prototype.parent = IDate;\r\nGregorianDate.prototype.constructor = GregorianDate;\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @private\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nGregorianDate.prototype.newRd = function (params) {\r\n\treturn new GregRataDie(params);\r\n};\r\n\r\n/**\r\n * Calculates the Gregorian year for a given rd number.\r\n * @private\r\n * @static\r\n */\r\nGregorianDate._calcYear = function(rd) {\r\n\tvar days400,\r\n\t\tdays100,\r\n\t\tdays4,\r\n\t\tyears400,\r\n\t\tyears100,\r\n\t\tyears4,\r\n\t\tyears1,\r\n\t\tyear;\r\n\r\n\tyears400 = Math.floor((rd - 1) / 146097);\r\n\tdays400 = MathUtils.mod((rd - 1), 146097);\r\n\tyears100 = Math.floor(days400 / 36524);\r\n\tdays100 = MathUtils.mod(days400, 36524);\r\n\tyears4 = Math.floor(days100 / 1461);\r\n\tdays4 = MathUtils.mod(days100, 1461);\r\n\tyears1 = Math.floor(days4 / 365);\r\n\t\r\n\tyear = 400 * years400 + 100 * years100 + 4 * years4 + years1;\r\n\tif (years100 !== 4 && years1 !== 4) {\r\n\t\tyear++;\r\n\t}\r\n\treturn year;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nGregorianDate.prototype._calcYear = function(rd) {\r\n\treturn GregorianDate._calcYear(rd);\r\n};\r\n\r\n/**\r\n * Calculate the date components for the current time zone\r\n * @private\r\n */\r\nGregorianDate.prototype._calcDateComponents = function () {\r\n\tif (this.timezone === \"local\" && this.rd.getRataDie() >= -99280837 && this.rd.getRataDie() <= 100719163) {\r\n\t\t// console.log(\"using js Date to calculate offset\");\r\n\t\t// use the intrinsic JS Date object to do the tz conversion for us, which \r\n\t\t// guarantees that it follows the system tz database settings \r\n\t\tvar d = new Date(this.rd.getTimeExtended());\r\n\t\r\n\t\t/**\r\n\t\t * Year in the Gregorian calendar.\r\n\t\t * @type number\r\n\t\t */\r\n\t\tthis.year = d.getFullYear();\r\n\t\t\r\n\t\t/**\r\n\t\t * The month number, ranging from 1 (January) to 12 (December).\r\n\t\t * @type number\r\n\t\t */\r\n\t\tthis.month = d.getMonth()+1;\r\n\t\t\r\n\t\t/**\r\n\t\t * The day of the month. This ranges from 1 to 31.\r\n\t\t * @type number\r\n\t\t */\r\n\t\tthis.day = d.getDate();\r\n\t\t\r\n\t\t/**\r\n\t\t * The hour of the day. This can be a number from 0 to 23, as times are\r\n\t\t * stored unambiguously in the 24-hour clock.\r\n\t\t * @type number\r\n\t\t */\r\n\t\tthis.hour = d.getHours();\r\n\t\t\r\n\t\t/**\r\n\t\t * The minute of the hours. Ranges from 0 to 59.\r\n\t\t * @type number\r\n\t\t */\r\n\t\tthis.minute = d.getMinutes();\r\n\t\t\r\n\t\t/**\r\n\t\t * The second of the minute. Ranges from 0 to 59.\r\n\t\t * @type number\r\n\t\t */\r\n\t\tthis.second = d.getSeconds();\r\n\t\t\r\n\t\t/**\r\n\t\t * The millisecond of the second. Ranges from 0 to 999.\r\n\t\t * @type number\r\n\t\t */\r\n\t\tthis.millisecond = d.getMilliseconds();\r\n\t\t\r\n\t\tthis.offset = -d.getTimezoneOffset() / 1440;\r\n\t} else {\r\n\t\t// console.log(\"using ilib to calculate offset. tz is \" + this.timezone);\r\n\t\t// console.log(\"GregDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\r\n\t\tif (typeof(this.offset) === \"undefined\") {\r\n\t\t\t// console.log(\"calculating offset\");\r\n\t\t\tthis.year = this._calcYear(this.rd.getRataDie());\r\n\t\t\t\r\n\t\t\t// now offset the RD by the time zone, then recalculate in case we were \r\n\t\t\t// near the year boundary\r\n\t\t\tif (!this.tz) {\r\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t}\r\n\t\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\r\n\t\t// } else {\r\n\t\t\t// console.log(\"offset is already defined somehow. type is \" + typeof(this.offset));\r\n\t\t\t// console.trace(\"Stack is this one\");\r\n\t\t}\r\n\t\t// console.log(\"offset is \" + this.offset);\r\n\t\tvar rd = this.rd.getRataDie();\r\n\t\tif (this.offset !== 0) {\r\n\t\t\trd += this.offset;\r\n\t\t}\r\n\t\tthis.year = this._calcYear(rd);\r\n\t\t\r\n\t\tvar yearStartRd = this.newRd({\r\n\t\t\tyear: this.year,\r\n\t\t\tmonth: 1,\r\n\t\t\tday: 1,\r\n\t\t\tcal: this.cal\r\n\t\t});\r\n\t\t\r\n\t\t// remainder is days into the year\r\n\t\tvar remainder = rd - yearStartRd.getRataDie() + 1;\r\n\t\t\r\n\t\tvar cumulative = GregorianCal.prototype.isLeapYear.call(this.cal, this.year) ? \r\n\t\t\tGregRataDie.cumMonthLengthsLeap : \r\n\t\t\tGregRataDie.cumMonthLengths; \r\n\t\t\r\n\t\tthis.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);\r\n\t\tremainder = remainder - cumulative[this.month-1];\r\n\t\t\r\n\t\tthis.day = Math.floor(remainder);\r\n\t\tremainder -= this.day;\r\n\t\t// now convert to milliseconds for the rest of the calculation\r\n\t\tremainder = Math.round(remainder * 86400000);\r\n\t\t\r\n\t\tthis.hour = Math.floor(remainder/3600000);\r\n\t\tremainder -= this.hour * 3600000;\r\n\t\t\r\n\t\tthis.minute = Math.floor(remainder/60000);\r\n\t\tremainder -= this.minute * 60000;\r\n\t\t\r\n\t\tthis.second = Math.floor(remainder/1000);\r\n\t\tremainder -= this.second * 1000;\r\n\t\t\r\n\t\tthis.millisecond = Math.floor(remainder);\r\n\t}\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nGregorianDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\r\n\treturn MathUtils.mod(rd, 7);\r\n};\r\n\r\n/**\r\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \r\n * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and \r\n * December 31st is 365 in regular years, or 366 in leap years.\r\n * @return {number} the ordinal day of the year\r\n */\r\nGregorianDate.prototype.getDayOfYear = function() {\r\n\tvar cumulativeMap = this.cal.isLeapYear(this.year) ? \r\n\t\tGregRataDie.cumMonthLengthsLeap : \r\n\t\tGregRataDie.cumMonthLengths; \r\n\t\t\r\n\treturn cumulativeMap[this.month-1] + this.day;\r\n};\r\n\r\n/**\r\n * Return the era for this date as a number. The value for the era for Gregorian \r\n * calendars is -1 for \"before the common era\" (BCE) and 1 for \"the common era\" (CE). \r\n * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar, \r\n * there is a year 0, so any years that are negative or zero are BCE. In the Julian\r\n * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to \r\n * 1.\r\n * @return {number} 1 if this date is in the common era, -1 if it is before the \r\n * common era \r\n */\r\nGregorianDate.prototype.getEra = function() {\r\n\treturn (this.year < 1) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nGregorianDate.prototype.getCalendar = function() {\r\n\treturn \"gregorian\";\r\n};\r\n\r\n// register with the factory method\r\nIDate._constructors[\"gregorian\"] = GregorianDate;\r\n\r\nmodule.exports = GregorianDate;","/*\r\n * EthiopicDate.js - Represent a date in the Ethiopic calendar\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nIDate.js \r\nEthiopicCal.js \r\nMathUtils.js\r\nLocale.js\r\nLocaleInfo.js \r\nTimeZone.js\r\nEthiopicRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar EthiopicRataDie = require(\"./EthiopicRataDie.js\");\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\nvar EthiopicCal = require(\"./EthiopicCal.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new date object for the Ethiopic Calendar. The constructor can be called\r\n * with a parameter object that contains any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\r\n * <li><i>julianday</i> - the Julian Day to set into this date\r\n * <li><i>year</i> - any integer\r\n * <li><i>month</i> - 1 to 13, where 1 means Maskaram, 2 means Teqemt, etc., and 13 means Paguemen\r\n * <li><i>day</i> - 1 to 30\r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * <li><i>minute</i> - 0 to 59\r\n * <li><i>second</i> - 0 to 59\r\n * <li><i>millisecond<i> - 0 to 999\r\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \r\n * of this ethiopic date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale. \r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *  \r\n * If called with another Ethiopic date argument, the date components of the given\r\n * date are copied into the current one.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends IDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Ethiopic date\r\n */\r\nvar EthiopicDate = function(params) {\r\n\tthis.cal = new EthiopicCal();\r\n\t\r\n\tif (params) {\r\n\t\tif (typeof(params.noinstance) === 'boolean' && params.noinstance) {\r\n\t\t\t// for doing inheritance, so don't need to fill in the data. The inheriting class only wants the methods.\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (params.locale) {\r\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t\t\tvar li = new LocaleInfo(this.locale);\r\n\t\t\tthis.timezone = li.getTimeZone(); \r\n\t\t}\r\n\t\tif (params.timezone) {\r\n\t\t\tthis.timezone = params.timezone;\r\n\t\t}\r\n\t\t\r\n\t\tif (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\r\n\t\t\t/**\r\n\t\t\t * Year in the Ethiopic calendar.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\r\n\t\t\t/**\r\n\t\t\t * The month number, ranging from 1 (Maskaram) to 13 (Paguemen).\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\r\n\t\t\t/**\r\n\t\t\t * The day of the month. This ranges from 1 to 30.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\r\n\t\t\t/**\r\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\r\n\t\t\t * stored unambiguously in the 24-hour clock.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\r\n\t\t\t/**\r\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\r\n\t\t\t/**\r\n\t\t\t * The second of the minute. Ranges from 0 to 59.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\r\n\t\t\t/**\r\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The day of the year. Ranges from 1 to 366.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\r\n\t\t\t\r\n\t\t\tif (typeof(params.dst) === 'boolean') {\r\n\t\t\t\tthis.dst = params.dst;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.rd = this.newRd(this);\r\n\t\t\t\r\n\t\t\t// add the time zone offset to the rd to convert to UTC\r\n\t\t\tif (!this.tz) {\r\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t}\r\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \r\n\t\t\t// are set in order to figure out which time zone rules apply and \r\n\t\t\t// what the offset is at that point in the year\r\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\r\n\t\t\tif (this.offset !== 0) {\r\n\t\t\t\tthis.rd = this.newRd({\r\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (!this.rd) {\r\n\t\tthis.rd = this.newRd(params);\r\n\t\tthis._calcDateComponents();\r\n\t}\r\n};\r\n\r\nEthiopicDate.prototype = new IDate({ noinstance: true });\r\nEthiopicDate.prototype.parent = IDate;\r\nEthiopicDate.prototype.constructor = EthiopicDate;\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @protected\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nEthiopicDate.prototype.newRd = function (params) {\r\n\treturn new EthiopicRataDie(params);\r\n};\r\n\r\n/**\r\n * Return the year for the given RD\r\n * @protected\r\n * @param {number} rd RD to calculate from \r\n * @returns {number} the year for the RD\r\n */\r\nEthiopicDate.prototype._calcYear = function(rd) {\r\n\tvar year = Math.floor((4*(Math.floor(rd)-1) + 1463)/1461);\r\n\t\r\n\treturn year;\r\n};\r\n\r\n/**\r\n * Calculate date components for the given RD date.\r\n * @protected\r\n */\r\nEthiopicDate.prototype._calcDateComponents = function () {\r\n\tvar remainder,\r\n\t\tcumulative,\r\n\t\trd = this.rd.getRataDie();\r\n\t\r\n\tthis.year = this._calcYear(rd);\r\n\r\n\tif (typeof(this.offset) === \"undefined\") {\r\n\t\tthis.year = this._calcYear(rd);\r\n\t\t\r\n\t\t// now offset the RD by the time zone, then recalculate in case we were \r\n\t\t// near the year boundary\r\n\t\tif (!this.tz) {\r\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t}\r\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\r\n\t}\r\n\r\n\tif (this.offset !== 0) {\r\n\t\trd += this.offset;\r\n\t\tthis.year = this._calcYear(rd);\r\n\t}\r\n\t\r\n\tvar jan1 = this.newRd({\r\n\t\tyear: this.year,\r\n\t\tmonth: 1,\r\n\t\tday: 1,\r\n\t\thour: 0,\r\n\t\tminute: 0,\r\n\t\tsecond: 0,\r\n\t\tmillisecond: 0\r\n\t});\r\n\tremainder = rd + 1 - jan1.getRataDie();\r\n\t\r\n\tthis.month = Math.floor((remainder-1)/30) + 1;\r\n\tremainder = remainder - (this.month-1) * 30;\r\n\t\r\n\tthis.day = Math.floor(remainder);\r\n\tremainder -= this.day;\r\n\t// now convert to milliseconds for the rest of the calculation\r\n\tremainder = Math.round(remainder * 86400000);\r\n\t\r\n\tthis.hour = Math.floor(remainder/3600000);\r\n\tremainder -= this.hour * 3600000;\r\n\t\r\n\tthis.minute = Math.floor(remainder/60000);\r\n\tremainder -= this.minute * 60000;\r\n\t\r\n\tthis.second = Math.floor(remainder/1000);\r\n\tremainder -= this.second * 1000;\r\n\t\r\n\tthis.millisecond = remainder;\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nEthiopicDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\r\n\treturn MathUtils.mod(rd-4, 7);\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nEthiopicDate.prototype.getCalendar = function() {\r\n\treturn \"ethiopic\";\r\n};\r\n\r\n//register with the factory method\r\nIDate._constructors[\"ethiopic\"] = EthiopicDate;\r\n\r\nmodule.exports = EthiopicDate;\r\n","/*\r\n * HebrewDate.js - Represent a date in the Hebrew calendar\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nLocale.js\r\nLocaleInfo.js\r\nTimeZone.js\r\nIDate.js\r\nMathUtils.js\r\nCalendar.js\r\nHebrewCal.js\r\nHebrewRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar HebrewCal = require(\"./HebrewCal.js\");\r\nvar HebrewRataDie = require(\"./HebrewRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new civil Hebrew date object. The constructor can be called\r\n * with a params object that can contain the following properties:<p>\r\n * \r\n * <ul>\r\n * <li><i>julianday</i> - the Julian Day to set into this date\r\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year\r\n * <li><i>month</i> - 1 to 12, where 1 means Nisan, 2 means Iyyar, etc.\r\n * <li><i>day</i> - 1 to 30\r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify \r\n * the parts or specify the minutes, seconds, and milliseconds, but not both. \r\n * <li><i>minute</i> - 0 to 59\r\n * <li><i>second</i> - 0 to 59\r\n * <li><i>millisecond</i> - 0 to 999\r\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \r\n * of this julian date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale. \r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n * \r\n * If called with another Hebrew date argument, the date components of the given\r\n * date are copied into the current one.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>julianday</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends IDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew date\r\n */\r\nvar HebrewDate = function(params) {\r\n\tthis.cal = new HebrewCal();\r\n\t\r\n\tif (params) {\r\n\t\tif (params.timezone) {\r\n\t\t\tthis.timezone = params.timezone;\r\n\t\t}\r\n\t\tif (params.locale) {\r\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t\t\tif (!this.timezone) {\r\n\t\t\t\tvar li = new LocaleInfo(this.locale);\r\n\t\t\t\tthis.timezone = li.getTimeZone(); \r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\tparams.minute || params.second || params.millisecond || params.parts ) {\r\n\t\t\t/**\r\n\t\t\t * Year in the Hebrew calendar.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The month number, ranging from 1 to 13.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\r\n\r\n\t\t\t/**\r\n\t\t\t * The day of the month. This ranges from 1 to 30.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\r\n\t\t\t * stored unambiguously in the 24-hour clock.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\r\n\r\n\t\t\tif (typeof(params.parts) !== 'undefined') {\r\n\t\t\t\t/**\r\n\t\t\t\t * The parts (halaqim) of the hour. This can be a number from 0 to 1079.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.parts = parseInt(params.parts, 10);\r\n\t\t\t\tvar seconds = parseInt(params.parts, 10) * 3.333333333333;\r\n\t\t\t\tthis.minute = Math.floor(seconds / 60);\r\n\t\t\t\tseconds -= this.minute * 60;\r\n\t\t\t\tthis.second = Math.floor(seconds);\r\n\t\t\t\tthis.millisecond = (seconds - this.second);\t\r\n\t\t\t} else {\r\n\t\t\t\t/**\r\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\r\n\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\r\n\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The day of the year. Ranges from 1 to 383.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\r\n\t\t\t\r\n\t\t\tif (typeof(params.dst) === 'boolean') {\r\n\t\t\t\tthis.dst = params.dst;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.rd = this.newRd(this);\r\n\t\t\t\r\n\t\t\t// add the time zone offset to the rd to convert to UTC\r\n\t\t\tif (!this.tz) {\r\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t}\r\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \r\n\t\t\t// are set in order to figure out which time zone rules apply and \r\n\t\t\t// what the offset is at that point in the year\r\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\r\n\t\t\tif (this.offset !== 0) {\r\n\t\t\t\tthis.rd = this.newRd({\r\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\t\r\n\tif (!this.rd) {\r\n\t\tthis.rd = this.newRd(params);\r\n\t\tthis._calcDateComponents();\r\n\t}\r\n};\r\n\r\nHebrewDate.prototype = new IDate({noinstance: true});\r\nHebrewDate.prototype.parent = IDate;\r\nHebrewDate.prototype.constructor = HebrewDate;\r\n\r\n/**\r\n * the cumulative lengths of each month for a non-leap year, without new years corrections,\r\n * that can be used in reverse to map days to months\r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nHebrewDate.cumMonthLengthsReverse = [\r\n//  [days, monthnumber],                                                \r\n\t[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\r\n\t[30,  8],  /* Heshvan */\r\n\t[59,  9],  /* Kislev */\r\n\t[88,  10], /* Teveth */\r\n\t[117, 11], /* Shevat */\r\n\t[147, 12], /* Adar I */\r\n\t[176, 1],  /* Nisan */\r\n\t[206, 2],  /* Iyyar */\r\n\t[235, 3],  /* Sivan */\r\n\t[265, 4],  /* Tammuz */\r\n\t[294, 5],  /* Av */\r\n\t[324, 6],  /* Elul */\r\n\t[354, 7]   /* end of year sentinel value */\r\n];\r\n\r\n/**\r\n * the cumulative lengths of each month for a leap year, without new years corrections\r\n * that can be used in reverse to map days to months \r\n * \r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nHebrewDate.cumMonthLengthsLeapReverse = [\r\n//  [days, monthnumber],                                                \r\n\t[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */\r\n\t[30,  8],  /* Heshvan */\r\n\t[59,  9],  /* Kislev */\r\n\t[88,  10], /* Teveth */\r\n\t[117, 11], /* Shevat */\r\n\t[147, 12], /* Adar I */\r\n\t[177, 13], /* Adar II */\r\n\t[206, 1],  /* Nisan */\r\n\t[236, 2],  /* Iyyar */\r\n\t[265, 3],  /* Sivan */\r\n\t[295, 4],  /* Tammuz */\r\n\t[324, 5],  /* Av */\r\n\t[354, 6],  /* Elul */\r\n\t[384, 7]   /* end of year sentinel value */\r\n];\r\n\r\n/**\r\n * Number of days difference between RD 0 of the Hebrew calendar \r\n * (Jan 1, 1 Gregorian = JD 1721057.5) and RD 0 of the Hebrew calendar\r\n * (September 7, -3760 Gregorian = JD 347997.25)\r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nHebrewDate.GregorianDiff = 1373060.25;\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @private\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nHebrewDate.prototype.newRd = function (params) {\r\n\treturn new HebrewRataDie(params);\r\n};\r\n\r\n/**\r\n * Return the year for the given RD\r\n * @protected\r\n * @param {number} rd RD to calculate from \r\n * @returns {number} the year for the RD\r\n */\r\nHebrewDate.prototype._calcYear = function(rd) {\r\n\tvar year, approximation, nextNewYear;\r\n\t\r\n\t// divide by the average number of days per year in the Hebrew calendar\r\n\t// to approximate the year, then tweak it to get the real year\r\n\tapproximation = Math.floor(rd / 365.246822206) + 1;\r\n\t\r\n\t// console.log(\"HebrewDate._calcYear: approx is \" + approximation);\r\n\t\r\n\t// search forward from approximation-1 for the year that actually contains this rd\r\n\tyear = approximation;\r\n\tnextNewYear = HebrewCal.newYear(year);\r\n\twhile (rd >= nextNewYear) {\r\n\t\tyear++;\r\n\t\tnextNewYear = HebrewCal.newYear(year);\r\n\t}\r\n\treturn year - 1;\r\n};\r\n\r\n/**\r\n * Calculate date components for the given RD date.\r\n * @protected\r\n */\r\nHebrewDate.prototype._calcDateComponents = function () {\r\n\tvar remainder,\r\n\t\ti,\r\n\t\ttable,\r\n\t\ttarget,\r\n\t\trd = this.rd.getRataDie();\r\n\t\r\n\t// console.log(\"HebrewDate.calcComponents: calculating for rd \" + rd);\r\n\r\n\tif (typeof(this.offset) === \"undefined\") {\r\n\t\tthis.year = this._calcYear(rd);\r\n\t\t\r\n\t\t// now offset the RD by the time zone, then recalculate in case we were \r\n\t\t// near the year boundary\r\n\t\tif (!this.tz) {\r\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t}\r\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\r\n\t}\r\n\r\n\tif (this.offset !== 0) {\r\n\t\trd += this.offset;\r\n\t\tthis.year = this._calcYear(rd);\r\n\t}\r\n\t\r\n\t// console.log(\"HebrewDate.calcComponents: year is \" + this.year + \" with starting rd \" + thisNewYear);\r\n\t\r\n\tremainder = rd - HebrewCal.newYear(this.year);\r\n\t// console.log(\"HebrewDate.calcComponents: remainder is \" + remainder);\r\n\r\n\t// take out new years corrections so we get the right month when we look it up in the table\r\n\tif (remainder >= 59) {\r\n\t\tif (remainder >= 88) {\r\n\t\t\tif (HebrewCal.longKislev(this.year)) {\r\n\t\t\t\tremainder--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (HebrewCal.longHeshvan(this.year)) {\r\n\t\t\tremainder--;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// console.log(\"HebrewDate.calcComponents: after new years corrections, remainder is \" + remainder);\r\n\t\r\n\ttable = this.cal.isLeapYear(this.year) ? \r\n\t\t\tHebrewDate.cumMonthLengthsLeapReverse :\r\n\t\t\tHebrewDate.cumMonthLengthsReverse;\r\n\t\r\n\ti = 0;\r\n\ttarget = Math.floor(remainder);\r\n\twhile (i+1 < table.length && target >= table[i+1][0]) {\r\n\t\ti++;\r\n\t}\r\n\t\r\n\tthis.month = table[i][1];\r\n\t// console.log(\"HebrewDate.calcComponents: remainder is \" + remainder);\r\n\tremainder -= table[i][0];\r\n\t\r\n\t// console.log(\"HebrewDate.calcComponents: month is \" + this.month + \" and remainder is \" + remainder);\r\n\t\r\n\tthis.day = Math.floor(remainder);\r\n\tremainder -= this.day;\r\n\tthis.day++; // days are 1-based\r\n\t\r\n\t// console.log(\"HebrewDate.calcComponents: day is \" + this.day + \" and remainder is \" + remainder);\r\n\r\n\t// now convert to milliseconds for the rest of the calculation\r\n\tremainder = Math.round(remainder * 86400000);\r\n\t\r\n\tthis.hour = Math.floor(remainder/3600000);\r\n\tremainder -= this.hour * 3600000;\r\n\t\r\n\t// the hours from 0 to 6 are actually 18:00 to midnight of the previous\r\n\t// gregorian day, so we have to adjust for that\r\n\tif (this.hour >= 6) {\r\n\t\tthis.hour -= 6;\r\n\t} else {\r\n\t\tthis.hour += 18;\r\n\t}\r\n\t\t\r\n\tthis.minute = Math.floor(remainder/60000);\r\n\tremainder -= this.minute * 60000;\r\n\t\r\n\tthis.second = Math.floor(remainder/1000);\r\n\tremainder -= this.second * 1000;\r\n\t\r\n\tthis.millisecond = Math.floor(remainder);\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nHebrewDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\r\n\treturn MathUtils.mod(rd+1, 7);\r\n};\r\n\r\n/**\r\n * Get the Halaqim (parts) of an hour. There are 1080 parts in an hour, which means\r\n * each part is 3.33333333 seconds long. This means the number returned may not\r\n * be an integer.\r\n * \r\n * @return {number} the halaqim parts of the current hour\r\n */\r\nHebrewDate.prototype.getHalaqim = function() {\r\n\tif (this.parts < 0) {\r\n\t\t// convert to ms first, then to parts\r\n\t\tvar h = this.minute * 60000 + this.second * 1000 + this.millisecond;\r\n\t\tthis.parts = (h * 0.0003);\r\n\t}\r\n\treturn this.parts;\r\n};\r\n\r\n/**\r\n * Return the rd number of the first Sunday of the given ISO year.\r\n * @protected\r\n * @return the rd of the first Sunday of the ISO year\r\n */\r\nHebrewDate.prototype.firstSunday = function (year) {\r\n\tvar tishri1 = this.newRd({\r\n\t\tyear: year,\r\n\t\tmonth: 7,\r\n\t\tday: 1,\r\n\t\thour: 18,\r\n\t\tminute: 0,\r\n\t\tsecond: 0,\r\n\t\tmillisecond: 0,\r\n\t\tcal: this.cal\r\n\t});\r\n\tvar firstThu = this.newRd({\r\n\t\trd: tishri1.onOrAfter(4),\r\n\t\tcal: this.cal\r\n\t});\r\n\treturn firstThu.before(0);\r\n};\r\n\r\n/**\r\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \r\n * 385, regardless of months or weeks, etc. That is, Tishri 1st is day 1, and \r\n * Elul 29 is 385 for a leap year with a long Heshvan and long Kislev.\r\n * @return {number} the ordinal day of the year\r\n */\r\nHebrewDate.prototype.getDayOfYear = function() {\r\n\tvar table = this.cal.isLeapYear(this.year) ? \r\n\t\t\t\tHebrewRataDie.cumMonthLengthsLeap : \r\n\t\t\t\tHebrewRataDie.cumMonthLengths;\r\n\tvar days = table[this.month-1];\r\n\tif ((this.month < 7 || this.month > 8) && HebrewCal.longHeshvan(this.year)) {\r\n\t\tdays++;\r\n\t}\r\n\tif ((this.month < 7 || this.month > 9) && HebrewCal.longKislev(this.year)) {\r\n\t\tdays++;\r\n\t}\r\n\r\n\treturn days + this.day;\r\n};\r\n\r\n/**\r\n * Return the ordinal number of the week within the month. The first week of a month is\r\n * the first one that contains 4 or more days in that month. If any days precede this\r\n * first week, they are marked as being in week 0. This function returns values from 0\r\n * through 6.<p>\r\n * \r\n * The locale is a required parameter because different locales that use the same \r\n * Hebrew calendar consider different days of the week to be the beginning of\r\n * the week. This can affect the week of the month in which some days are located.\r\n * \r\n * @param {Locale|string} locale the locale or locale spec to use when figuring out \r\n * the first day of the week\r\n * @return {number} the ordinal number of the week within the current month\r\n */\r\nHebrewDate.prototype.getWeekOfMonth = function(locale) {\r\n\tvar li = new LocaleInfo(locale),\r\n\t\tfirst = this.newRd({\r\n\t\t\tyear: this.year,\r\n\t\t\tmonth: this.month,\r\n\t\t\tday: 1,\r\n\t\t\thour: 18,\r\n\t\t\tminute: 0,\r\n\t\t\tsecond: 0,\r\n\t\t\tmillisecond: 0\r\n\t\t}),\r\n\t\trd = this.rd.getRataDie(),\r\n\t\tweekStart = first.onOrAfter(li.getFirstDayOfWeek());\r\n\t\r\n\tif (weekStart - first.getRataDie() > 3) {\r\n\t\t// if the first week has 4 or more days in it of the current month, then consider\r\n\t\t// that week 1. Otherwise, it is week 0. To make it week 1, move the week start\r\n\t\t// one week earlier.\r\n\t\tweekStart -= 7;\r\n\t}\r\n\treturn (rd < weekStart) ? 0 : Math.floor((rd - weekStart) / 7) + 1;\r\n};\r\n\r\n/**\r\n * Return the era for this date as a number. The value for the era for Hebrew \r\n * calendars is -1 for \"before the Hebrew era\" and 1 for \"the Hebrew era\". \r\n * Hebrew era dates are any date after Tishri 1, 1, which is the same as\r\n * September 7, 3760 BC in the Gregorian calendar. \r\n * \r\n * @return {number} 1 if this date is in the Hebrew era, -1 if it is before the \r\n * Hebrew era \r\n */\r\nHebrewDate.prototype.getEra = function() {\r\n\treturn (this.year < 1) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nHebrewDate.prototype.getCalendar = function() {\r\n\treturn \"hebrew\";\r\n};\r\n\r\n// register with the factory method\r\nIDate._constructors[\"hebrew\"] = HebrewDate;\r\n\r\nmodule.exports = HebrewDate;\r\n","/*\r\n * islamicDate.js - Represent a date in the Islamic calendar\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nLocale.js\r\nLocaleInfo.js\r\nTimeZone.js\r\nIDate.js\r\nMathUtils.js\r\nSearchUtils.js\r\nCalendar.js\r\nIslamicCal.js\r\nIslamicRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar SearchUtils = require(\"./SearchUtils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar IslamicRataDie = require(\"./IslamicRataDie.js\");\r\nvar IslamicCal = require(\"./IslamicCal.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new civil Islamic date object. The constructor can be called\r\n * with a params object that can contain the following properties:<p>\r\n * \r\n * <ul>\r\n * <li><i>julianday</i> - the Julian Day to set into this date\r\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year\r\n * <li><i>month</i> - 1 to 12, where 1 means Muharram, 2 means Saffar, etc.\r\n * <li><i>day</i> - 1 to 30\r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * <li><i>minute</i> - 0 to 59\r\n * <li><i>second</i> - 0 to 59\r\n * <li><i>millisecond</i> - 0 to 999\r\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \r\n * of this julian date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale. \r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n * \r\n * If called with another Islamic date argument, the date components of the given\r\n * date are copied into the current one.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>julianday</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends IDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Islamic date\r\n */\r\nvar IslamicDate = function(params) {\r\n\tthis.cal = new IslamicCal();\r\n\t\r\n\tif (params) {\r\n\t\tif (params.locale) {\r\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t\t\tvar li = new LocaleInfo(this.locale);\r\n\t\t\tthis.timezone = li.getTimeZone(); \r\n\t\t}\r\n\t\tif (params.timezone) {\r\n\t\t\tthis.timezone = params.timezone;\r\n\t\t}\r\n\t\t\r\n\t\tif (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\r\n\t\t\t/**\r\n\t\t\t * Year in the Islamic calendar.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The month number, ranging from 1 to 12 (December).\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\r\n\r\n\t\t\t/**\r\n\t\t\t * The day of the month. This ranges from 1 to 30.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\r\n\t\t\t * stored unambiguously in the 24-hour clock.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The second of the minute. Ranges from 0 to 59.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The day of the year. Ranges from 1 to 355.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\r\n\r\n\t\t\tif (typeof(params.dst) === 'boolean') {\r\n\t\t\t\tthis.dst = params.dst;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.rd = this.newRd(this);\r\n\t\t\t\r\n\t\t\t// add the time zone offset to the rd to convert to UTC\r\n\t\t\tif (!this.tz) {\r\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t}\r\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \r\n\t\t\t// are set in order to figure out which time zone rules apply and \r\n\t\t\t// what the offset is at that point in the year\r\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\r\n\t\t\tif (this.offset !== 0) {\r\n\t\t\t\tthis.rd = this.newRd({\r\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (!this.rd) {\r\n\t\tthis.rd = this.newRd(params);\r\n\t\tthis._calcDateComponents();\r\n\t}\r\n};\r\n\r\nIslamicDate.prototype = new IDate({noinstance: true});\r\nIslamicDate.prototype.parent = IDate;\r\nIslamicDate.prototype.constructor = IslamicDate;\r\n\r\n/**\r\n * the cumulative lengths of each month, for a non-leap year \r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n */\r\nIslamicDate.cumMonthLengths = [\r\n\t0,  /* Muharram */\r\n\t30,  /* Saffar */\r\n\t59,  /* Rabi'I */\r\n\t89,  /* Rabi'II */\r\n\t118,  /* Jumada I */\r\n\t148,  /* Jumada II */\r\n\t177,  /* Rajab */\r\n\t207,  /* Sha'ban */\r\n\t236,  /* Ramadan */\r\n\t266,  /* Shawwal */\r\n\t295,  /* Dhu al-Qa'da */\r\n\t325,  /* Dhu al-Hijja */\r\n\t354\r\n];\r\n\r\n/**\r\n * Number of days difference between RD 0 of the Gregorian calendar and\r\n * RD 0 of the Islamic calendar. \r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nIslamicDate.GregorianDiff = 227015;\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @protected\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nIslamicDate.prototype.newRd = function (params) {\r\n\treturn new IslamicRataDie(params);\r\n};\r\n\r\n/**\r\n * Return the year for the given RD\r\n * @protected\r\n * @param {number} rd RD to calculate from \r\n * @returns {number} the year for the RD\r\n */\r\nIslamicDate.prototype._calcYear = function(rd) {\r\n\treturn Math.floor((30 * rd + 10646) / 10631);\r\n};\r\n\r\n/**\r\n * Calculate date components for the given RD date.\r\n * @protected\r\n */\r\nIslamicDate.prototype._calcDateComponents = function () {\r\n\tvar remainder,\r\n\t\trd = this.rd.getRataDie();\r\n\t\r\n\tthis.year = this._calcYear(rd);\r\n\r\n\tif (typeof(this.offset) === \"undefined\") {\r\n\t\tthis.year = this._calcYear(rd);\r\n\t\t\r\n\t\t// now offset the RD by the time zone, then recalculate in case we were \r\n\t\t// near the year boundary\r\n\t\tif (!this.tz) {\r\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t}\r\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\r\n\t}\r\n\r\n\tif (this.offset !== 0) {\r\n\t\trd += this.offset;\r\n\t\tthis.year = this._calcYear(rd);\r\n\t}\r\n\r\n\t//console.log(\"IslamicDate.calcComponent: calculating for rd \" + rd);\r\n\t//console.log(\"IslamicDate.calcComponent: year is \" + ret.year);\r\n\tvar yearStart = this.newRd({\r\n\t\tyear: this.year,\r\n\t\tmonth: 1,\r\n\t\tday: 1,\r\n\t\thour: 0,\r\n\t\tminute: 0,\r\n\t\tsecond: 0,\r\n\t\tmillisecond: 0\r\n\t});\r\n\tremainder = rd - yearStart.getRataDie() + 1;\r\n\t\r\n\tthis.dayOfYear = remainder;\r\n\t\r\n\t//console.log(\"IslamicDate.calcComponent: remainder is \" + remainder);\r\n\t\r\n\tthis.month = SearchUtils.bsearch(remainder, IslamicDate.cumMonthLengths);\r\n\tremainder -= IslamicDate.cumMonthLengths[this.month-1];\r\n\r\n\t//console.log(\"IslamicDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\r\n\t\r\n\tthis.day = Math.floor(remainder);\r\n\tremainder -= this.day;\r\n\r\n\t//console.log(\"IslamicDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\r\n\r\n\t// now convert to milliseconds for the rest of the calculation\r\n\tremainder = Math.round(remainder * 86400000);\r\n\t\r\n\tthis.hour = Math.floor(remainder/3600000);\r\n\tremainder -= this.hour * 3600000;\r\n\t\r\n\tthis.minute = Math.floor(remainder/60000);\r\n\tremainder -= this.minute * 60000;\r\n\t\r\n\tthis.second = Math.floor(remainder/1000);\r\n\tremainder -= this.second * 1000;\r\n\t\r\n\tthis.millisecond = remainder;\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nIslamicDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\r\n\treturn MathUtils.mod(rd-2, 7);\r\n};\r\n\r\n/**\r\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \r\n * 354 or 355, regardless of months or weeks, etc. That is, Muharran 1st is day 1, and \r\n * Dhu al-Hijja 29 is 354.\r\n * @return {number} the ordinal day of the year\r\n */\r\nIslamicDate.prototype.getDayOfYear = function() {\r\n\treturn IslamicDate.cumMonthLengths[this.month-1] + this.day;\r\n};\r\n\r\n/**\r\n * Return the era for this date as a number. The value for the era for Islamic \r\n * calendars is -1 for \"before the Islamic era\" and 1 for \"the Islamic era\". \r\n * Islamic era dates are any date after Muharran 1, 1, which is the same as\r\n * July 16, 622 CE in the Gregorian calendar. \r\n * \r\n * @return {number} 1 if this date is in the common era, -1 if it is before the \r\n * common era \r\n */\r\nIslamicDate.prototype.getEra = function() {\r\n\treturn (this.year < 1) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nIslamicDate.prototype.getCalendar = function() {\r\n\treturn \"islamic\";\r\n};\r\n\r\n//register with the factory method\r\nIDate._constructors[\"islamic\"] = IslamicDate;\r\n\r\nmodule.exports = IslamicDate;","/*\r\n * JulianDate.js - Represent a date in the Julian calendar\r\n * \r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nLocale.js\r\nIDate.js \r\nTimeZone.js\r\nCalendar.js \r\nJulianCal.js \r\nSearchUtils.js \r\nMathUtils.js\r\nLocaleInfo.js \r\nJulianRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar SearchUtils = require(\"./SearchUtils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar JulianRataDie = require(\"./JulianRataDie.js\");\r\nvar JulianCal = require(\"./JulianCal.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new date object for the Julian Calendar. The constructor can be called\r\n * with a parameter object that contains any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\r\n * <li><i>julianday</i> - the Julian Day to set into this date\r\n * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero \r\n * year which doesn't exist in the Julian calendar\r\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\r\n * <li><i>day</i> - 1 to 31\r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * <li><i>minute</i> - 0 to 59\r\n * <li><i>second</i> - 0 to 59\r\n * <li><i>millisecond<i> - 0 to 999\r\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \r\n * of this julian date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale. \r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n * \r\n * NB. The <a href=\"http://en.wikipedia.org/wiki/Julian_date\">Julian Day</a> \r\n * (JulianDay) object is a <i>different</i> object than a \r\n * <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">date in\r\n * the Julian calendar</a> and the two are not to be confused. The Julian Day \r\n * object represents time as a number of whole and fractional days since the \r\n * beginning of the epoch, whereas a date in the Julian \r\n * calendar is a regular date that signifies year, month, day, etc. using the rules\r\n * of the Julian calendar. The naming of Julian Days and the Julian calendar are\r\n * unfortunately close, and come from history.<p>\r\n *  \r\n * If called with another Julian date argument, the date components of the given\r\n * date are copied into the current one.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends IDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Julian date\r\n */\r\nvar JulianDate = function(params) {\r\n\tthis.cal = new JulianCal();\r\n\t\r\n\tif (params) {\r\n\t\tif (params.locale) {\r\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t\t\tvar li = new LocaleInfo(this.locale);\r\n\t\t\tthis.timezone = li.getTimeZone(); \r\n\t\t}\r\n\t\tif (params.timezone) {\r\n\t\t\tthis.timezone = params.timezone;\r\n\t\t}\r\n\t\t\r\n\t\tif (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\r\n\t\t\t/**\r\n\t\t\t * Year in the Julian calendar.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\r\n\t\t\t/**\r\n\t\t\t * The month number, ranging from 1 (January) to 12 (December).\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\r\n\t\t\t/**\r\n\t\t\t * The day of the month. This ranges from 1 to 31.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\r\n\t\t\t/**\r\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\r\n\t\t\t * stored unambiguously in the 24-hour clock.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\r\n\t\t\t/**\r\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\r\n\t\t\t/**\r\n\t\t\t * The second of the minute. Ranges from 0 to 59.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\r\n\t\t\t/**\r\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The day of the year. Ranges from 1 to 383.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\r\n\t\t\t\r\n\t\t\tif (typeof(params.dst) === 'boolean') {\r\n\t\t\t\tthis.dst = params.dst;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.rd = this.newRd(this);\r\n\t\t\t\r\n\t\t\t// add the time zone offset to the rd to convert to UTC\r\n\t\t\tif (!this.tz) {\r\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t}\r\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \r\n\t\t\t// are set in order to figure out which time zone rules apply and \r\n\t\t\t// what the offset is at that point in the year\r\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\r\n\t\t\tif (this.offset !== 0) {\r\n\t\t\t\tthis.rd = this.newRd({\r\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (!this.rd) {\r\n\t\tthis.rd = this.newRd(params);\r\n\t\tthis._calcDateComponents();\r\n\t}\r\n};\r\n\r\nJulianDate.prototype = new IDate({noinstance: true});\r\nJulianDate.prototype.parent = IDate;\r\nJulianDate.prototype.constructor = JulianDate;\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @protected\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nJulianDate.prototype.newRd = function (params) {\r\n\treturn new JulianRataDie(params);\r\n};\r\n\r\n/**\r\n * Return the year for the given RD\r\n * @protected\r\n * @param {number} rd RD to calculate from \r\n * @returns {number} the year for the RD\r\n */\r\nJulianDate.prototype._calcYear = function(rd) {\r\n\tvar year = Math.floor((4*(Math.floor(rd)-1) + 1464)/1461);\r\n\t\r\n\treturn (year <= 0) ? year - 1 : year;\r\n};\r\n\r\n/**\r\n * Calculate date components for the given RD date.\r\n * @protected\r\n */\r\nJulianDate.prototype._calcDateComponents = function () {\r\n\tvar remainder,\r\n\t\tcumulative,\r\n\t\trd = this.rd.getRataDie();\r\n\t\r\n\tthis.year = this._calcYear(rd);\r\n\r\n\tif (typeof(this.offset) === \"undefined\") {\r\n\t\tthis.year = this._calcYear(rd);\r\n\t\t\r\n\t\t// now offset the RD by the time zone, then recalculate in case we were \r\n\t\t// near the year boundary\r\n\t\tif (!this.tz) {\r\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t}\r\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\r\n\t}\r\n\r\n\tif (this.offset !== 0) {\r\n\t\trd += this.offset;\r\n\t\tthis.year = this._calcYear(rd);\r\n\t}\r\n\t\r\n\tvar jan1 = this.newRd({\r\n\t\tyear: this.year,\r\n\t\tmonth: 1,\r\n\t\tday: 1,\r\n\t\thour: 0,\r\n\t\tminute: 0,\r\n\t\tsecond: 0,\r\n\t\tmillisecond: 0\r\n\t});\r\n\tremainder = rd + 1 - jan1.getRataDie();\r\n\t\r\n\tcumulative = this.cal.isLeapYear(this.year) ? \r\n\t\tJulianCal.cumMonthLengthsLeap : \r\n\t\tJulianCal.cumMonthLengths; \r\n\t\r\n\tthis.month = SearchUtils.bsearch(Math.floor(remainder), cumulative);\r\n\tremainder = remainder - cumulative[this.month-1];\r\n\t\r\n\tthis.day = Math.floor(remainder);\r\n\tremainder -= this.day;\r\n\t// now convert to milliseconds for the rest of the calculation\r\n\tremainder = Math.round(remainder * 86400000);\r\n\t\r\n\tthis.hour = Math.floor(remainder/3600000);\r\n\tremainder -= this.hour * 3600000;\r\n\t\r\n\tthis.minute = Math.floor(remainder/60000);\r\n\tremainder -= this.minute * 60000;\r\n\t\r\n\tthis.second = Math.floor(remainder/1000);\r\n\tremainder -= this.second * 1000;\r\n\t\r\n\tthis.millisecond = remainder;\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nJulianDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\r\n\treturn MathUtils.mod(rd-2, 7);\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nJulianDate.prototype.getCalendar = function() {\r\n\treturn \"julian\";\r\n};\r\n\r\n//register with the factory method\r\nIDate._constructors[\"julian\"] = JulianDate;\r\n\r\nmodule.exports = JulianDate;","/*\r\n * PersianAlgoDate.js - Represent a date in the Persian algorithmic calendar\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nLocale.js\r\nLocaleInfo.js\r\nTimeZone.js\r\nIDate.js\r\nPersianAlgoCal.js \r\nSearchUtils.js\r\nMathUtils.js\r\nPersAlgoRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar SearchUtils = require(\"./SearchUtils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar PersianAlgoCal = require(\"./PersianAlgoCal.js\");\r\nvar PersAlgoRataDie = require(\"./PersAlgoRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * \r\n * Construct a new Persian date object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \r\n * of this persian date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * \r\n * <li><i>locale</i> - locale for this persian date. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale.\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Persian date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends IDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\r\n */\r\nvar PersianAlgoDate = function(params) {\r\n\tthis.cal = new PersianAlgoCal();\r\n\tthis.timezone = \"local\";\r\n\t\r\n\tif (params) {\r\n\t\tif (params.locale) {\r\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t\t\tvar li = new LocaleInfo(this.locale);\r\n\t\t\tthis.timezone = li.getTimeZone(); \r\n\t\t}\r\n\t\tif (params.timezone) {\r\n\t\t\tthis.timezone = params.timezone;\r\n\t\t}\r\n\t\t\r\n\t\tif (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\tparams.minute || params.second || params.millisecond ) {\r\n\t\t\t/**\r\n\t\t\t * Year in the Persian calendar.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.year = parseInt(params.year, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The month number, ranging from 1 to 12\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.month = parseInt(params.month, 10) || 1;\r\n\r\n\t\t\t/**\r\n\t\t\t * The day of the month. This ranges from 1 to 31.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.day = parseInt(params.day, 10) || 1;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\r\n\t\t\t * stored unambiguously in the 24-hour clock.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The minute of the hours. Ranges from 0 to 59.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The second of the minute. Ranges from 0 to 59.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.second = parseInt(params.second, 10) || 0;\r\n\r\n\t\t\t/**\r\n\t\t\t * The millisecond of the second. Ranges from 0 to 999.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The day of the year. Ranges from 1 to 366.\r\n\t\t\t * @type number\r\n\t\t\t */\r\n\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\r\n\r\n\t\t\tif (typeof(params.dst) === 'boolean') {\r\n\t\t\t\tthis.dst = params.dst;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.rd = this.newRd(this);\r\n\t\t\t\r\n\t\t\t// add the time zone offset to the rd to convert to UTC\r\n\t\t\tif (!this.tz) {\r\n\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t}\r\n\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \r\n\t\t\t// are set in order to figure out which time zone rules apply and \r\n\t\t\t// what the offset is at that point in the year\r\n\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\r\n\t\t\tif (this.offset !== 0) {\r\n\t\t\t\tthis.rd = this.newRd({\r\n\t\t\t\t\trd: this.rd.getRataDie() - this.offset\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (!this.rd) {\r\n\t\tthis.rd = this.newRd(params);\r\n\t\tthis._calcDateComponents();\r\n\t}\r\n};\r\n\r\nPersianAlgoDate.prototype = new IDate({noinstance: true});\r\nPersianAlgoDate.prototype.parent = IDate;\r\nPersianAlgoDate.prototype.constructor = PersianAlgoDate;\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @protected\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nPersianAlgoDate.prototype.newRd = function (params) {\r\n\treturn new PersAlgoRataDie(params);\r\n};\r\n\r\n/**\r\n * Return the year for the given RD\r\n * @protected\r\n * @param {number} rd RD to calculate from \r\n * @returns {number} the year for the RD\r\n */\r\nPersianAlgoDate.prototype._calcYear = function(rd) {\r\n\tvar shiftedRd = rd - 173126;\r\n\tvar numberOfCycles = Math.floor(shiftedRd / 1029983);\r\n\tvar shiftedDayInCycle = MathUtils.mod(shiftedRd, 1029983);\r\n\tvar yearInCycle = (shiftedDayInCycle === 1029982) ? 2820 : Math.floor((2816 * shiftedDayInCycle + 1031337) / 1028522);\r\n\tvar year = 474 + 2820 * numberOfCycles + yearInCycle;\r\n\treturn (year > 0) ? year : year - 1;\r\n};\r\n\r\n/**\r\n * @private\r\n * Calculate date components for the given RD date.\r\n */\r\nPersianAlgoDate.prototype._calcDateComponents = function () {\r\n\tvar remainder,\r\n\t\trd = this.rd.getRataDie();\r\n\t\r\n\tthis.year = this._calcYear(rd);\r\n\t\r\n\tif (typeof(this.offset) === \"undefined\") {\r\n\t\t// now offset the RD by the time zone, then recalculate in case we were \r\n\t\t// near the year boundary\r\n\t\tif (!this.tz) {\r\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t}\r\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\r\n\t}\r\n\t\r\n\tif (this.offset !== 0) {\r\n\t\trd += this.offset;\r\n\t\tthis.year = this._calcYear(rd);\r\n\t}\r\n\t\r\n\t//console.log(\"PersAlgoDate.calcComponent: calculating for rd \" + rd);\r\n\t//console.log(\"PersAlgoDate.calcComponent: year is \" + ret.year);\r\n\tvar yearStart = this.newRd({\r\n\t\tyear: this.year,\r\n\t\tmonth: 1,\r\n\t\tday: 1,\r\n\t\thour: 0,\r\n\t\tminute: 0,\r\n\t\tsecond: 0,\r\n\t\tmillisecond: 0\r\n\t});\r\n\tremainder = rd - yearStart.getRataDie() + 1;\r\n\t\r\n\tthis.dayOfYear = remainder;\r\n\t\r\n\t//console.log(\"PersAlgoDate.calcComponent: remainder is \" + remainder);\r\n\t\r\n\tthis.month = SearchUtils.bsearch(remainder, PersAlgoRataDie.cumMonthLengths);\r\n\tremainder -= PersAlgoRataDie.cumMonthLengths[this.month-1];\r\n\t\r\n\t//console.log(\"PersAlgoDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\r\n\t\r\n\tthis.day = Math.floor(remainder);\r\n\tremainder -= this.day;\r\n\t\r\n\t//console.log(\"PersAlgoDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\r\n\t\r\n\t// now convert to milliseconds for the rest of the calculation\r\n\tremainder = Math.round(remainder * 86400000);\r\n\t\r\n\tthis.hour = Math.floor(remainder/3600000);\r\n\tremainder -= this.hour * 3600000;\r\n\t\r\n\tthis.minute = Math.floor(remainder/60000);\r\n\tremainder -= this.minute * 60000;\r\n\t\r\n\tthis.second = Math.floor(remainder/1000);\r\n\tremainder -= this.second * 1000;\r\n\t\r\n\tthis.millisecond = remainder;\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nPersianAlgoDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.getRataDie());\r\n\treturn MathUtils.mod(rd-3, 7);\r\n};\r\n\r\n/**\r\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \r\n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and \r\n * December 31st is 365 in regular years, or 366 in leap years.\r\n * @return {number} the ordinal day of the year\r\n */\r\nPersianAlgoDate.prototype.getDayOfYear = function() {\r\n\treturn PersAlgoRataDie.cumMonthLengths[this.month-1] + this.day;\r\n};\r\n\r\n/**\r\n * Return the era for this date as a number. The value for the era for Persian \r\n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno \r\n * persico or AP). \r\n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, \r\n * there is a year 0, so any years that are negative or zero are BP.\r\n * @return {number} 1 if this date is in the common era, -1 if it is before the \r\n * common era \r\n */\r\nPersianAlgoDate.prototype.getEra = function() {\r\n\treturn (this.year < 1) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nPersianAlgoDate.prototype.getCalendar = function() {\r\n\treturn \"persian-algo\";\r\n};\r\n\r\n// register with the factory method\r\nIDate._constructors[\"persian-algo\"] = PersianAlgoDate;\r\n\r\nmodule.exports = PersianAlgoDate;","/*\r\n * AddressFmt.js - Format an address\r\n * \r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js \r\nLocale.js\r\nAddress.js\r\nIString.js\r\nUtils.js\r\nJSUtils.js\r\n*/\r\n\r\n// !data address\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar Address = require(\"./Address.js\");\r\nvar IString = require(\"./IString.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new formatter object to format physical addresses in a particular way.\r\n *\r\n * The options object may contain the following properties, both of which are optional:\r\n *\r\n * <ul>\r\n * <li><i>locale</i> - the locale to use to format this address. If not specified, it uses the default locale\r\n * \r\n * <li><i>style</i> - the style of this address. The default style for each country usually includes all valid \r\n * fields for that country.\r\n * \r\n * <li><i>onLoad</i> - a callback function to call when the address info for the\r\n * locale is fully loaded and the address has been parsed. When the onLoad \r\n * option is given, the address formatter object \r\n * will attempt to load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two. \r\n * \r\n * <li><i>sync</i> - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while. \r\n *\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * \r\n * @constructor\r\n * @param {Object} options options that configure how this formatter should work\r\n * Returns a formatter instance that can format multiple addresses.\r\n */\r\nvar AddressFmt = function(options) {\r\n\tthis.sync = true;\r\n\tthis.styleName = 'default';\r\n\tthis.loadParams = {};\r\n\tthis.locale = new Locale();\r\n\t\r\n\tif (options) {\r\n\t\tif (options.locale) {\r\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tthis.sync = (options.sync == true);\r\n\t\t}\r\n\t\t\r\n\t\tif (options.style) {\r\n\t\t\tthis.styleName = options.style;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.loadParams) {\r\n\t\t\tthis.loadParams = options.loadParams;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// console.log(\"Creating formatter for region: \" + this.locale.region);\r\n\tUtils.loadData({\r\n\t\tname: \"address.json\",\r\n\t\tobject: AddressFmt, \r\n\t\tlocale: this.locale,\r\n\t\tsync: this.sync, \r\n\t\tloadParams: this.loadParams, \r\n\t\tcallback: /** @type function(Object?):undefined */ ilib.bind(this, function(info) {\r\n\t\t\tif (!info || JSUtils.isEmpty(info)) {\r\n\t\t\t\t// load the \"unknown\" locale instead\r\n\t\t\t\tUtils.loadData({\r\n\t\t\t\t\tname: \"address.json\",\r\n\t\t\t\t\tobject: AddressFmt, \r\n\t\t\t\t\tlocale: new Locale(\"XX\"),\r\n\t\t\t\t\tsync: this.sync, \r\n\t\t\t\t\tloadParams: this.loadParams, \r\n\t\t\t\t\tcallback: /** @type function(Object?):undefined */ ilib.bind(this, function(info) {\r\n\t\t\t\t\t\tthis.info = info;\r\n\t\t\t\t\t\tthis._init();\r\n\t\t\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.info = info;\r\n\t\t\t\tthis._init();\r\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nAddressFmt.prototype._init = function () {\r\n\tthis.style = this.info && this.info.formats && this.info.formats[this.styleName];\r\n\t\r\n\t// use generic default -- should not happen, but just in case...\r\n\tthis.style = this.style || (this.info && this.info.formats[\"default\"]) || \"{streetAddress}\\n{locality} {region} {postalCode}\\n{country}\";\r\n};\r\n\r\n/**\r\n * This function formats a physical address (Address instance) for display. \r\n * Whitespace is trimmed from the beginning and end of final resulting string, and \r\n * multiple consecutive whitespace characters in the middle of the string are \r\n * compressed down to 1 space character.\r\n * \r\n * If the Address instance is for a locale that is different than the locale for this\r\n * formatter, then a hybrid address is produced. The country name is located in the\r\n * correct spot for the current formatter's locale, but the rest of the fields are\r\n * formatted according to the default style of the locale of the actual address.\r\n * \r\n * Example: a mailing address in China, but formatted for the US might produce the words\r\n * \"People's Republic of China\" in English at the last line of the address, and the \r\n * Chinese-style address will appear in the first line of the address. In the US, the\r\n * country is on the last line, but in China the country is usually on the first line.\r\n *\r\n * @param {Address} address Address to format\r\n * @eturns {string} Returns a string containing the formatted address\r\n */\r\nAddressFmt.prototype.format = function (address) {\r\n\tvar ret, template, other, format;\r\n\t\r\n\tif (!address) {\r\n\t\treturn \"\";\r\n\t}\r\n\t// console.log(\"formatting address: \" + JSON.stringify(address));\r\n\tif (address.countryCode && \r\n\t\t\taddress.countryCode !== this.locale.region && \r\n\t\t\tLocale._isRegionCode(this.locale.region) && \r\n\t\t\tthis.locale.region !== \"XX\") {\r\n\t\t// we are formatting an address that is sent from this country to another country,\r\n\t\t// so only the country should be in this locale, and the rest should be in the other\r\n\t\t// locale\r\n\t\t// console.log(\"formatting for another locale. Loading in its settings: \" + address.countryCode);\r\n\t\tother = new AddressFmt({\r\n\t\t\tlocale: new Locale(address.countryCode), \r\n\t\t\tstyle: this.styleName\r\n\t\t});\r\n\t\treturn other.format(address);\r\n\t}\r\n\t\r\n\tif (typeof(this.style) === 'object') {\r\n\t\tformat = this.style[address.format || \"latin\"];\r\n\t} else {\r\n\t\tformat = this.style;\r\n\t}\r\n\t\r\n\t// console.log(\"Using format: \" + format);\r\n\t// make sure we have a blank string for any missing parts so that\r\n\t// those template parts get blanked out\r\n\tvar params = {\r\n\t\tcountry: address.country || \"\",\r\n\t\tregion: address.region || \"\",\r\n\t\tlocality: address.locality || \"\",\r\n\t\tstreetAddress: address.streetAddress || \"\",\r\n\t\tpostalCode: address.postalCode || \"\",\r\n\t\tpostOffice: address.postOffice || \"\"\r\n\t};\r\n\ttemplate = new IString(format);\r\n\tret = template.format(params);\r\n\tret = ret.replace(/[ \\t]+/g, ' ');\r\n\tret = ret.replace(\"\\n \", \"\\n\");\r\n\tret = ret.replace(\" \\n\", \"\\n\");\r\n\treturn ret.replace(/\\n+/g, '\\n').trim();\r\n};\r\n\r\nmodule.exports = AddressFmt;\r\n","/*\r\n * NameFmt.js - Format person names for display\r\n * \r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nLocale.js\r\nIString.js\r\nName.js\r\nisPunct.js\r\nUtils.js\r\n*/\r\n\r\n// !data name\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\n\r\nvar IString = require(\"./IString.js\");\r\nvar Name = require(\"./Name.js\");\r\nvar CType = require(\"./CType.js\");\r\nvar isPunct = require(\"./isPunct.js\");\r\n\r\n/**\r\n * @class\r\n * Creates a formatter that can format person name instances (Name) for display to\r\n * a user. The options may contain the following properties:\r\n * \r\n * <ul>\r\n * <li><i>locale</i> - Use the conventions of the given locale to construct the name format. \r\n * <li><i>style</i> - Format the name with the given style. The value of this property\r\n * should be one of the following strings: \r\n *   <ul>\r\n *     <li><i>short</i> - Format a short name with just the given and family names.\r\n *     <li><i>medium</i> - Format a medium-length name with the given, middle, and family names.\r\n *     <li><i>long</i> - Format a long name with all names available in the given name object, including\r\n *     prefixes.\r\n *     <li><i>full</i> - Format a long name with all names available in the given name object, including\r\n *     prefixes and suffixes.\r\n *   </ul>\r\n * <li><i>components</i> - Format the name with the given components in the correct\r\n * order for those components. Components are encoded as a string of letters representing\r\n * the desired components:\r\n *   <ul>\r\n *     <li><i>p</i> - prefixes\r\n *     <li><i>g</i> - given name\r\n *     <li><i>m</i> - middle names\r\n *     <li><i>f</i> - family name\r\n *     <li><i>s</i> - suffixes\r\n *   </ul>\r\n * <p>\r\n * \r\n * For example, the string \"pf\" would mean to only format any prefixes and family names \r\n * together and leave out all the other parts of the name.<p>\r\n * \r\n * The components can be listed in any order in the string. The <i>components</i> option \r\n * overrides the <i>style</i> option if both are specified.\r\n *\r\n * <li>onLoad - a callback function to call when the locale info object is fully \r\n * loaded. When the onLoad option is given, the localeinfo object will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the \r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two.\r\n * \r\n * <li>sync - tell whether to load any missing locale data synchronously or \r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while. \r\n *\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the \r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object \r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * \r\n * Formatting names is a locale-dependent function, as the order of the components \r\n * depends on the locale. The following explains some of the details:<p>\r\n * \r\n * <ul>\r\n * <li>In Western countries, the given name comes first, followed by a space, followed \r\n * by the family name. In Asian countries, the family name comes first, followed immediately\r\n * by the given name with no space. But, that format is only used with Asian names written\r\n * in ideographic characters. In Asian countries, especially ones where both an Asian and \r\n * a Western language are used (Hong Kong, Singapore, etc.), the convention is often to \r\n * follow the language of the name. That is, Asian names are written in Asian style, and \r\n * Western names are written in Western style. This class follows that convention as\r\n * well. \r\n * <li>In other Asian countries, Asian names\r\n * written in Latin script are written with Asian ordering. eg. \"Xu Ping-an\" instead\r\n * of the more Western order \"Ping-an Xu\", as the order is thought to go with the style\r\n * that is appropriate for the name rather than the style for the language being written.\r\n * <li>In some Spanish speaking countries, people often take both their maternal and\r\n * paternal last names as their own family name. When formatting a short or medium style\r\n * of that family name, only the paternal name is used. In the long style, all the names\r\n * are used. eg. \"Juan Julio Raul Lopez Ortiz\" took the name \"Lopez\" from his father and \r\n * the name \"Ortiz\" from his mother. His family name would be \"Lopez Ortiz\". The formatted\r\n * short style of his name would be simply \"Juan Lopez\" which only uses his paternal\r\n * family name of \"Lopez\".\r\n * <li>In many Western languages, it is common to use auxillary words in family names. For\r\n * example, the family name of \"Ludwig von Beethoven\" in German is \"von Beethoven\", not \r\n * \"Beethoven\". This class ensures that the family name is formatted correctly with \r\n * all auxillary words.   \r\n * </ul>\r\n * \r\n * \r\n * @constructor\r\n * @param {Object} options A set of options that govern how the formatter will behave\r\n */\r\nvar NameFmt = function(options) {\r\n\tvar sync = true;\r\n\t\r\n\tthis.style = \"short\";\r\n\tthis.loadParams = {};\r\n\t\r\n\tif (options) {\r\n\t\tif (options.locale) {\r\n\t\t\tthis.locale = (typeof(options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.style) {\r\n\t\t\tthis.style = options.style;\r\n\t\t}\r\n\t\t\r\n\t\tif (options.components) {\r\n\t\t\tthis.components = options.components;\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof(options.sync) !== 'undefined') {\r\n\t\t\tsync = (options.sync == true);\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof(options.loadParams) !== 'undefined') {\r\n\t\t\tthis.loadParams = options.loadParams;\r\n\t\t}\r\n\t}\r\n\t\r\n\t// set up defaults in case we need them\r\n\tthis.defaultEuroTemplate = new IString(\"{prefix} {givenName} {middleName} {familyName}{suffix}\");\r\n\tthis.defaultAsianTemplate = new IString(\"{prefix}{familyName}{givenName}{middleName}{suffix}\");\r\n\tthis.useFirstFamilyName = false;\r\n\r\n\tswitch (this.style) {\r\n\t\tdefault:\r\n\t\tcase \"s\":\r\n\t\tcase \"short\":\r\n\t\t\tthis.style = \"short\";\r\n\t\t\tbreak;\r\n\t\tcase \"m\":\r\n\t\tcase \"medium\":\r\n\t\t\tthis.style = \"medium\";\r\n\t\t\tbreak;\r\n\t\tcase \"l\":\r\n\t\tcase \"long\":\r\n\t\t\tthis.style = \"long\";\r\n\t\t\tbreak;\r\n\t\tcase \"f\":\r\n\t\tcase \"full\":\r\n\t\t\tthis.style = \"full\";\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (!Name.cache) {\r\n\t\tName.cache = {};\r\n\t}\r\n\r\n\tthis.locale = this.locale || new Locale();\r\n\t\r\n\tisPunct._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {\r\n\t\tUtils.loadData({\r\n\t\t\tobject: Name, \r\n\t\t\tlocale: this.locale, \r\n\t\t\tname: \"name.json\", \r\n\t\t\tsync: sync, \r\n\t\t\tloadParams: this.loadParams, \r\n\t\t\tcallback: ilib.bind(this, function (info) {\r\n\t\t\t\tif (!info) {\r\n\t\t\t\t\tinfo = Name.defaultInfo;\r\n\t\t\t\t\tvar spec = this.locale.getSpec().replace(/-/g, \"_\");\r\n\t\t\t\t\tName.cache[spec] = info;\r\n\t\t\t\t}\r\n\t\t\t\tthis.info = info;\r\n\t\t\t\tthis._init();\r\n\t\t\t\tif (options && typeof(options.onLoad) === 'function') {\r\n\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}));\r\n};\r\n\r\nNameFmt.prototype = {\r\n\t/**                          \r\n\t * @protected\r\n\t */\r\n\t_init: function() {\r\n\t\tif (this.components) {\r\n\t\t\tvar valids = {\"p\":1,\"g\":1,\"m\":1,\"f\":1,\"s\":1},\r\n\t\t\t\tarr = this.components.split(\"\");\r\n\t\t\tthis.comps = {};\r\n\t\t\tfor (var i = 0; i < arr.length; i++) {\r\n\t\t\t\tif (valids[arr[i].toLowerCase()]) {\r\n\t\t\t\t\tthis.comps[arr[i].toLowerCase()] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.comps = this.info.components[this.style];\r\n\t\t}\r\n\r\n\t\tthis.template = new IString(this.info.format);\r\n\t\t\r\n\t\tif (this.locale.language === \"es\" && (this.style !== \"long\" && this.style !== \"full\")) {\r\n\t\t\tthis.useFirstFamilyName = true;\t// in spanish, they have 2 family names, the maternal and paternal\r\n\t\t}\r\n\r\n\t\tthis.isAsianLocale = (this.info.nameStyle === \"asian\");\r\n\t},\r\n\r\n\t/**\r\n\t * adjoin auxillary words to their head words\r\n\t * @protected\r\n\t */\r\n\t_adjoinAuxillaries: function (parts, namePrefix) {\r\n\t\tvar start, i, prefixArray, prefix, prefixLower;\r\n\t\t\r\n\t\t//console.info(\"_adjoinAuxillaries: finding and adjoining aux words in \" + parts.join(' '));\r\n\t\t\r\n\t\tif ( this.info.auxillaries && (parts.length > 2 || namePrefix) ) {\r\n\t\t\tfor ( start = 0; start < parts.length-1; start++ ) {\r\n\t\t\t\tfor ( i = parts.length; i > start; i-- ) {\r\n\t\t\t\t\tprefixArray = parts.slice(start, i);\r\n\t\t\t\t\tprefix = prefixArray.join(' ');\r\n\t\t\t\t\tprefixLower = prefix.toLowerCase();\r\n\t\t\t\t\tprefixLower = prefixLower.replace(/[,\\.]/g, '');  // ignore commas and periods\r\n\t\t\t\t\t\r\n\t\t\t\t\t//console.info(\"_adjoinAuxillaries: checking aux prefix: '\" + prefixLower + \"' which is \" + start + \" to \" + i);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ( prefixLower in this.info.auxillaries ) {\r\n\t\t\t\t\t\t//console.info(\"Found! Old parts list is \" + JSON.stringify(parts));\r\n\t\t\t\t\t\tparts.splice(start, i+1-start, prefixArray.concat(parts[i]));\r\n\t\t\t\t\t\t//console.info(\"_adjoinAuxillaries: Found! New parts list is \" + JSON.stringify(parts));\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//console.info(\"_adjoinAuxillaries: done. Result is \" + JSON.stringify(parts));\r\n\r\n\t\treturn parts;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the locale for this formatter instance.\r\n\t * @return {Locale} the locale instance for this formatter\r\n\t */\r\n\tgetLocale: function () {\r\n\t\treturn this.locale;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the style of names returned by this formatter\r\n\t * @return {string} the style of names returned by this formatter\r\n\t */\r\n\tgetStyle: function () {\r\n\t\treturn this.style;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Return the list of components used to format names in this formatter\r\n\t * @return {string} the list of components\r\n\t */\r\n\tgetComponents: function () {\r\n\t\treturn this.components;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Format the name for display in the current locale with the options set up\r\n\t * in the constructor of this formatter instance.<p>\r\n\t * \r\n\t * If the name does not contain all the parts required for the style, those parts\r\n\t * will be left blank.<p>\r\n\t * \r\n\t * There are two basic styles of formatting: European, and Asian. If this formatter object\r\n\t * is set for European style, but an Asian name is passed to the format method, then this\r\n\t * method will format the Asian name with a generic Asian template. Similarly, if the\r\n\t * formatter is set for an Asian style, and a European name is passed to the format method,\r\n\t * the formatter will use a generic European template.<p>\r\n\t * \r\n\t * This means it is always safe to format any name with a formatter for any locale. You should\r\n\t * always get something at least reasonable as output.<p>\r\n\t * \r\n\t * @param {Name} name the name to format\r\n\t * @return {string|undefined} the name formatted according to the style of this formatter instance\r\n\t */\r\n\tformat: function(name) {\r\n\t\tvar formatted, temp, modified, isAsianName;\r\n\t\tvar currentLanguage = this.locale.getLanguage();\r\n\t\t \r\n\t\tif (!name || typeof(name) !== 'object') {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t\r\n\t\tif ((typeof(name.isAsianName) === 'boolean' && !name.isAsianName) ||\r\n\t\t\t\tName._isEuroName([name.givenName, name.middleName, name.familyName].join(\"\"), currentLanguage)) {\r\n\t\t\tisAsianName = false;\t// this is a euro name, even if the locale is asian\r\n\t\t\tmodified = name.clone();\r\n\t\t\t\r\n\t\t\t// handle the case where there is no space if there is punctuation in the suffix like \", Phd\". \r\n\t\t\t// Otherwise, put a space in to transform \"PhD\" to \" PhD\"\r\n\t\t\t/*\r\n\t\t\tconsole.log(\"suffix is \" + modified.suffix);\r\n\t\t\tif ( modified.suffix ) {\r\n\t\t\t\tconsole.log(\"first char is \" + modified.suffix.charAt(0));\r\n\t\t\t\tconsole.log(\"isPunct(modified.suffix.charAt(0)) is \" + isPunct(modified.suffix.charAt(0)));\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\tif (modified.suffix && isPunct(modified.suffix.charAt(0)) === false) {\r\n\t\t\t\tmodified.suffix = ' ' + modified.suffix; \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.useFirstFamilyName && name.familyName) {\r\n\t\t\t\tvar familyNameParts = modified.familyName.trim().split(' ');\r\n\t\t\t\tif (familyNameParts.length > 1) {\r\n\t\t\t\t\tfamilyNameParts = this._adjoinAuxillaries(familyNameParts, name.prefix);\r\n\t\t\t\t}\t//in spain and mexico, we parse names differently than in the rest of the world\r\n\t\r\n\t\t\t\tmodified.familyName = familyNameParts[0];\r\n\t\t\t}\r\n\t\t\r\n\t\t\tmodified._joinNameArrays();\r\n\t\t} else {\r\n\t\t\tisAsianName = true;\r\n\t\t\tmodified = name;\r\n\t\t\tif (modified.suffix && currentLanguage === \"ko\" && this.info.honorifics.indexOf(name.suffix) == -1) {\r\n\t\t\t\tmodified.suffix = ' ' + modified.suffix; \r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.template || isAsianName !== this.isAsianLocale) {\r\n\t\t\ttemp = isAsianName ? this.defaultAsianTemplate : this.defaultEuroTemplate;\r\n\t\t} else {\r\n\t\t\ttemp = this.template;\r\n\t\t}\r\n\t\t\r\n\t\tvar parts = {\r\n\t\t\tprefix: this.comps[\"p\"] && modified.prefix || \"\",\r\n\t\t\tgivenName: this.comps[\"g\"] && modified.givenName || \"\",\r\n\t\t\tmiddleName: this.comps[\"m\"] && modified.middleName || \"\",\r\n\t\t\tfamilyName: this.comps[\"f\"] && modified.familyName || \"\",\r\n\t\t\tsuffix: this.comps[\"s\"] && modified.suffix || \"\"\r\n\t\t};\r\n\t\t\r\n\t\tformatted = temp.format(parts);\r\n\t\treturn formatted.replace(/\\s+/g, ' ').trim();\r\n\t}\r\n};\r\n\r\nmodule.exports = NameFmt;","/*\r\n * NumFmt.js - Number formatter definition\r\n *\r\n * Copyright © 2012-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/*\r\n!depends \r\nilib.js \r\nLocale.js\r\nLocaleInfo.js\r\nUtils.js\r\nMathUtils.js\r\nCurrency.js\r\nIString.js\r\nJSUtils.js\r\nINumber.js\r\n*/\r\n\r\n// !data localeinfo currency\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar Currency = require(\"./Currency.js\");\r\nvar IString = require(\"./IString.js\");\r\nvar INumber = require(\"./INumber.js\");\r\n\r\n/**\r\n * @class\r\n * Create a new number formatter instance. Locales differ in the way that digits\r\n * in a formatted number are grouped, in the way the decimal character is represented,\r\n * etc. Use this formatter to get it right for any locale.<p>\r\n *\r\n * This formatter can format plain numbers, currency amounts, and percentage amounts.<p>\r\n *\r\n * As with all formatters, the recommended\r\n * practice is to create one formatter and use it multiple times to format various\r\n * numbers.<p>\r\n *\r\n * The options can contain any of the following properties:\r\n *\r\n * <ul>\r\n * <li><i>locale</i> - use the conventions of the specified locale when figuring out how to\r\n * format a number.\r\n * <li><i>type</i> - the type of this formatter. Valid values are \"number\", \"currency\", or\r\n * \"percentage\". If this property is not specified, the default is \"number\".\r\n * <li><i>currency</i> - the ISO 4217 3-letter currency code to use when the formatter type\r\n * is \"currency\". This property is required for currency formatting. If the type property\r\n * is \"currency\" and the currency property is not specified, the constructor will throw a\r\n * an exception.\r\n * <li><i>maxFractionDigits</i> - the maximum number of digits that should appear in the\r\n * formatted output after the decimal. A value of -1 means unlimited, and 0 means only print\r\n * the integral part of the number.\r\n * <li><i>minFractionDigits</i> - the minimum number of fractional digits that should\r\n * appear in the formatted output. If the number does not have enough fractional digits\r\n * to reach this minimum, the number will be zero-padded at the end to get to the limit.\r\n * If the type of the formatter is \"currency\" and this\r\n * property is not specified, then the minimum fraction digits is set to the normal number\r\n * of digits used with that currency, which is almost always 0, 2, or 3 digits.\r\n * <li><i>useNative</i> - the flag used to determaine whether to use the native script settings\r\n * for formatting the numbers .\r\n * <li><i>roundingMode</i> - When the maxFractionDigits or maxIntegerDigits is specified,\r\n * this property governs how the least significant digits are rounded to conform to that\r\n * maximum. The value of this property is a string with one of the following values:\r\n * <ul>\r\n *   <li><i>up</i> - round away from zero\r\n *   <li><i>down</i> - round towards zero. This has the effect of truncating the number\r\n *   <li><i>ceiling</i> - round towards positive infinity\r\n *   <li><i>floor</i> - round towards negative infinity\r\n *   <li><i>halfup</i> - round towards nearest neighbour. If equidistant, round up.\r\n *   <li><i>halfdown</i> - round towards nearest neighbour. If equidistant, round down.\r\n *   <li><i>halfeven</i> - round towards nearest neighbour. If equidistant, round towards the even neighbour\r\n *   <li><i>halfodd</i> - round towards nearest neighbour. If equidistant, round towards the odd neighbour\r\n * </ul>\r\n * When the type of the formatter is \"currency\" and the <i>roundingMode</i> property is not\r\n * set, then the standard legal rounding rules for the locale are followed. If the type\r\n * is \"number\" or \"percentage\" and the <i>roundingMode</i> property is not set, then the\r\n * default mode is \"halfdown\".</i>.\r\n *\r\n * <li><i>style</i> - When the type of this formatter is \"currency\", the currency amount\r\n * can be formatted in the following styles: \"common\" and \"iso\". The common style is the\r\n * one commonly used in every day writing where the currency unit is represented using a\r\n * symbol. eg. \"$57.35\" for fifty-seven dollars and thirty five cents. The iso style is\r\n * the international style where the currency unit is represented using the ISO 4217 code.\r\n * eg. \"USD 57.35\" for the same amount. The default is \"common\" style if the style is\r\n * not specified.<p>\r\n *\r\n * When the type of this formatter is \"number\", the style can be one of the following:\r\n * <ul>\r\n *   <li><i>standard - format a fully specified floating point number properly for the locale\r\n *   <li><i>scientific</i> - use scientific notation for all numbers. That is, 1 integral \r\n *   digit, followed by a number of fractional digits, followed by an \"e\" which denotes \r\n *   exponentiation, followed digits which give the power of 10 in the exponent. \r\n *   <li><i>native</i> - format a floating point number using the native digits and \r\n *   formatting symbols for the script of the locale. \r\n *   <li><i>nogrouping</i> - format a floating point number without grouping digits for\r\n *   the integral portion of the number\r\n * </ul>\r\n * Note that if you specify a maximum number\r\n * of integral digits, the formatter with a standard style will give you standard\r\n * formatting for smaller numbers and scientific notation for larger numbers. The default\r\n * is standard style if this is not specified.\r\n *\r\n * <li><i>onLoad</i> - a callback function to call when the format data is fully\r\n * loaded. When the onLoad option is given, this class will attempt to\r\n * load any missing locale data using the ilib loader callback.\r\n * When the constructor is done (even if the data is already preassembled), the\r\n * onLoad function is called with the current instance as a parameter, so this\r\n * callback can be used with preassembled or dynamic loading or a mix of the two.\r\n *\r\n * <li>sync - tell whether to load any missing locale data synchronously or\r\n * asynchronously. If this option is given as \"false\", then the \"onLoad\"\r\n * callback must be given, as the instance returned from this constructor will\r\n * not be usable for a while.\r\n *\r\n * <li><i>loadParams</i> - an object containing parameters to pass to the\r\n * loader callback function when locale data is missing. The parameters are not\r\n * interpretted or modified in any way. They are simply passed along. The object\r\n * may contain any property/value pairs as long as the calling code is in\r\n * agreement with the loader callback function as to what those parameters mean.\r\n * </ul>\r\n * <p>\r\n *\r\n *\r\n * @constructor\r\n * @param {Object.<string,*>} options A set of options that govern how the formatter will behave\r\n */\r\nvar NumFmt = function (options) {\r\n\tvar sync = true;\r\n\tthis.locale = new Locale();\r\n\t/** \r\n\t * @private\r\n\t * @type {string} \r\n\t */\r\n\tthis.type = \"number\";\r\n\tvar loadParams = undefined;\r\n\r\n\tif (options) {\r\n\t\tif (options.locale) {\r\n\t\t\tthis.locale = (typeof (options.locale) === 'string') ? new Locale(options.locale) : options.locale;\r\n\t\t}\r\n\r\n\t\tif (options.type) {\r\n\t\t\tif (options.type === 'number' ||\r\n\t\t\t\toptions.type === 'currency' ||\r\n\t\t\t\toptions.type === 'percentage') {\r\n\t\t\t\tthis.type = options.type;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (options.currency) {\r\n\t\t\t/** \r\n\t\t\t * @private \r\n\t\t\t * @type {string} \r\n\t\t\t */\r\n\t\t\tthis.currency = options.currency;\r\n\t\t}\r\n\r\n\t\tif (typeof (options.maxFractionDigits) === 'number') {\r\n\t\t\t/** \r\n\t\t\t * @private \r\n\t\t\t * @type {number|undefined} \r\n\t\t\t */\r\n\t\t\tthis.maxFractionDigits = this._toPrimitive(options.maxFractionDigits);\r\n\t\t}\r\n\t\tif (typeof (options.minFractionDigits) === 'number') {\r\n\t\t\t/** \r\n\t\t\t * @private \r\n\t\t\t * @type {number|undefined} \r\n\t\t\t */\r\n\t\t\tthis.minFractionDigits = this._toPrimitive(options.minFractionDigits);\r\n\t\t\t// enforce the limits to avoid JS exceptions\r\n\t\t\tif (this.minFractionDigits < 0) {\r\n\t\t\t\tthis.minFractionDigits = 0;\r\n\t\t\t}\r\n\t\t\tif (this.minFractionDigits > 20) {\r\n\t\t\t\tthis.minFractionDigits = 20;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (options.style) {\r\n\t\t\t/** \r\n\t\t\t * @private \r\n\t\t\t * @type {string} \r\n\t\t\t */\r\n\t\t\tthis.style = options.style;\r\n\t\t}\r\n\t\tif (typeof(options.useNative) === 'boolean') {\r\n\t\t\t/** \r\n\t\t\t * @private \r\n\t\t\t * @type {boolean} \r\n\t\t\t * */\r\n\t\t\tthis.useNative = options.useNative;\r\n\t\t}\r\n\t\t/** \r\n\t\t * @private \r\n\t\t * @type {string} \r\n\t\t */\r\n\t\tthis.roundingMode = options.roundingMode;\r\n\r\n\t\tif (typeof (options.sync) !== 'undefined') {\r\n\t\t\t/** @type {boolean} */\r\n\t\t\tsync = (options.sync == true);\r\n\t\t}\r\n\t\t\r\n\t\tloadParams = options.loadParams;\r\n\t}\r\n\r\n\t/** \r\n\t * @private \r\n\t * @type {LocaleInfo|undefined} \r\n\t */\r\n\tthis.localeInfo = undefined;\r\n\t\r\n\tnew LocaleInfo(this.locale, {\r\n\t\tsync: sync,\r\n\t\tloadParams: loadParams,\r\n\t\tonLoad: ilib.bind(this, function (li) {\r\n\t\t\t/** \r\n\t\t\t * @private \r\n\t\t\t * @type {LocaleInfo|undefined} \r\n\t\t\t */\r\n\t\t\tthis.localeInfo = li;\r\n\r\n\t\t\tif (this.type === \"number\") {\r\n\t\t\t\tthis.templateNegative = new IString(this.localeInfo.getNegativeNumberFormat() || \"-{n}\");\r\n\t\t\t} else if (this.type === \"currency\") {\r\n\t\t\t\tvar templates;\r\n\r\n\t\t\t\tif (!this.currency || typeof (this.currency) != 'string') {\r\n\t\t\t\t\tthrow \"A currency property is required in the options to the number formatter constructor when the type property is set to currency.\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnew Currency({\r\n\t\t\t\t\tlocale: this.locale,\r\n\t\t\t\t\tcode: this.currency,\r\n\t\t\t\t\tsync: sync,\r\n\t\t\t\t\tloadParams: loadParams,\r\n\t\t\t\t\tonLoad: ilib.bind(this, function (cur) {\r\n\t\t\t\t\t\tthis.currencyInfo = cur;\r\n\t\t\t\t\t\tif (this.style !== \"common\" && this.style !== \"iso\") {\r\n\t\t\t\t\t\t\tthis.style = \"common\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (typeof(this.maxFractionDigits) !== 'number' && typeof(this.minFractionDigits) !== 'number') {\r\n\t\t\t\t\t\t\tthis.minFractionDigits = this.maxFractionDigits = this.currencyInfo.getFractionDigits();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttemplates = this.localeInfo.getCurrencyFormats();\r\n\t\t\t\t\t\tthis.template = new IString(templates[this.style] || templates.common);\r\n\t\t\t\t\t\tthis.templateNegative = new IString(templates[this.style + \"Negative\"] || templates[\"commonNegative\"]);\r\n\t\t\t\t\t\tthis.sign = (this.style === \"iso\") ? this.currencyInfo.getCode() : this.currencyInfo.getSign();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!this.roundingMode) {\r\n\t\t\t\t\t\t\tthis.roundingMode = this.currencyInfo && this.currencyInfo.roundingMode;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._init();\r\n\r\n\t\t\t\t\t\tif (options && typeof (options.onLoad) === 'function') {\r\n\t\t\t\t\t\t\toptions.onLoad(this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t} else if (this.type === \"percentage\") {\r\n\t\t\t\tthis.template =  new IString(this.localeInfo.getPercentageFormat() || \"{n}%\");\r\n\t\t\t\tthis.templateNegative = new IString(this.localeInfo.getNegativePercentageFormat() || this.localeInfo.getNegativeNumberFormat() + \"%\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._init();\r\n\r\n\t\t\tif (options && typeof (options.onLoad) === 'function') {\r\n\t\t\t\toptions.onLoad(this);\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n};\r\n\r\n/**\r\n * Return an array of available locales that this formatter can format\r\n * @static\r\n * @return {Array.<Locale>|undefined} an array of available locales\r\n */\r\nNumFmt.getAvailableLocales = function () {\r\n\treturn undefined;\r\n};\r\n\r\n/**\r\n * @private\r\n * @const\r\n * @type string\r\n */\r\nNumFmt.zeros = \"0000000000000000000000000000000000000000000000000000000000000000000000\";\r\n\r\nNumFmt.prototype = {\r\n\t/**\r\n\t * Return true if this formatter uses native digits to format the number. If the useNative\r\n\t * option is given to the constructor, then this flag will be honoured. If the useNative\r\n\t * option is not given to the constructor, this this formatter will use native digits if\r\n\t * the locale typically uses native digits.\r\n\t * \r\n\t *  @return {boolean} true if this formatter will format with native digits, false otherwise\r\n\t */\r\n\tgetUseNative: function() {\r\n\t\tif (typeof(this.useNative) === \"boolean\") {\r\n\t\t\treturn this.useNative;\r\n\t\t} \r\n\t\treturn (this.localeInfo.getDigitsStyle() === \"native\");\r\n\t},\r\n\t\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_init: function () {\r\n\t\tif (this.maxFractionDigits < this.minFractionDigits) {\r\n\t\t\tthis.minFractionDigits = this.maxFractionDigits;\r\n\t\t}\r\n\r\n\t\tif (!this.roundingMode) {\r\n\t\t\tthis.roundingMode = this.localeInfo.getRoundingMode();\r\n\t\t}\r\n\r\n\t\tif (!this.roundingMode) {\r\n\t\t\tthis.roundingMode = \"halfdown\";\r\n\t\t}\r\n\r\n\t\t// set up the function, so we only have to figure it out once\r\n\t\t// and not every time we do format()\r\n\t\tthis.round = MathUtils[this.roundingMode];\r\n\t\tif (!this.round) {\r\n\t\t\tthis.roundingMode = \"halfdown\";\r\n\t\t\tthis.round = MathUtils[this.roundingMode];\r\n\t\t}\r\n\t\t\r\n\t\tif (this.style === \"nogrouping\") {\r\n\t\t\tthis.prigroupSize = this.secgroupSize = 0;\r\n\t\t} else {\r\n\t\t\tthis.prigroupSize = this.localeInfo.getPrimaryGroupingDigits();\r\n\t\t\tthis.secgroupSize = this.localeInfo.getSecondaryGroupingDigits();\r\n\t\t\tthis.groupingSeparator = this.getUseNative() ? this.localeInfo.getNativeGroupingSeparator() : this.localeInfo.getGroupingSeparator();\r\n\t\t} \r\n\t\tthis.decimalSeparator = this.getUseNative() ? this.localeInfo.getNativeDecimalSeparator() : this.localeInfo.getDecimalSeparator();\r\n\t\t\r\n\t\tif (this.getUseNative()) {\r\n\t\t\tvar nd = this.localeInfo.getNativeDigits() || this.localeInfo.getDigits();\r\n\t\t\tif (nd) {\r\n\t\t\t\tthis.digits = nd.split(\"\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.exponentSymbol = this.localeInfo.getExponential() || \"e\";\r\n\t},\r\n\r\n\t/*\r\n\t * @private\r\n\t */\r\n\t_pad: function (str, length, left) {\r\n\t\treturn (str.length >= length) ?\r\n\t\t\tstr :\r\n\t\t\t(left ?\r\n\t\t\tNumFmt.zeros.substring(0, length - str.length) + str :\r\n\t\t\tstr + NumFmt.zeros.substring(0, length - str.length));\r\n\t},\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {INumber|Number|string|number} num object, string, or number to convert to a primitive number\r\n\t * @return {number} the primitive number equivalent of the argument\r\n\t */\r\n\t_toPrimitive: function (num) {\r\n\t\tvar n = 0;\r\n\r\n\t\tswitch (typeof (num)) {\r\n\t\tcase 'number':\r\n\t\t\tn = num;\r\n\t\t\tbreak;\r\n\t\tcase 'string':\r\n\t\t\tn = parseFloat(num);\r\n\t\t\tbreak;\r\n\t\tcase 'object':\r\n\t\t\t// Number.valueOf() is incorrectly documented as being of type \"string\" rather than \"number\", so coerse \r\n\t\t\t// the type here to shut the type checker up\r\n\t\t\tn = /** @type {number} */ num.valueOf();\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn n;\r\n\t},\r\n\r\n\t/**\r\n\t * Format the number using scientific notation as a positive number. Negative\r\n\t * formatting to be applied later.\r\n\t * @private\r\n\t * @param {number} num the number to format\r\n\t * @return {string} the formatted number\r\n\t */\r\n\t_formatScientific: function (num) {\r\n\t\tvar n = new Number(num);\r\n\t\tvar formatted;\r\n\t\t\r\n\t\tvar factor,\r\n\t\t\tstr = n.toExponential(),\r\n\t\t\tparts = str.split(\"e\"),\r\n\t\t\tsignificant = parts[0],\r\n\t\t\texponent = parts[1],\r\n\t\t\tnumparts,\r\n\t\t\tintegral,\r\n\t\t\tfraction;\r\n\r\n\t\tif (this.maxFractionDigits > 0) {\r\n\t\t\t// if there is a max fraction digits setting, round the fraction to \r\n\t\t\t// the right length first by dividing or multiplying by powers of 10. \r\n\t\t\t// manipulate the fraction digits so as to\r\n\t\t\t// avoid the rounding errors of floating point numbers\r\n\t\t\tfactor = Math.pow(10, this.maxFractionDigits);\r\n\t\t\tsignificant = this.round(significant * factor) / factor;\r\n\t\t}\r\n\t\tnumparts = (\"\" + significant).split(\".\");\r\n\t\tintegral = numparts[0];\r\n\t\tfraction = numparts[1];\r\n\t\t\r\n\t\tif (typeof(this.maxFractionDigits) !== 'undefined') {\r\n\t\t\tfraction = fraction.substring(0, this.maxFractionDigits);\r\n\t\t}\r\n\t\tif (typeof(this.minFractionDigits) !== 'undefined') {\r\n\t\t\tfraction = this._pad(fraction || \"\", this.minFractionDigits, false);\r\n\t\t}\r\n\t\tformatted = integral;\r\n\t\tif (fraction.length) {\r\n\t\t\tformatted += this.decimalSeparator + fraction;\t\r\n\t\t} \r\n\t\tformatted += this.exponentSymbol + exponent;\r\n\t\treturn formatted;\r\n\t},\r\n\r\n\t/**\r\n\t * Formats the number as a positive number. Negative formatting to be applied later.\r\n\t * @private\r\n\t * @param {number} num the number to format\r\n\t * @return {string} the formatted number\r\n\t */\r\n\t_formatStandard: function (num) {\r\n\t\tvar i;\r\n\t\tvar k;\r\n\t\t\r\n\t\tif (typeof(this.maxFractionDigits) !== 'undefined' && this.maxFractionDigits > -1) {\r\n\t\t\tvar factor = Math.pow(10, this.maxFractionDigits);\r\n\t\t\tnum = this.round(num * factor) / factor;\r\n\t\t}\r\n\r\n\t\tnum = Math.abs(num);\r\n\r\n\t\tvar parts = (\"\" + num).split(\".\"),\r\n\t\t\tintegral = parts[0],\r\n\t\t\tfraction = parts[1],\r\n\t\t\tcycle,\r\n\t\t\tformatted;\r\n\t\t\r\n\t\tintegral = integral.toString();\r\n\r\n\t\tif (this.minFractionDigits > 0) {\r\n\t\t\tfraction = this._pad(fraction || \"\", this.minFractionDigits, false);\r\n\t\t}\r\n\r\n\t\tif (this.secgroupSize > 0) {\r\n\t\t\tif (integral.length > this.prigroupSize) {\r\n\t\t\t\tvar size1 = this.prigroupSize;\r\n\t\t\t\tvar size2 = integral.length;\r\n\t\t\t\tvar size3 = size2 - size1;\r\n\t\t\t\tintegral = integral.slice(0, size3) + this.groupingSeparator + integral.slice(size3);\r\n\t\t\t\tvar num_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));\r\n\t\t\t\tk = num_sec.length;\r\n\t\t\t\twhile (k > this.secgroupSize) {\r\n\t\t\t\t\tvar secsize1 = this.secgroupSize;\r\n\t\t\t\t\tvar secsize2 = num_sec.length;\r\n\t\t\t\t\tvar secsize3 = secsize2 - secsize1;\r\n\t\t\t\t\tintegral = integral.slice(0, secsize3) + this.groupingSeparator + integral.slice(secsize3);\r\n\t\t\t\t\tnum_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));\r\n\t\t\t\t\tk = num_sec.length;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tformatted = integral;\r\n\t\t} else if (this.prigroupSize !== 0) {\r\n\t\t\tcycle = MathUtils.mod(integral.length - 1, this.prigroupSize);\r\n\r\n\t\t\tformatted = \"\";\r\n\r\n\t\t\tfor (i = 0; i < integral.length - 1; i++) {\r\n\t\t\t\tformatted += integral.charAt(i);\r\n\t\t\t\tif (cycle === 0) {\r\n\t\t\t\t\tformatted += this.groupingSeparator;\r\n\t\t\t\t}\r\n\t\t\t\tcycle = MathUtils.mod(cycle - 1, this.prigroupSize);\r\n\t\t\t}\r\n\t\t\tformatted += integral.charAt(integral.length - 1);\r\n\t\t} else {\r\n\t\t\tformatted = integral;\r\n\t\t}\r\n\r\n\t\tif (fraction && (typeof(this.maxFractionDigits) === 'undefined' || this.maxFractionDigits > 0)) {\r\n\t\t\tformatted += this.decimalSeparator;\r\n\t\t\tformatted += fraction;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.digits) {\r\n\t\t\tformatted = JSUtils.mapString(formatted, this.digits);\r\n\t\t}\r\n\t\t\r\n\t\treturn formatted;\r\n\t},\r\n\r\n\t/**\r\n\t * Format a number according to the settings of this number formatter instance.\r\n\t * @param num {number|string|INumber|Number} a floating point number to format\r\n\t * @return {string} a string containing the formatted number\r\n\t */\r\n\tformat: function (num) {\r\n\t\tvar formatted, n;\r\n\r\n\t\tif (typeof (num) === 'undefined') {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\r\n\t\t// convert to a real primitive number type\r\n\t\tn = this._toPrimitive(num);\r\n\r\n\t\tif (this.type === \"number\") {\r\n\t\t\tformatted = (this.style === \"scientific\") ?\r\n\t\t\t\tthis._formatScientific(n) :\r\n\t\t\t\tthis._formatStandard(n);\r\n\r\n\t\t\tif (num < 0) {\r\n\t\t\t\tformatted = this.templateNegative.format({n: formatted});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tformatted = this._formatStandard(n);\r\n\t\t\tvar template = (n < 0) ? this.templateNegative : this.template;\r\n\t\t\tformatted = template.format({\r\n\t\t\t\tn: formatted,\r\n\t\t\t\ts: this.sign\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the type of formatter. Valid values are \"number\", \"currency\", and\r\n\t * \"percentage\".\r\n\t *\r\n\t * @return {string} the type of formatter\r\n\t */\r\n\tgetType: function () {\r\n\t\treturn this.type;\r\n\t},\r\n\r\n\t/**\r\n\t * Return the locale for this formatter instance.\r\n\t * @return {Locale} the locale instance for this formatter\r\n\t */\r\n\tgetLocale: function () {\r\n\t\treturn this.locale;\r\n\t},\r\n\r\n\t/**\r\n\t * Returns true if this formatter groups together digits in the integral\r\n\t * portion of a number, based on the options set up in the constructor. In\r\n\t * most western European cultures, this means separating every 3 digits\r\n\t * of the integral portion of a number with a particular character.\r\n\t *\r\n\t * @return {boolean} true if this formatter groups digits in the integral\r\n\t * portion of the number\r\n\t */\r\n\tisGroupingUsed: function () {\r\n\t\treturn (this.groupingSeparator !== 'undefined' && this.groupingSeparator.length > 0);\r\n\t},\r\n\r\n\t/**\r\n\t * Returns the maximum fraction digits set up in the constructor.\r\n\t *\r\n\t * @return {number} the maximum number of fractional digits this\r\n\t * formatter will format, or -1 for no maximum\r\n\t */\r\n\tgetMaxFractionDigits: function () {\r\n\t\treturn typeof (this.maxFractionDigits) !== 'undefined' ? this.maxFractionDigits : -1;\r\n\t},\r\n\r\n\t/**\r\n\t * Returns the minimum fraction digits set up in the constructor. If\r\n\t * the formatter has the type \"currency\", then the minimum fraction\r\n\t * digits is the amount of digits that is standard for the currency\r\n\t * in question unless overridden in the options to the constructor.\r\n\t *\r\n\t * @return {number} the minimum number of fractional digits this\r\n\t * formatter will format, or -1 for no minimum\r\n\t */\r\n\tgetMinFractionDigits: function () {\r\n\t\treturn typeof (this.minFractionDigits) !== 'undefined' ? this.minFractionDigits : -1;\r\n\t},\r\n\r\n\t/**\r\n\t * Returns the ISO 4217 code for the currency that this formatter formats.\r\n\t * IF the typeof this formatter is not \"currency\", then this method will\r\n\t * return undefined.\r\n\t *\r\n\t * @return {string} the ISO 4217 code for the currency that this formatter\r\n\t * formats, or undefined if this not a currency formatter\r\n\t */\r\n\tgetCurrency: function () {\r\n\t\treturn this.currencyInfo && this.currencyInfo.getCode();\r\n\t},\r\n\r\n\t/**\r\n\t * Returns the rounding mode set up in the constructor. The rounding mode\r\n\t * controls how numbers are rounded when the integral or fraction digits\r\n\t * of a number are limited.\r\n\t *\r\n\t * @return {string} the name of the rounding mode used in this formatter\r\n\t */\r\n\tgetRoundingMode: function () {\r\n\t\treturn this.roundingMode;\r\n\t},\r\n\r\n\t/**\r\n\t * If this formatter is a currency formatter, then the style determines how the\r\n\t * currency is denoted in the formatted output. This method returns the style\r\n\t * that this formatter will produce. (See the constructor comment for more about\r\n\t * the styles.)\r\n\t * @return {string} the name of the style this formatter will use to format\r\n\t * currency amounts, or \"undefined\" if this formatter is not a currency formatter\r\n\t */\r\n\tgetStyle: function () {\r\n\t\treturn this.style;\r\n\t}\r\n};\r\n\r\nmodule.exports = NumFmt;","/*\r\n * astro.js - Static functions to support astronomical calculations\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends\r\nilib.js\r\nIDate.js\r\nUtils.js\r\nMathUtils.js\r\nSearchUtils.js\r\nGregorianDate.js\r\nGregRataDie.js\r\n*/\r\n\r\n// !data astro\r\n\r\n/*\r\n * These routines were derived from a public domain set of JavaScript \r\n * functions for positional astronomy by John Walker of Fourmilab, \r\n * September 1999.\r\n */\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar Utils = require(\"./Utils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar SearchUtils = require(\"./SearchUtils.js\");\r\n\r\nvar GregorianDate = require(\"./GregorianDate.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\nvar GregRataDie = require(\"./GregRataDie.js\");\r\n\r\nvar Astro = {};\r\n\r\n/**\r\n * Load in all the data needed for astrological calculations.\r\n * \r\n * @private\r\n * @param {boolean} sync\r\n * @param {*} loadParams\r\n * @param {function(*)|undefined} callback\r\n */\r\nAstro.initAstro = function(sync, loadParams, callback) {\r\n\tif (!ilib.data.astro) {\r\n\t\tUtils.loadData({\r\n\t\t\tname: \"astro.json\", // countries in their own language \r\n\t\t\tlocale: \"-\", // only need to load the root file \r\n\t\t\tnonLocale: true,\r\n\t\t\tsync: sync, \r\n\t\t\tloadParams: loadParams, \r\n\t\t\tcallback: ilib.bind(this, /** @type function() */ function(astroData) {\r\n\t\t\t\t/** \r\n\t\t\t\t * @type {{\r\n\t\t\t\t *  \t_EquinoxpTerms:Array.<number>, \r\n\t\t\t\t *  \t_JDE0tab1000:Array.<number>, \r\n\t\t\t\t *  \t_JDE0tab2000:Array.<number>, \r\n\t\t\t\t *  \t_deltaTtab:Array.<number>,\r\n\t\t\t\t *  \t_oterms:Array.<number>,\r\n\t\t\t\t *  \t_nutArgMult:Array.<number>, \r\n\t\t\t\t *  \t_nutArgCoeff:Array.<number>, \r\n\t\t\t\t *  \t_nutCoeffA:Array.<number>,\r\n\t\t\t\t *  \t_nutCoeffB:Array.<number>,\r\n\t\t\t\t *  \t_coeff19th:Array.<number>,\r\n\t\t\t\t *  \t_coeff18th:Array.<number>,\r\n\t\t\t\t *  \t_solarLongCoeff:Array.<number>, \r\n\t\t\t\t *  \t_solarLongMultipliers:Array.<number>, \r\n\t\t\t\t *  \t_solarLongAddends:Array.<number>, \r\n\t\t\t\t *  \t_meanMoonCoeff:Array.<number>,\r\n\t\t\t\t *  \t_elongationCoeff:Array.<number>,\r\n\t\t\t\t *  \t_solarAnomalyCoeff:Array.<number>,\r\n\t\t\t\t *  \t_lunarAnomalyCoeff:Array.<number>,\r\n\t\t\t\t *  \t_moonFromNodeCoeff:Array.<number>,\r\n\t\t\t\t *  \t_eCoeff:Array.<number>,\r\n\t\t\t\t *  \t_lunarElongationLongCoeff:Array.<number>,\r\n\t\t\t\t *  \t_solarAnomalyLongCoeff:Array.<number>,\r\n\t\t\t\t *  \t_lunarAnomalyLongCoeff:Array.<number>,\r\n\t\t\t\t *  \t_moonFromNodeLongCoeff:Array.<number>,\r\n\t\t\t\t *  \t_sineCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmApproxCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmCapECoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmSolarAnomalyCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmLunarAnomalyCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmMoonArgumentCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmCapOmegaCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmEFactor:Array.<number>,\r\n\t\t\t\t *  \t_nmSolarCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmLunarCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmMoonCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmSineCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmAddConst:Array.<number>,\r\n\t\t\t\t *  \t_nmAddCoeff:Array.<number>,\r\n\t\t\t\t *  \t_nmAddFactor:Array.<number>,\r\n\t\t\t\t *  \t_nmExtra:Array.<number>\r\n\t\t\t\t *  }}\r\n\t\t\t\t */ \t\r\n\t\t\t \tilib.data.astro = astroData;\r\n\t\t\t\tif (callback && typeof(callback) === 'function') {\r\n\t\t\t\t\tcallback(astroData);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t} else {\r\n\t\tif (callback && typeof(callback) === 'function') {\r\n\t\t\tcallback(ilib.data.astro);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Convert degrees to radians.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} d angle in degrees\r\n * @return {number} angle in radians \r\n */\r\nAstro._dtr = function(d) {\r\n\treturn (d * Math.PI) / 180.0;\r\n};\r\n\r\n/**\r\n * Convert radians to degrees.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} r angle in radians\r\n * @return {number} angle in degrees \r\n */\r\nAstro._rtd = function(r) {\r\n\treturn (r * 180.0) / Math.PI;\r\n};\r\n\r\n/**\r\n * Return the cosine of an angle given in degrees.\r\n * @static\r\n * @protected\r\n * @param {number} d angle in degrees\r\n * @return {number} cosine of the angle.\r\n */  \r\nAstro._dcos = function(d) {\r\n\treturn Math.cos(Astro._dtr(d));\r\n};\r\n\r\n/**\r\n * Return the sine of an angle given in degrees.\r\n * @static\r\n * @protected\r\n * @param {number} d angle in degrees\r\n * @return {number} sine of the angle.\r\n */  \r\nAstro._dsin = function(d) {\r\n\treturn Math.sin(Astro._dtr(d));\r\n};\r\n\r\n/**\r\n * Return the tan of an angle given in degrees.\r\n * @static\r\n * @protected\r\n * @param {number} d angle in degrees\r\n * @return {number} tan of the angle.\r\n */  \r\nAstro._dtan = function(d) {\r\n\treturn Math.tan(Astro._dtr(d));\r\n};\r\n\r\n/**\r\n * Range reduce angle in degrees.\r\n * \r\n * @static\r\n * @param {number} a angle to reduce\r\n * @return {number} the reduced angle  \r\n */\r\nAstro._fixangle = function(a) {\r\n\treturn a - 360.0 * (Math.floor(a / 360.0));\r\n};\r\n\r\n/**\r\n * Range reduce angle in radians.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} a angle to reduce\r\n * @return {number} the reduced angle  \r\n */\r\nAstro._fixangr = function(a) {\r\n\treturn a - (2 * Math.PI) * (Math.floor(a / (2 * Math.PI)));\r\n};\r\n\r\n/**\r\n * Determine the Julian Ephemeris Day of an equinox or solstice.  The \"which\" \r\n * argument selects the item to be computed:\r\n * \r\n * <ul>\r\n * <li>0   March equinox\r\n * <li>1   June solstice\r\n * <li>2   September equinox\r\n * <li>3   December solstice\r\n * </ul>\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} year Gregorian year to calculate for\r\n * @param {number} which Which equinox or solstice to calculate\r\n */\r\nAstro._equinox = function(year, which) {\r\n\tvar deltaL, i, j, JDE0, JDE, JDE0tab, S, T, W, Y;\r\n\r\n\t/*  Initialize terms for mean equinox and solstices.  We\r\n\t    have two sets: one for years prior to 1000 and a second\r\n\t    for subsequent years.  */\r\n\r\n\tif (year < 1000) {\r\n\t\tJDE0tab = ilib.data.astro._JDE0tab1000;\r\n\t\tY = year / 1000;\r\n\t} else {\r\n\t\tJDE0tab = ilib.data.astro._JDE0tab2000;\r\n\t\tY = (year - 2000) / 1000;\r\n\t}\r\n\r\n\tJDE0 = JDE0tab[which][0] + (JDE0tab[which][1] * Y)\r\n\t\t\t+ (JDE0tab[which][2] * Y * Y) + (JDE0tab[which][3] * Y * Y * Y)\r\n\t\t\t+ (JDE0tab[which][4] * Y * Y * Y * Y);\r\n\r\n\t//document.debug.log.value += \"JDE0 = \" + JDE0 + \"\\n\";\r\n\r\n\tT = (JDE0 - 2451545.0) / 36525;\r\n\t//document.debug.log.value += \"T = \" + T + \"\\n\";\r\n\tW = (35999.373 * T) - 2.47;\r\n\t//document.debug.log.value += \"W = \" + W + \"\\n\";\r\n\tdeltaL = 1 + (0.0334 * Astro._dcos(W)) + (0.0007 * Astro._dcos(2 * W));\r\n\t//document.debug.log.value += \"deltaL = \" + deltaL + \"\\n\";\r\n\r\n\t//  Sum the periodic terms for time T\r\n\r\n\tS = 0;\r\n\tj = 0;\r\n\tfor (i = 0; i < 24; i++) {\r\n\t\tS += ilib.data.astro._EquinoxpTerms[j]\r\n\t\t\t\t* Astro._dcos(ilib.data.astro._EquinoxpTerms[j + 1] + (ilib.data.astro._EquinoxpTerms[j + 2] * T));\r\n\t\tj += 3;\r\n\t}\r\n\r\n\t//document.debug.log.value += \"S = \" + S + \"\\n\";\r\n\t//document.debug.log.value += \"Corr = \" + ((S * 0.00001) / deltaL) + \"\\n\";\r\n\r\n\tJDE = JDE0 + ((S * 0.00001) / deltaL);\r\n\r\n\treturn JDE;\r\n};\r\n\r\n/* \r\n * The table of observed Delta T values at the beginning of\r\n * years from 1620 through 2014 as found in astro.json is taken from\r\n * http://www.staff.science.uu.nl/~gent0113/deltat/deltat.htm\r\n * and\r\n * ftp://maia.usno.navy.mil/ser7/deltat.data\r\n */\r\n\r\n/**  \r\n * Determine the difference, in seconds, between dynamical time and universal time.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} year to calculate the difference for\r\n * @return {number} difference in seconds between dynamical time and universal time  \r\n */\r\nAstro._deltat = function (year) {\r\n\tvar dt, f, i, t;\r\n\r\n\tif ((year >= 1620) && (year <= 2014)) {\r\n\t\ti = Math.floor(year - 1620);\r\n\t\tf = (year - 1620) - i; /* Fractional part of year */\r\n\t\tdt = ilib.data.astro._deltaTtab[i] + ((ilib.data.astro._deltaTtab[i + 1] - ilib.data.astro._deltaTtab[i]) * f);\r\n\t} else {\r\n\t\tt = (year - 2000) / 100;\r\n\t\tif (year < 948) {\r\n\t\t\tdt = 2177 + (497 * t) + (44.1 * t * t);\r\n\t\t} else {\r\n\t\t\tdt = 102 + (102 * t) + (25.3 * t * t);\r\n\t\t\tif ((year > 2000) && (year < 2100)) {\r\n\t\t\t\tdt += 0.37 * (year - 2100);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn dt;\r\n};\r\n\r\n/**\r\n * Calculate the obliquity of the ecliptic for a given\r\n * Julian date.  This uses Laskar's tenth-degree\r\n * polynomial fit (J. Laskar, Astronomy and\r\n * Astrophysics, Vol. 157, page 68 [1986]) which is\r\n * accurate to within 0.01 arc second between AD 1000\r\n * and AD 3000, and within a few seconds of arc for\r\n * +/-10000 years around AD 2000.  If we're outside the\r\n * range in which this fit is valid (deep time) we\r\n * simply return the J2000 value of the obliquity, which\r\n * happens to be almost precisely the mean.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} jd Julian Day to calculate the obliquity for\r\n * @return {number} the obliquity\r\n */\r\nAstro._obliqeq = function (jd) {\r\n\tvar eps, u, v, i;\r\n\r\n \tv = u = (jd - 2451545.0) / 3652500.0;\r\n\r\n \teps = 23 + (26 / 60.0) + (21.448 / 3600.0);\r\n\r\n \tif (Math.abs(u) < 1.0) {\r\n \t\tfor (i = 0; i < 10; i++) {\r\n \t\t\teps += (ilib.data.astro._oterms[i] / 3600.0) * v;\r\n \t\t\tv *= u;\r\n \t\t}\r\n \t}\r\n \treturn eps;\r\n};\r\n\r\n/**\r\n * Return the position of the sun.  We return\r\n * intermediate values because they are useful in a\r\n * variety of other contexts.\r\n * @static\r\n * @protected\r\n * @param {number} jd find the position of sun on this Julian Day\r\n * @return {Object} the position of the sun and many intermediate\r\n * values\r\n */\r\nAstro._sunpos = function(jd) {\r\n\tvar ret = {}, \r\n\t\tT, T2, T3, Omega, epsilon, epsilon0;\r\n\r\n\tT = (jd - 2451545.0) / 36525.0;\r\n\t//document.debug.log.value += \"Sunpos.  T = \" + T + \"\\n\";\r\n\tT2 = T * T;\r\n\tT3 = T * T2;\r\n\tret.meanLongitude = Astro._fixangle(280.46646 + 36000.76983 * T + 0.0003032 * T2);\r\n\t//document.debug.log.value += \"ret.meanLongitude = \" + ret.meanLongitude + \"\\n\";\r\n\tret.meanAnomaly = Astro._fixangle(357.52911 + (35999.05029 * T) - 0.0001537 * T2 - 0.00000048 * T3);\r\n\t//document.debug.log.value += \"ret.meanAnomaly = \" + ret.meanAnomaly + \"\\n\";\r\n\tret.eccentricity = 0.016708634 - 0.000042037 * T - 0.0000001267 * T2;\r\n\t//document.debug.log.value += \"e = \" + e + \"\\n\";\r\n\tret.equationOfCenter = ((1.914602 - 0.004817 * T - 0.000014 * T2) * Astro._dsin(ret.meanAnomaly))\r\n\t\t\t+ ((0.019993 - 0.000101 * T) * Astro._dsin(2 * ret.meanAnomaly))\r\n\t\t\t+ (0.000289 * Astro._dsin(3 * ret.meanAnomaly));\r\n\t//document.debug.log.value += \"ret.equationOfCenter = \" + ret.equationOfCenter + \"\\n\";\r\n\tret.sunLongitude = ret.meanLongitude + ret.equationOfCenter;\r\n\t//document.debug.log.value += \"ret.sunLongitude = \" + ret.sunLongitude + \"\\n\";\r\n\t//ret.sunAnomaly = ret.meanAnomaly + ret.equationOfCenter;\r\n\t//document.debug.log.value += \"ret.sunAnomaly = \" + ret.sunAnomaly + \"\\n\";\r\n\t// ret.sunRadius = (1.000001018 * (1 - (ret.eccentricity * ret.eccentricity))) / (1 + (ret.eccentricity * Astro._dcos(ret.sunAnomaly)));\r\n\t//document.debug.log.value += \"ret.sunRadius = \" + ret.sunRadius + \"\\n\";\r\n\tOmega = 125.04 - (1934.136 * T);\r\n\t//document.debug.log.value += \"Omega = \" + Omega + \"\\n\";\r\n\tret.apparentLong = ret.sunLongitude + (-0.00569) + (-0.00478 * Astro._dsin(Omega));\r\n\t//document.debug.log.value += \"ret.apparentLong = \" + ret.apparentLong + \"\\n\";\r\n\tepsilon0 = Astro._obliqeq(jd);\r\n\t//document.debug.log.value += \"epsilon0 = \" + epsilon0 + \"\\n\";\r\n\tepsilon = epsilon0 + (0.00256 * Astro._dcos(Omega));\r\n\t//document.debug.log.value += \"epsilon = \" + epsilon + \"\\n\";\r\n\t//ret.rightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon0) * Astro._dsin(ret.sunLongitude), Astro._dcos(ret.sunLongitude))));\r\n\t//document.debug.log.value += \"ret.rightAscension = \" + ret.rightAscension + \"\\n\";\r\n\t// ret.declination = Astro._rtd(Math.asin(Astro._dsin(epsilon0) * Astro._dsin(ret.sunLongitude)));\r\n\t////document.debug.log.value += \"ret.declination = \" + ret.declination + \"\\n\";\r\n\tret.inclination = Astro._fixangle(23.4392911 - 0.013004167 * T - 0.00000016389 * T2 + 0.0000005036 * T3);\r\n\tret.apparentRightAscension = Astro._fixangle(Astro._rtd(Math.atan2(Astro._dcos(epsilon) * Astro._dsin(ret.apparentLong), Astro._dcos(ret.apparentLong))));\r\n\t//document.debug.log.value += \"ret.apparentRightAscension = \" + ret.apparentRightAscension + \"\\n\";\r\n\t//ret.apparentDeclination = Astro._rtd(Math.asin(Astro._dsin(epsilon) * Astro._dsin(ret.apparentLong)));\r\n\t//document.debug.log.value += \"ret.apparentDecliation = \" + ret.apparentDecliation + \"\\n\";\r\n\r\n\t// Angular quantities are expressed in decimal degrees\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Calculate the nutation in longitude, deltaPsi, and obliquity, \r\n * deltaEpsilon for a given Julian date jd. Results are returned as an object\r\n * giving deltaPsi and deltaEpsilon in degrees.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} jd calculate the nutation of this Julian Day\r\n * @return {Object} the deltaPsi and deltaEpsilon of the nutation\r\n */\r\nAstro._nutation = function(jd) {\r\n\tvar i, j, \r\n\t\tt = (jd - 2451545.0) / 36525.0, \r\n\t\tt2, t3, to10, \r\n\t\tta = [], \r\n\t\tdp = 0, \r\n\t\tde = 0, \r\n\t\tang,\r\n\t\tret = {};\r\n\r\n\tt3 = t * (t2 = t * t);\r\n\r\n\t/*\r\n\t * Calculate angles. The correspondence between the elements of our array\r\n\t * and the terms cited in Meeus are:\r\n\t * \r\n\t * ta[0] = D ta[0] = M ta[2] = M' ta[3] = F ta[4] = \\Omega\r\n\t * \r\n\t */\r\n\r\n\tta[0] = Astro._dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);\r\n\tta[1] = Astro._dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);\r\n\tta[2] = Astro._dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);\r\n\tta[3] = Astro._dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);\r\n\tta[4] = Astro._dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);\r\n\r\n\t/*\r\n\t * Range reduce the angles in case the sine and cosine functions don't do it\r\n\t * as accurately or quickly.\r\n\t */\r\n\r\n\tfor (i = 0; i < 5; i++) {\r\n\t\tta[i] = Astro._fixangr(ta[i]);\r\n\t}\r\n\r\n\tto10 = t / 10.0;\r\n\tfor (i = 0; i < 63; i++) {\r\n\t\tang = 0;\r\n\t\tfor (j = 0; j < 5; j++) {\r\n\t\t\tif (ilib.data.astro._nutArgMult[(i * 5) + j] != 0) {\r\n\t\t\t\tang += ilib.data.astro._nutArgMult[(i * 5) + j] * ta[j];\r\n\t\t\t}\r\n\t\t}\r\n\t\tdp += (ilib.data.astro._nutArgCoeff[(i * 4) + 0] + ilib.data.astro._nutArgCoeff[(i * 4) + 1] * to10) * Math.sin(ang);\r\n\t\tde += (ilib.data.astro._nutArgCoeff[(i * 4) + 2] + ilib.data.astro._nutArgCoeff[(i * 4) + 3] * to10) * Math.cos(ang);\r\n\t}\r\n\r\n\t/*\r\n\t * Return the result, converting from ten thousandths of arc seconds to\r\n\t * radians in the process.\r\n\t */\r\n\r\n\tret.deltaPsi = dp / (3600.0 * 10000.0);\r\n\tret.deltaEpsilon = de / (3600.0 * 10000.0);\r\n\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Returns the equation of time as a fraction of a day.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} jd the Julian Day of the day to calculate for\r\n * @return {number} the equation of time for the given day  \r\n */\r\nAstro._equationOfTime = function(jd) {\r\n\tvar alpha, deltaPsi, E, epsilon, L0, tau, pos;\r\n\r\n\t// 2451545.0 is the Julian day of J2000 epoch\r\n\t// 365250.0 is the number of days in a Julian millenium\r\n\ttau = (jd - 2451545.0) / 365250.0;\r\n\t//console.log(\"equationOfTime.  tau = \" + tau);\r\n\tL0 = 280.4664567 + (360007.6982779 * tau) + (0.03032028 * tau * tau)\r\n\t\t\t+ ((tau * tau * tau) / 49931)\r\n\t\t\t+ (-((tau * tau * tau * tau) / 15300))\r\n\t\t\t+ (-((tau * tau * tau * tau * tau) / 2000000));\r\n\t//console.log(\"L0 = \" + L0);\r\n\tL0 = Astro._fixangle(L0);\r\n\t//console.log(\"L0 = \" + L0);\r\n\tpos = Astro._sunpos(jd);\r\n\talpha = pos.apparentRightAscension;\r\n\t//console.log(\"alpha = \" + alpha);\r\n\tvar nut = Astro._nutation(jd);\r\n\tdeltaPsi = nut.deltaPsi;\r\n\t//console.log(\"deltaPsi = \" + deltaPsi);\r\n\tepsilon = Astro._obliqeq(jd) + nut.deltaEpsilon;\r\n\t//console.log(\"epsilon = \" + epsilon);\r\n\t//console.log(\"L0 - 0.0057183 = \" + (L0 - 0.0057183));\r\n\t//console.log(\"L0 - 0.0057183 - alpha = \" + (L0 - 0.0057183 - alpha));\r\n\t//console.log(\"deltaPsi * cos(epsilon) = \" + deltaPsi * Astro._dcos(epsilon));\r\n\t\r\n\tE = L0 - 0.0057183 - alpha + deltaPsi * Astro._dcos(epsilon);\r\n\t// if alpha and L0 are in different quadrants, then renormalize\r\n\t// so that the difference between them is in the right range\r\n\tif (E > 180) {\r\n\t\tE -= 360;\r\n\t}\r\n\t//console.log(\"E = \" + E);\r\n\t// E = E - 20.0 * (Math.floor(E / 20.0));\r\n\tE = E * 4;\r\n\t//console.log(\"Efixed = \" + E);\r\n\tE = E / (24 * 60);\r\n\t//console.log(\"Eday = \" + E);\r\n\r\n\treturn E;\r\n};\r\n\r\n/**\r\n * @private\r\n * @static\r\n */\r\nAstro._poly = function(x, coefficients) {\r\n\tvar result = coefficients[0];\r\n\tvar xpow = x;\r\n\tfor (var i = 1; i < coefficients.length; i++) {\r\n\t\tresult += coefficients[i] * xpow;\r\n\t\txpow *= x;\r\n\t}\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Calculate the UTC RD from the local RD given \"zone\" number of minutes\r\n * worth of offset.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} local RD of the locale time, given in any calendar\r\n * @param {number} zone number of minutes of offset from UTC for the time zone \r\n * @return {number} the UTC equivalent of the local RD\r\n */\r\nAstro._universalFromLocal = function(local, zone) {\r\n\treturn local - zone / 1440;\r\n};\r\n\r\n/**\r\n * Calculate the local RD from the UTC RD given \"zone\" number of minutes\r\n * worth of offset.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} local RD of the locale time, given in any calendar\r\n * @param {number} zone number of minutes of offset from UTC for the time zone \r\n * @return {number} the UTC equivalent of the local RD\r\n */\r\nAstro._localFromUniversal = function(local, zone) {\r\n\treturn local + zone / 1440;\r\n};\r\n\r\n/**\r\n * @private\r\n * @static\r\n * @param {number} c julian centuries of the date to calculate\r\n * @return {number} the aberration\r\n */\r\nAstro._aberration = function(c) {\r\n\treturn 9.74e-05 * Astro._dcos(177.63 + 35999.01847999999 * c) - 0.005575;\r\n};\r\n\r\n/**\r\n * @private\r\n *\r\nilib.data.astro._nutCoeffA = [124.90, -1934.134, 0.002063];\r\nilib.data.astro._nutCoeffB q= [201.11, 72001.5377, 0.00057];\r\n*/\r\n\r\n/**\r\n * @private\r\n * @static\r\n * @param {number} c julian centuries of the date to calculate\r\n * @return {number} the nutation for the given julian century in radians\r\n */\r\nAstro._nutation2 = function(c) {\r\n\tvar a = Astro._poly(c, ilib.data.astro._nutCoeffA);\r\n\tvar b = Astro._poly(c, ilib.data.astro._nutCoeffB);\r\n\t// return -0.0000834 * Astro._dsin(a) - 0.0000064 * Astro._dsin(b);\r\n\treturn -0.004778 * Astro._dsin(a) - 0.0003667 * Astro._dsin(b);\r\n};\r\n\r\n/**\r\n * @static\r\n * @private\r\n */\r\nAstro._ephemerisCorrection = function(jd) {\r\n\tvar year = GregorianDate._calcYear(jd - 1721424.5);\r\n\t\r\n\tif (1988 <= year && year <= 2019) {\r\n\t\treturn (year - 1933) / 86400;\r\n\t}\r\n\t\r\n\tif (1800 <= year && year <= 1987) {\r\n\t\tvar jul1 = new GregRataDie({\r\n\t\t\tyear: year,\r\n\t\t\tmonth: 7,\r\n\t\t\tday: 1,\r\n\t\t\thour: 0,\r\n\t\t\tminute: 0,\r\n\t\t\tsecond: 0\r\n\t\t});\r\n\t\t// 693596 is the rd of Jan 1, 1900\r\n\t\tvar theta = (jul1.getRataDie() - 693596) / 36525;\r\n\t\treturn Astro._poly(theta, (1900 <= year) ? ilib.data.astro._coeff19th : ilib.data.astro._coeff18th);\r\n\t}\r\n\t\r\n\tif (1620 <= year && year <= 1799) {\r\n\t\tyear -= 1600;\r\n\t\treturn (196.58333 - 4.0675 * year + 0.0219167 * year * year) / 86400;\r\n\t}\r\n\t\r\n\t// 660724 is the rd of Jan 1, 1810\r\n\tvar jan1 = new GregRataDie({\r\n\t\tyear: year,\r\n\t\tmonth: 1,\r\n\t\tday: 1,\r\n\t\thour: 0,\r\n\t\tminute: 0,\r\n\t\tsecond: 0\r\n\t});\r\n\t// var x = 0.5 + (jan1.getRataDie() - 660724);\r\n\tvar x = 0.5 + (jan1.getRataDie() - 660724);\r\n\t\r\n\treturn ((x * x / 41048480) - 15) / 86400;\r\n};\r\n\r\n/**\r\n * @static\r\n * @private\r\n */\r\nAstro._ephemerisFromUniversal = function(jd) {\r\n\treturn jd + Astro._ephemerisCorrection(jd);\r\n};\r\n\r\n/**\r\n * @static\r\n * @private\r\n */\r\nAstro._universalFromEphemeris = function(jd) {\r\n\treturn jd - Astro._ephemerisCorrection(jd);\r\n};\r\n\r\n/**\r\n * @static\r\n * @private\r\n */\r\nAstro._julianCenturies = function(jd) {\r\n\t// 2451545.0 is the Julian day of J2000 epoch\r\n\t// 730119.5 is the Gregorian RD of J2000 epoch\r\n\t// 36525.0 is the number of days in a Julian century\r\n\treturn (Astro._ephemerisFromUniversal(jd) - 2451545.0) / 36525.0;\r\n};\r\n\r\n/**\r\n * Calculate the solar longitude\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} jd julian day of the date to calculate the longitude for \r\n * @return {number} the solar longitude in degrees\r\n */\r\nAstro._solarLongitude = function(jd) {\r\n\tvar c = Astro._julianCenturies(jd),\r\n\t\tlongitude = 0,\r\n\t\tlen = ilib.data.astro._solarLongCoeff.length,\r\n\t\trow;\r\n\t\r\n\tfor (var i = 0; i < len; i++) {\r\n\t\tlongitude += ilib.data.astro._solarLongCoeff[i] * \r\n\t\t\tAstro._dsin(ilib.data.astro._solarLongAddends[i] + ilib.data.astro._solarLongMultipliers[i] * c);\r\n\t}\r\n\tlongitude *= 5.729577951308232e-06;\r\n\tlongitude += 282.77718340000001 + 36000.769537439999 * c;\r\n\tlongitude += Astro._aberration(c) + Astro._nutation2(c);\r\n\treturn Astro._fixangle(longitude);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} jd\r\n * @return {number}\r\n */\r\nAstro._lunarLongitude = function (jd) {\r\n\tvar c = Astro._julianCenturies(jd),\r\n\t    meanMoon = Astro._fixangle(Astro._poly(c, ilib.data.astro._meanMoonCoeff)),\r\n\t    elongation = Astro._fixangle(Astro._poly(c, ilib.data.astro._elongationCoeff)),\r\n\t    solarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._solarAnomalyCoeff)),\r\n\t    lunarAnomaly = Astro._fixangle(Astro._poly(c, ilib.data.astro._lunarAnomalyCoeff)),\r\n\t    moonNode = Astro._fixangle(Astro._poly(c, ilib.data.astro._moonFromNodeCoeff)),\r\n\t    e = Astro._poly(c, ilib.data.astro._eCoeff);\r\n\t\r\n\tvar sum = 0;\r\n\tfor (var i = 0; i < ilib.data.astro._lunarElongationLongCoeff.length; i++) {\r\n\t\tvar x = ilib.data.astro._solarAnomalyLongCoeff[i];\r\n\r\n\t\tsum += ilib.data.astro._sineCoeff[i] * Math.pow(e, Math.abs(x)) * \r\n\t\t\tAstro._dsin(ilib.data.astro._lunarElongationLongCoeff[i] * elongation + x * solarAnomaly + \r\n\t\t\t\tilib.data.astro._lunarAnomalyLongCoeff[i] * lunarAnomaly + \r\n\t\t\t\tilib.data.astro._moonFromNodeLongCoeff[i] * moonNode);\r\n\t}\r\n\tvar longitude = sum / 1000000;\r\n\tvar venus = 3958.0 / 1000000 * Astro._dsin(119.75 + c * 131.84899999999999);\r\n\tvar jupiter = 318.0 / 1000000 * Astro._dsin(53.090000000000003 + c * 479264.28999999998);\r\n\tvar flatEarth = 1962.0 / 1000000 * Astro._dsin(meanMoon - moonNode);\r\n\t\r\n\treturn Astro._fixangle(meanMoon + longitude + venus + jupiter + flatEarth + Astro._nutation2(c));\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} n\r\n * @return {number} julian day of the n'th new moon\r\n */\r\nAstro._newMoonTime = function(n) {\r\n\tvar k = n - 24724;\r\n\tvar c = k / 1236.8499999999999;\r\n\tvar approx = Astro._poly(c, ilib.data.astro._nmApproxCoeff);\r\n\tvar capE = Astro._poly(c, ilib.data.astro._nmCapECoeff);\r\n\tvar solarAnomaly = Astro._poly(c, ilib.data.astro._nmSolarAnomalyCoeff);\r\n\tvar lunarAnomaly = Astro._poly(c, ilib.data.astro._nmLunarAnomalyCoeff);\r\n\tvar moonArgument = Astro._poly(c, ilib.data.astro._nmMoonArgumentCoeff);\r\n\tvar capOmega = Astro._poly(c, ilib.data.astro._nmCapOmegaCoeff);\r\n\tvar correction = -0.00017 * Astro._dsin(capOmega);\r\n\tfor (var i = 0; i < ilib.data.astro._nmSineCoeff.length; i++) {\r\n\t\tcorrection = correction + ilib.data.astro._nmSineCoeff[i] * Math.pow(capE, ilib.data.astro._nmEFactor[i]) * \r\n\t\tAstro._dsin(ilib.data.astro._nmSolarCoeff[i] * solarAnomaly + \r\n\t\t\t\tilib.data.astro._nmLunarCoeff[i] * lunarAnomaly + \r\n\t\t\t\tilib.data.astro._nmMoonCoeff[i] * moonArgument);\r\n\t}\r\n\tvar additional = 0;\r\n\tfor (var i = 0; i < ilib.data.astro._nmAddConst.length; i++) {\r\n\t\tadditional = additional + ilib.data.astro._nmAddFactor[i] * \r\n\t\tAstro._dsin(ilib.data.astro._nmAddConst[i] + ilib.data.astro._nmAddCoeff[i] * k);\r\n\t}\r\n\tvar extra = 0.000325 * Astro._dsin(Astro._poly(c, ilib.data.astro._nmExtra));\r\n\treturn Astro._universalFromEphemeris(approx + correction + extra + additional + RataDie.gregorianEpoch);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} jd\r\n * @return {number}\r\n */\r\nAstro._lunarSolarAngle = function(jd) {\r\n\tvar lunar = Astro._lunarLongitude(jd);\r\n\tvar solar = Astro._solarLongitude(jd)\r\n\treturn Astro._fixangle(lunar - solar);\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} jd\r\n * @return {number}\r\n */\r\nAstro._newMoonBefore = function (jd) {\r\n\tvar phase = Astro._lunarSolarAngle(jd);\r\n\t// 11.450086114414322 is the julian day of the 0th full moon\r\n\t// 29.530588853000001 is the average length of a month\r\n\tvar guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360) - 1;\r\n\tvar current, last;\r\n\tcurrent = last = Astro._newMoonTime(guess);\r\n\twhile (current < jd) {\r\n\t\tguess++;\r\n\t\tlast = current;\r\n\t\tcurrent = Astro._newMoonTime(guess);\r\n\t}\r\n\treturn last;\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} jd\r\n * @return {number}\r\n */\r\nAstro._newMoonAtOrAfter = function (jd) {\r\n\tvar phase = Astro._lunarSolarAngle(jd);\r\n\t// 11.450086114414322 is the julian day of the 0th full moon\r\n\t// 29.530588853000001 is the average length of a month\r\n\tvar guess = Math.round((jd - 11.450086114414322 - RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360);\r\n\tvar current;\r\n\twhile ((current = Astro._newMoonTime(guess)) < jd) {\r\n\t\tguess++;\r\n\t}\r\n\treturn current;\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} jd JD to calculate from\r\n * @param {number} longitude longitude to seek \r\n * @returns {number} the JD of the next time that the solar longitude \r\n * is a multiple of the given longitude\r\n */\r\nAstro._nextSolarLongitude = function(jd, longitude) {\r\n\tvar rate = 365.242189 / 360.0;\r\n\tvar tau = jd + rate * Astro._fixangle(longitude - Astro._solarLongitude(jd));\r\n\tvar start = Math.max(jd, tau - 5.0);\r\n\tvar end = tau + 5.0;\r\n\t\r\n\treturn SearchUtils.bisectionSearch(0, start, end, 1e-6, function (l) {\r\n\t\treturn 180 - Astro._fixangle(Astro._solarLongitude(l) - longitude);\r\n\t});\r\n};\r\n\r\n/**\r\n * Floor the julian day to midnight of the current julian day.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} jd the julian to round\r\n * @return {number} the jd floored to the midnight of the julian day\r\n */\r\nAstro._floorToJD = function(jd) {\r\n\treturn Math.floor(jd - 0.5) + 0.5;\r\n};\r\n\r\n/**\r\n * Floor the julian day to midnight of the current julian day.\r\n * \r\n * @static\r\n * @protected\r\n * @param {number} jd the julian to round\r\n * @return {number} the jd floored to the midnight of the julian day\r\n */\r\nAstro._ceilToJD = function(jd) {\r\n\treturn Math.ceil(jd + 0.5) - 0.5;\r\n};\r\n\r\nmodule.exports = Astro;\r\n","/*\r\n * ThaiSolarDate.js - Represent a date in the ThaiSolar calendar\r\n * \r\n * Copyright © 2013-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nIDate.js \r\nJSUtils.js\r\nGregorianDate.js\r\nThaiSolarCal.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\n\r\nvar Calendar = require(\"./Calendar.js\");\r\nvar IDate = require(\"./IDate.js\");\r\n\r\nvar ThaiSolarCal = require(\"./ThaiSolarCal.js\");\r\nvar GregorianDate = require(\"./GregorianDate.js\");\r\nvar GregRataDie = require(\"./GregRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Thai solar date object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \r\n * of this Thai solar date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * \r\n * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale. \r\n * </ul>\r\n *\r\n * If the constructor is called with another Thai solar date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends GregorianDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date\r\n */\r\nvar ThaiSolarDate = function(params) {\r\n\tvar p = params;\r\n\tif (params) {\r\n\t\t// there is 198327 days difference between the Thai solar and \r\n\t\t// Gregorian epochs which is equivalent to 543 years\r\n\t\tp = {};\r\n\t\tJSUtils.shallowCopy(params, p);\r\n\t\tif (typeof(p.year) !== 'undefined') {\r\n\t\t\tp.year -= 543;\t\r\n\t\t}\r\n\t\tif (typeof(p.rd) !== 'undefined') {\r\n\t\t\tp.rd -= 198327;\r\n\t\t}\r\n\t}\r\n\tthis.rd = undefined; // clear these out so that the GregorianDate constructor can set it\r\n\tthis.offset = undefined;\r\n\t//console.log(\"ThaiSolarDate.constructor: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\r\n\tGregorianDate.call(this, p);\r\n\tthis.cal = new ThaiSolarCal();\r\n\t// make sure the year is set correctly\r\n\tif (params && typeof(params.year) !== 'undefined') {\r\n\t\tthis.year = parseInt(params.year, 10);\r\n\t}\r\n};\r\n\r\nThaiSolarDate.prototype = new GregorianDate({noinstance: true});\r\nThaiSolarDate.prototype.parent = GregorianDate.prototype;\r\nThaiSolarDate.prototype.constructor = ThaiSolarDate;\r\n\r\n/**\r\n * the difference between a zero Julian day and the zero Thai Solar date.\r\n * This is some 543 years before the start of the Gregorian epoch. \r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nThaiSolarDate.epoch = 1523097.5;\r\n\r\n/**\r\n * Calculate the date components for the current time zone\r\n * @protected\r\n */\r\nThaiSolarDate.prototype._calcDateComponents = function () {\r\n\t// there is 198327 days difference between the Thai solar and \r\n\t// Gregorian epochs which is equivalent to 543 years\r\n\t// console.log(\"ThaiSolarDate._calcDateComponents: date is \" + JSON.stringify(this) + \" parent is \" + JSON.stringify(this.parent) + \" and parent.parent is \" + JSON.stringify(this.parent.parent));\r\n\tthis.parent._calcDateComponents.call(this);\r\n\tthis.year += 543;\r\n};\r\n\r\n/**\r\n * Return the Rata Die (fixed day) number of this date.\r\n * \r\n * @protected\r\n * @return {number} the rd date as a number\r\n */\r\nThaiSolarDate.prototype.getRataDie = function() {\r\n\t// there is 198327 days difference between the Thai solar and \r\n\t// Gregorian epochs which is equivalent to 543 years\r\n\treturn this.rd.getRataDie() + 198327;\r\n};\r\n\r\n/**\r\n * Return a new Gregorian date instance that represents the first instance of the \r\n * given day of the week before the current date. The day of the week is encoded\r\n * as a number where 0 = Sunday, 1 = Monday, etc.\r\n * \r\n * @param {number} dow the day of the week before the current date that is being sought\r\n * @return {IDate} the date being sought\r\n */\r\nThaiSolarDate.prototype.before = function (dow) {\r\n\treturn new ThaiSolarDate({\r\n\t\trd: this.rd.before(dow, this.offset) + 198327,\r\n\t\ttimezone: this.timezone\r\n\t});\r\n};\r\n\r\n/**\r\n * Return a new Gregorian date instance that represents the first instance of the \r\n * given day of the week after the current date. The day of the week is encoded\r\n * as a number where 0 = Sunday, 1 = Monday, etc.\r\n * \r\n * @param {number} dow the day of the week after the current date that is being sought\r\n * @return {IDate} the date being sought\r\n */\r\nThaiSolarDate.prototype.after = function (dow) {\r\n\treturn new ThaiSolarDate({\r\n\t\trd: this.rd.after(dow, this.offset) + 198327,\r\n\t\ttimezone: this.timezone\r\n\t});\r\n};\r\n\r\n/**\r\n * Return a new Gregorian date instance that represents the first instance of the \r\n * given day of the week on or before the current date. The day of the week is encoded\r\n * as a number where 0 = Sunday, 1 = Monday, etc.\r\n * \r\n * @param {number} dow the day of the week on or before the current date that is being sought\r\n * @return {IDate} the date being sought\r\n */\r\nThaiSolarDate.prototype.onOrBefore = function (dow) {\r\n\treturn new ThaiSolarDate({\r\n\t\trd: this.rd.onOrBefore(dow, this.offset) + 198327,\r\n\t\ttimezone: this.timezone\r\n\t});\r\n};\r\n\r\n/**\r\n * Return a new Gregorian date instance that represents the first instance of the \r\n * given day of the week on or after the current date. The day of the week is encoded\r\n * as a number where 0 = Sunday, 1 = Monday, etc.\r\n * \r\n * @param {number} dow the day of the week on or after the current date that is being sought\r\n * @return {IDate} the date being sought\r\n */\r\nThaiSolarDate.prototype.onOrAfter = function (dow) {\r\n\treturn new ThaiSolarDate({\r\n\t\trd: this.rd.onOrAfter(dow, this.offset) + 198327,\r\n\t\ttimezone: this.timezone\r\n\t});\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nThaiSolarDate.prototype.getCalendar = function() {\r\n\treturn \"thaisolar\";\r\n};\r\n\r\n//register with the factory method\r\nIDate._constructors[\"thaisolar\"] = ThaiSolarDate;\r\n\r\nmodule.exports = ThaiSolarDate;\r\n","/*\r\n * CopticDate.js - Represent a date in the Coptic calendar\r\n * \r\n * Copyright © 2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nIDate.js \r\nCopticCal.js \r\nMathUtils.js\r\nJSUtils.js\r\nLocale.js\r\nLocaleInfo.js \r\nTimeZone.js\r\nEthiopicDate.js\r\nCopticRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar EthiopicDate = require(\"./EthiopicDate.js\");\r\nvar CopticCal = require(\"./CopticCal.js\");\r\nvar CopticRataDie = require(\"./CopticRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new date object for the Coptic Calendar. The constructor can be called\r\n * with a parameter object that contains any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).\r\n * <li><i>julianday</i> - the Julian Day to set into this date\r\n * <li><i>year</i> - any integer\r\n * <li><i>month</i> - 1 to 13, where 1 means Thoout, 2 means Paope, etc., and 13 means Epagomene\r\n * <li><i>day</i> - 1 to 30\r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * <li><i>minute</i> - 0 to 59\r\n * <li><i>second</i> - 0 to 59\r\n * <li><i>millisecond<i> - 0 to 999\r\n * <li><i>locale</i> - the TimeZone instance or time zone name as a string \r\n * of this coptic date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * <li><i>timezone</i> - the time zone of this instance. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale. \r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *  \r\n * If called with another Coptic date argument, the date components of the given\r\n * date are copied into the current one.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends EthiopicDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Coptic date\r\n */\r\nvar CopticDate = function(params) {\r\n\tthis.rd = undefined; // clear these out so that the EthiopicDate constructor can set it\r\n\tEthiopicDate.call(this, params);\r\n\tthis.cal = new CopticCal();\r\n};\r\n\r\nCopticDate.prototype = new EthiopicDate({noinstance: true});\r\nCopticDate.prototype.parent = EthiopicDate.prototype;\r\nCopticDate.prototype.constructor = CopticDate;\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @protected\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nCopticDate.prototype.newRd = function (params) {\r\n\treturn new CopticRataDie(params);\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nCopticDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\r\n\treturn MathUtils.mod(rd-3, 7);\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nCopticDate.prototype.getCalendar = function() {\r\n\treturn \"coptic\";\r\n};\r\n\r\n//register with the factory method\r\nIDate._constructors[\"coptic\"] = CopticDate;\r\n\r\nmodule.exports = CopticDate;","/*\r\n * han.js - Represent a Han Chinese Lunar calendar object.\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js \r\nCalendar.js \r\nMathUtils.js \r\nAstro.js\r\nGregorianDate.js\r\nGregRataDie.js\r\nRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar Astro = require(\"./Astro.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\nvar GregorianDate = require(\"./GregorianDate.js\");\r\nvar GregRataDie = require(\"./GregRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Han algorithmic calendar object. This class encodes information about\r\n * a Han algorithmic calendar.<p>\r\n * \r\n * \r\n * @constructor\r\n * @param {Object=} params optional parameters to load the calendrical data\r\n * @extends Calendar\r\n */\r\nvar HanCal = function(params) {\r\n\tthis.type = \"han\";\r\n\tvar sync = params && typeof(params.sync) === 'boolean' ? params.sync : true;\r\n\t\r\n\tAstro.initAstro(sync, params && params.loadParams, /** @type {function ((Object|null)=): ?} */ ilib.bind(this, function (x) {\r\n\t\tif (params && typeof(params.callback) === 'function') {\r\n\t\t\tparams.callback(this);\r\n\t\t}\r\n\t}));\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} year\r\n * @param {number=} cycle\r\n * @return {number}\r\n */\r\nHanCal._getElapsedYear = function(year, cycle) {\r\n\tvar elapsedYear = year || 0;\r\n\tif (typeof(year) !== 'undefined' && year < 61 && typeof(cycle) !== 'undefined') {\r\n\t\telapsedYear = 60 * cycle + year;\r\n\t}\r\n\treturn elapsedYear;\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} jd julian day to calculate from\r\n * @param {number} longitude longitude to seek \r\n * @returns {number} the julian day of the next time that the solar longitude \r\n * is a multiple of the given longitude\r\n */\r\nHanCal._hanNextSolarLongitude = function(jd, longitude) {\r\n\tvar tz = HanCal._chineseTZ(jd);\r\n\tvar uni = Astro._universalFromLocal(jd, tz);\r\n\tvar sol = Astro._nextSolarLongitude(uni, longitude);\r\n\treturn Astro._localFromUniversal(sol, tz);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} jd julian day to calculate from \r\n * @returns {number} the major solar term for the julian day\r\n */\r\nHanCal._majorSTOnOrAfter = function(jd) {\r\n\tvar tz = HanCal._chineseTZ(jd);\r\n\tvar uni = Astro._universalFromLocal(jd, tz);\r\n\tvar next = Astro._fixangle(30 * Math.ceil(Astro._solarLongitude(uni)/30));\r\n\treturn HanCal._hanNextSolarLongitude(jd, next);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} year the year for which the leap year information is being sought\r\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\r\n * cycle is not given, then the year should be given as elapsed years since the beginning\r\n * of the epoch\r\n */\r\nHanCal._solsticeBefore = function (year, cycle) {\r\n\tvar elapsedYear = HanCal._getElapsedYear(year, cycle);\r\n\tvar gregyear = elapsedYear - 2697;\r\n\tvar rd = new GregRataDie({\r\n\t\tyear: gregyear-1, \r\n\t\tmonth: 12, \r\n\t\tday: 15, \r\n\t\thour: 0, \r\n\t\tminute: 0, \r\n\t\tsecond: 0, \r\n\t\tmillisecond: 0\r\n\t});\r\n\treturn HanCal._majorSTOnOrAfter(rd.getRataDie() + RataDie.gregorianEpoch);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} jd julian day to calculate from\r\n * @returns {number} the current major solar term\r\n */\r\nHanCal._chineseTZ = function(jd) {\r\n\tvar year = GregorianDate._calcYear(jd - RataDie.gregorianEpoch);\r\n\treturn year < 1929 ? 465.6666666666666666 : 480;\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} jd julian day to calculate from \r\n * @returns {number} the julian day of next new moon on or after the given julian day date\r\n */\r\nHanCal._newMoonOnOrAfter = function(jd) {\r\n\tvar tz = HanCal._chineseTZ(jd);\r\n\tvar uni = Astro._universalFromLocal(jd, tz);\r\n\tvar moon = Astro._newMoonAtOrAfter(uni);\r\n\t// floor to the start of the julian day\r\n\treturn Astro._floorToJD(Astro._localFromUniversal(moon, tz)); \r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} jd julian day to calculate from \r\n * @returns {number} the julian day of previous new moon before the given julian day date\r\n */\r\nHanCal._newMoonBefore = function(jd) {\r\n\tvar tz = HanCal._chineseTZ(jd);\r\n\tvar uni = Astro._universalFromLocal(jd, tz);\r\n\tvar moon = Astro._newMoonBefore(uni);\r\n\t// floor to the start of the julian day\r\n\treturn Astro._floorToJD(Astro._localFromUniversal(moon, tz));\r\n};\r\n\r\n/**\r\n * @static\r\n * @protected\r\n * @param {number} year the year for which the leap year information is being sought\r\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\r\n * cycle is not given, then the year should be given as elapsed years since the beginning\r\n * of the epoch\r\n */\r\nHanCal._leapYearCalc = function(year, cycle) {\r\n\tvar ret = {\r\n\t\telapsedYear: HanCal._getElapsedYear(year, cycle)\r\n\t};\r\n\tret.solstice1 = HanCal._solsticeBefore(ret.elapsedYear);\r\n\tret.solstice2 = HanCal._solsticeBefore(ret.elapsedYear+1);\r\n\t// ceil to the end of the julian day\r\n\tret.m1 = HanCal._newMoonOnOrAfter(Astro._ceilToJD(ret.solstice1));\r\n\tret.m2 = HanCal._newMoonBefore(Astro._ceilToJD(ret.solstice2));\r\n\t\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} jd julian day to calculate from\r\n * @returns {number} the current major solar term\r\n */\r\nHanCal._currentMajorST = function(jd) {\r\n\tvar s = Astro._solarLongitude(Astro._universalFromLocal(jd, HanCal._chineseTZ(jd)));\r\n\treturn MathUtils.amod(2 + Math.floor(s/30), 12);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} jd julian day to calculate from\r\n * @returns {boolean} true if there is no major solar term in the same year\r\n */\r\nHanCal._noMajorST = function(jd) {\r\n\treturn HanCal._currentMajorST(jd) === HanCal._currentMajorST(HanCal._newMoonOnOrAfter(jd+1));\r\n};\r\n\r\n/**\r\n * Return the number of months in the given year. The number of months in a year varies\r\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \r\n * days in a year to an entire solar year. The month is represented as a 1-based number\r\n * where 1=first month, 2=second month, etc.\r\n * \r\n * @param {number} year a year for which the number of months is sought\r\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\r\n * cycle is not given, then the year should be given as elapsed years since the beginning\r\n * of the epoch\r\n * @return {number} The number of months in the given year\r\n */\r\nHanCal.prototype.getNumMonths = function(year, cycle) {\r\n\treturn this.isLeapYear(year, cycle) ? 13 : 12;\r\n};\r\n\r\n/**\r\n * Return the number of days in a particular month in a particular year. This function\r\n * can return a different number for a month depending on the year because of things\r\n * like leap years.\r\n * \r\n * @param {number} month the elapsed month for which the length is sought\r\n * @param {number} year the elapsed year within which that month can be found\r\n * @return {number} the number of days within the given month in the given year\r\n */\r\nHanCal.prototype.getMonLength = function(month, year) {\r\n\t// distance between two new moons in Nanjing China\r\n\tvar calc = HanCal._leapYearCalc(year);\r\n\tvar priorNewMoon = HanCal._newMoonOnOrAfter(calc.m1 + month * 29);\r\n\tvar postNewMoon = HanCal._newMoonOnOrAfter(priorNewMoon + 1);\r\n\treturn postNewMoon - priorNewMoon;\r\n};\r\n\r\n/**\r\n * Return the equivalent year in the 2820 year cycle that begins on \r\n * Far 1, 474. This particular cycle obeys the cycle-of-years formula \r\n * whereas the others do not specifically. This cycle can be used as\r\n * a proxy for other years outside of the cycle by shifting them into \r\n * the cycle.   \r\n * @param {number} year year to find the equivalent cycle year for\r\n * @returns {number} the equivalent cycle year\r\n */\r\nHanCal.prototype.equivalentCycleYear = function(year) {\r\n\tvar y = year - (year >= 0 ? 474 : 473);\r\n\treturn MathUtils.mod(y, 2820) + 474;\r\n};\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Han calendar.\r\n * If the year is given as a year/cycle combination, then the year should be in the \r\n * range [1,60] and the given cycle is the cycle in which the year is located. If \r\n * the year is greater than 60, then\r\n * it represents the total number of years elapsed in the proleptic calendar since\r\n * the beginning of the Chinese epoch in on 15 Feb, -2636 (Gregorian). In this \r\n * case, the cycle parameter is ignored.\r\n * \r\n * @param {number} year the year for which the leap year information is being sought\r\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\r\n * cycle is not given, then the year should be given as elapsed years since the beginning\r\n * of the epoch\r\n * @return {boolean} true if the given year is a leap year\r\n */\r\nHanCal.prototype.isLeapYear = function(year, cycle) {\r\n\tvar calc = HanCal._leapYearCalc(year, cycle);\r\n\treturn Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\r\n};\r\n\r\n/**\r\n * Return the month of the year that is the leap month. If the given year is\r\n * not a leap year, then this method will return -1.\r\n * \r\n * @param {number} year the year for which the leap year information is being sought\r\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\r\n * cycle is not given, then the year should be given as elapsed years since the beginning\r\n * of the epoch\r\n * @return {number} the number of the month that is doubled in this leap year, or -1\r\n * if this is not a leap year\r\n */\r\nHanCal.prototype.getLeapMonth = function(year, cycle) {\r\n\tvar calc = HanCal._leapYearCalc(year, cycle);\r\n\t\r\n\tif (Math.round((calc.m2 - calc.m1) / 29.530588853000001) != 12) {\r\n\t\treturn -1; // no leap month\r\n\t}\r\n\t\r\n\t// search between rd1 and rd2 for the first month with no major solar term. That is our leap month.\r\n\tvar month = 0;\r\n\tvar m = HanCal._newMoonOnOrAfter(calc.m1+1);\r\n\twhile (!HanCal._noMajorST(m)) {\r\n\t\tmonth++;\r\n\t\tm = HanCal._newMoonOnOrAfter(m+1);\r\n\t}\r\n\t\r\n\t// return the number of the month that is doubled\r\n\treturn month; \r\n};\r\n\r\n/**\r\n * Return the date of Chinese New Years in the given calendar year.\r\n * \r\n * @param {number} year the Chinese year for which the new year information is being sought\r\n * @param {number=} cycle if the given year < 60, this can specify the cycle. If the\r\n * cycle is not given, then the year should be given as elapsed years since the beginning\r\n * of the epoch\r\n * @return {number} the julian day of the beginning of the given year \r\n */\r\nHanCal.prototype.newYears = function(year, cycle) {\r\n\tvar calc = HanCal._leapYearCalc(year, cycle);\r\n\tvar m2 = HanCal._newMoonOnOrAfter(calc.m1+1);\r\n\tif (Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12 &&\r\n\t\t\t(HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2)) ) {\r\n\t\treturn HanCal._newMoonOnOrAfter(m2+1);\r\n\t}\r\n\treturn m2;\r\n};\r\n\r\n/**\r\n * Return the type of this calendar.\r\n * \r\n * @return {string} the name of the type of this calendar \r\n */\r\nHanCal.prototype.getType = function() {\r\n\treturn this.type;\r\n};\r\n\r\n\r\n/* register this calendar for the factory method */\r\nCalendar._constructors[\"han\"] = HanCal;\r\n\r\nmodule.exports = HanCal;","/*\r\n * persratadie.js - Represent a rata die date in the Persian calendar\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nMathUtils.js\r\nRataDie.js\r\nAstro.js\r\nGregorianDate.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Astro = require(\"./Astro.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\nvar GregorianDate = require(\"./GregorianDate.js\");\r\n\r\n\r\n/**\r\n * @class\r\n * Construct a new Persian RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Persian date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @constructor\r\n * @extends RataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date\r\n */\r\nvar PersRataDie = function(params) {\r\n\tthis.rd = undefined;\r\n\tAstro.initAstro(\r\n\t\tparams && typeof(params.sync) === 'boolean' ? params.sync : true,\r\n\t\tparams && params.loadParams,\r\n\t\tilib.bind(this, function (x) {\r\n\t\t\tRataDie.call(this, params);\r\n\t\t\tif (params && typeof(params.callback) === 'function') {\r\n\t\t\t\tparams.callback(this);\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n};\r\n\r\nPersRataDie.prototype = new RataDie();\r\nPersRataDie.prototype.parent = RataDie;\r\nPersRataDie.prototype.constructor = PersRataDie;\r\n\r\n/**\r\n * The difference between a zero Julian day and the first Persian date\r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nPersRataDie.prototype.epoch = 1948319.5;\r\n\r\n/**\r\n * @protected \r\n */\r\nPersRataDie.prototype._tehranEquinox = function(year) {\r\n    var equJED, equJD, equAPP, equTehran, dtTehran, eot;\r\n\r\n    //  March equinox in dynamical time\r\n    equJED = Astro._equinox(year, 0);\r\n\r\n    //  Correct for delta T to obtain Universal time\r\n    equJD = equJED - (Astro._deltat(year) / (24 * 60 * 60));\r\n\r\n    //  Apply the equation of time to yield the apparent time at Greenwich\r\n    eot = Astro._equationOfTime(equJED) * 360;\r\n    eot = (eot - 20 * Math.floor(eot/20)) / 360;\r\n    equAPP = equJD + eot;\r\n\r\n    /*  \r\n     * Finally, we must correct for the constant difference between\r\n     * the Greenwich meridian and the time zone standard for Iran \r\n     * Standard time, 52 degrees 30 minutes to the East.\r\n     */\r\n\r\n    dtTehran = 52.5 / 360;\r\n    equTehran = equAPP + dtTehran;\r\n\r\n    return equTehran;\r\n};\r\n\r\n/**\r\n * Calculate the year based on the given Julian day.\r\n * @protected\r\n * @param {number} jd the Julian day to get the year for\r\n * @return {{year:number,equinox:number}} the year and the last equinox\r\n */\r\nPersRataDie.prototype._getYear = function(jd) {\r\n\tvar gd = new GregorianDate({julianday: jd});\r\n    var guess = gd.getYears() - 2,\r\n    \tnexteq,\r\n    \tret = {};\r\n\r\n    //ret.equinox = Math.floor(this._tehranEquinox(guess));\r\n    ret.equinox = this._tehranEquinox(guess);\r\n\twhile (ret.equinox > jd) {\r\n\t    guess--;\r\n\t    // ret.equinox = Math.floor(this._tehranEquinox(guess));\r\n\t    ret.equinox = this._tehranEquinox(guess);\r\n\t}\r\n\tnexteq = ret.equinox - 1;\r\n\t// if the equinox falls after noon, then the day after that is the start of the \r\n\t// next year, so truncate the JD to get the noon of the day before the day with \r\n\t//the equinox on it, then add 0.5 to get the midnight of that day \r\n\twhile (!(Math.floor(ret.equinox) + 0.5 <= jd && jd < Math.floor(nexteq) + 0.5)) {\r\n\t    ret.equinox = nexteq;\r\n\t    guess++;\r\n\t    // nexteq = Math.floor(this._tehranEquinox(guess));\r\n\t    nexteq = this._tehranEquinox(guess);\r\n\t}\r\n\t\r\n\t// Mean solar tropical year is 365.24219878 days\r\n\tret.year = Math.round((ret.equinox - this.epoch - 1) / 365.24219878) + 1;\r\n\t\r\n\treturn ret;\r\n};\r\n\r\n/**\r\n * Calculate the Rata Die (fixed day) number of the given date from the\r\n * date components.\r\n *\r\n * @protected\r\n * @param {Object} date the date components to calculate the RD from\r\n */\r\nPersRataDie.prototype._setDateComponents = function(date) {\r\n    var adr, guess, jd;\r\n\r\n    // Mean solar tropical year is 365.24219878 days \r\n    guess = this.epoch + 1 + 365.24219878 * (date.year - 2);\r\n    adr = {year: date.year - 1, equinox: 0};\r\n\r\n    while (adr.year < date.year) {\r\n        adr = this._getYear(guess);\r\n        guess = adr.equinox + (365.24219878 + 2);\r\n    }\r\n\r\n    jd = Math.floor(adr.equinox) +\r\n            ((date.month <= 7) ?\r\n                ((date.month - 1) * 31) :\r\n                (((date.month - 1) * 30) + 6)\r\n            ) +\r\n    \t    (date.day - 1 + 0.5); // add 0.5 so that we convert JDs, which start at noon to RDs which start at midnight\r\n    \r\n\tjd += (date.hour * 3600000 +\r\n\t\t\tdate.minute * 60000 +\r\n\t\t\tdate.second * 1000 +\r\n\t\t\tdate.millisecond) /\r\n\t\t\t86400000;\r\n\r\n    this.rd = jd - this.epoch;\r\n};\r\n\r\n/**\r\n * Return the rd number of the particular day of the week on or before the \r\n * given rd. eg. The Sunday on or before the given rd.\r\n * @private\r\n * @param {number} rd the rata die date of the reference date\r\n * @param {number} dayOfWeek the day of the week that is being sought relative \r\n * to the current date\r\n * @return {number} the rd of the day of the week\r\n */\r\nPersRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\r\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek - 3, 7);\r\n};\r\n\r\nmodule.exports = PersRataDie;","/*\r\n * HanDate.js - Represent a date in the Han algorithmic calendar\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends\r\nilib.js\r\nHanCal.js\r\nMathUtils.js\r\nRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\nvar HanCal = require(\"./HanCal.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\n\r\n/**\r\n * Construct a new Han RD date number object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\r\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \r\n * linear count of years since the beginning of the epoch, much like other calendars. This linear\r\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \r\n * to 60 and treated as if it were a year in the regular 60-year cycle.\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Han date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above are present, then the RD is calculate based on \r\n * the current date at the time of instantiation. <p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @private\r\n * @class\r\n * @constructor\r\n * @extends RataDie\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Han RD date\r\n */\r\nvar HanRataDie = function(params) {\r\n\tthis.rd = undefined;\r\n\tif (params && params.cal) {\r\n\t\tthis.cal = params.cal;\r\n\t\tRataDie.call(this, params);\r\n\t\tif (params && typeof(params.callback) === 'function') {\r\n\t\t\tparams.callback(this);\r\n\t\t}\r\n\t} else {\r\n\t\tnew HanCal({\r\n\t\t\tsync: params && params.sync,\r\n\t\t\tloadParams: params && params.loadParams,\r\n\t\t\tcallback: ilib.bind(this, function(c) {\r\n\t\t\t\tthis.cal = c;\r\n\t\t\t\tRataDie.call(this, params);\r\n\t\t\t\tif (params && typeof(params.callback) === 'function') {\r\n\t\t\t\t\tparams.callback(this);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n};\r\n\r\nHanRataDie.prototype = new RataDie();\r\nHanRataDie.prototype.parent = RataDie;\r\nHanRataDie.prototype.constructor = HanRataDie;\r\n\r\n/**\r\n * The difference between a zero Julian day and the first Han date\r\n * which is February 15, -2636 (Gregorian).\r\n * @private\r\n * @const\r\n * @type number\r\n */\r\nHanRataDie.epoch = 758325.5;\r\n\r\n/**\r\n * Calculate the Rata Die (fixed day) number of the given date from the\r\n * date components.\r\n *\r\n * @protected\r\n * @param {Object} date the date components to calculate the RD from\r\n */\r\nHanRataDie.prototype._setDateComponents = function(date) {\r\n\tvar calc = HanCal._leapYearCalc(date.year, date.cycle);\r\n\tvar m2 = HanCal._newMoonOnOrAfter(calc.m1+1);\r\n\tvar newYears;\r\n\tthis.leapYear = (Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12);\r\n\tif (this.leapYear && (HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2)) ) {\r\n\t\tnewYears = HanCal._newMoonOnOrAfter(m2+1);\r\n\t} else {\r\n\t\tnewYears = m2;\r\n\t}\r\n\r\n\tvar priorNewMoon = HanCal._newMoonOnOrAfter(calc.m1 + date.month * 29); // this is a julian day\r\n\tthis.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(priorNewMoon));\r\n\tthis.leapMonth = (this.leapYear && HanCal._noMajorST(priorNewMoon) && !this.priorLeapMonth);\r\n\r\n\tvar rdtime = (date.hour * 3600000 +\r\n\t\tdate.minute * 60000 +\r\n\t\tdate.second * 1000 +\r\n\t\tdate.millisecond) /\r\n\t\t86400000;\r\n\t\r\n\t/*\r\n\tconsole.log(\"getRataDie: converting \" +  JSON.stringify(date) + \" to an RD\");\r\n\tconsole.log(\"getRataDie: year is \" +  date.year + \" plus cycle \" + date.cycle);\r\n\tconsole.log(\"getRataDie: isLeapYear is \" +  this.leapYear);\r\n\tconsole.log(\"getRataDie: priorNewMoon is \" +  priorNewMoon);\r\n\tconsole.log(\"getRataDie: day in month is \" +  date.day);\r\n\tconsole.log(\"getRataDie: rdtime is \" +  rdtime);\r\n\tconsole.log(\"getRataDie: rd is \" +  (priorNewMoon + date.day - 1 + rdtime));\r\n\t*/\r\n\t\r\n\tthis.rd = priorNewMoon + date.day - 1 + rdtime - RataDie.gregorianEpoch;\r\n};\r\n\r\n/**\r\n * Return the rd number of the particular day of the week on or before the \r\n * given rd. eg. The Sunday on or before the given rd.\r\n * @private\r\n * @param {number} rd the rata die date of the reference date\r\n * @param {number} dayOfWeek the day of the week that is being sought relative \r\n * to the current date\r\n * @return {number} the rd of the day of the week\r\n */\r\nHanRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {\r\n\treturn rd - MathUtils.mod(Math.floor(rd) - dayOfWeek, 7);\r\n};\r\n\r\n/**\r\n * @protected\r\n * @static\r\n * @param {number} jd1 first julian day\r\n * @param {number} jd2 second julian day\r\n * @returns {boolean} true if there is a leap month earlier in the same year \r\n * as the given months \r\n */\r\nHanRataDie._priorLeapMonth = function(jd1, jd2) {\r\n\treturn jd2 >= jd1 &&\r\n\t\t(HanRataDie._priorLeapMonth(jd1, HanCal._newMoonBefore(jd2)) ||\r\n\t\t\t\tHanCal._noMajorST(jd2));\r\n};\r\n\r\n\r\nmodule.exports = HanRataDie;","/*\r\n * persianastro.js - Represent a Persian astronomical (Hijjri) calendar object.\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\n/* !depends \r\nCalendar.js \r\nPersRataDie.js \r\nilib.js\r\nMathUtils.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar PersRataDie = require(\"./PersRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * Construct a new Persian astronomical (Hijjri) calendar object. This class encodes \r\n * information about a Persian calendar. This class differs from the \r\n * Persian calendar in that the leap years are calculated based on the\r\n * astronomical observations of the sun in Teheran, instead of calculating\r\n * the leap years based on a regular cyclical rhythm algorithm.<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends Calendar\r\n */\r\nvar PersianCal = function() {\r\n\tthis.type = \"persian\";\r\n};\r\n\r\n/**\r\n * @private\r\n * @const\r\n * @type Array.<number> \r\n * the lengths of each month \r\n */\r\nPersianCal.monthLengths = [\r\n\t31,  // Farvardin\r\n\t31,  // Ordibehesht\r\n\t31,  // Khordad\r\n\t31,  // Tir\r\n\t31,  // Mordad\r\n\t31,  // Shahrivar\r\n\t30,  // Mehr\r\n\t30,  // Aban\r\n\t30,  // Azar\r\n\t30,  // Dey\r\n\t30,  // Bahman\r\n\t29   // Esfand\r\n];\r\n\r\n/**\r\n * Return the number of months in the given year. The number of months in a year varies\r\n * for some luni-solar calendars because in some years, an extra month is needed to extend the \r\n * days in a year to an entire solar year. The month is represented as a 1-based number\r\n * where 1=first month, 2=second month, etc.\r\n * \r\n * @param {number} year a year for which the number of months is sought\r\n * @return {number} The number of months in the given year\r\n */\r\nPersianCal.prototype.getNumMonths = function(year) {\r\n\treturn 12;\r\n};\r\n\r\n/**\r\n * Return the number of days in a particular month in a particular year. This function\r\n * can return a different number for a month depending on the year because of things\r\n * like leap years.\r\n * \r\n * @param {number} month the month for which the length is sought\r\n * @param {number} year the year within which that month can be found\r\n * @return {number} the number of days within the given month in the given year\r\n */\r\nPersianCal.prototype.getMonLength = function(month, year) {\r\n\tif (month !== 12 || !this.isLeapYear(year)) {\r\n\t\treturn PersianCal.monthLengths[month-1];\r\n\t} else {\r\n\t\t// Month 12, Esfand, has 30 days instead of 29 in leap years\r\n\t\treturn 30;\r\n\t}\r\n};\r\n\r\n/**\r\n * Return true if the given year is a leap year in the Persian astronomical calendar.\r\n * @param {number} year the year for which the leap year information is being sought\r\n * @return {boolean} true if the given year is a leap year\r\n */\r\nPersianCal.prototype.isLeapYear = function(year) {\r\n\tvar rdNextYear = new PersRataDie({\r\n\t\tcal: this,\r\n\t\tyear: year + 1,\r\n\t\tmonth: 1,\r\n\t\tday: 1,\r\n\t\thour: 0,\r\n\t\tminute: 0,\r\n\t\tsecond: 0,\r\n\t\tmillisecond: 0\r\n\t});\r\n\tvar rdThisYear = new PersRataDie({\r\n\t\tcal: this,\r\n\t\tyear: year,\r\n\t\tmonth: 1,\r\n\t\tday: 1,\r\n\t\thour: 0,\r\n\t\tminute: 0,\r\n\t\tsecond: 0,\r\n\t\tmillisecond: 0\r\n\t}); \r\n    return (rdNextYear.getRataDie() - rdThisYear.getRataDie()) > 365;\r\n};\r\n\r\n/**\r\n * Return the type of this calendar.\r\n * \r\n * @return {string} the name of the type of this calendar \r\n */\r\nPersianCal.prototype.getType = function() {\r\n\treturn this.type;\r\n};\r\n\r\n/* register this calendar for the factory method */\r\nCalendar._constructors[\"persian\"] = PersianCal;\r\n\r\nmodule.exports = PersianCal;","/*\r\n * HanDate.js - Represent a date in the Han algorithmic calendar\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends\r\nilib.js\r\nIDate.js\r\nGregorianDate.js \r\nHanCal.js\r\nAstro.js \r\nJSUtils.js\r\nMathUtils.js\r\nLocaleInfo.js \r\nLocale.js\r\nTimeZone.js\r\nHanRataDie.js\r\nRataDie.js\r\n*/\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar JSUtils = require(\"./JSUtils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar Astro = require(\"./Astro.js\");\r\nvar HanCal = require(\"./HanCal.js\");\r\nvar GregorianDate = require(\"./GregorianDate.js\");\r\nvar HanRataDie = require(\"./HanRataDie.js\");\r\nvar RataDie = require(\"./RataDie.js\");\r\n\r\n/**\r\n * @class\r\n * \r\n * Construct a new Han date object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.\r\n * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious \r\n * linear count of years since the beginning of the epoch, much like other calendars. This linear\r\n * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 \r\n * to 60 and treated as if it were a year in the regular 60-year cycle.\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \r\n * of this han date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * \r\n * <li><i>locale</i> - locale for this han date. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale.\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Han date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends Date\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Han date\r\n */\r\nvar HanDate = function(params) {\r\n\tthis.timezone = \"local\";\r\n\tif (params) {\r\n\t\tif (params.locale) {\r\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t\t\tvar li = new LocaleInfo(this.locale);\r\n\t\t\tthis.timezone = li.getTimeZone(); \r\n\t\t}\r\n\t\tif (params.timezone) {\r\n\t\t\tthis.timezone = params.timezone;\r\n\t\t}\r\n\t}\r\n\t\r\n\tnew HanCal({\r\n\t\tsync: params && typeof(params) === 'boolean' ? params.sync : true,\r\n\t\tloadParams: params && params.loadParams,\r\n\t\tcallback: ilib.bind(this, function (cal) {\r\n\t\t\tthis.cal = cal;\r\n\t\r\n\t\t\tif (params && (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\tparams.minute || params.second || params.millisecond || params.cycle || params.cycleYear)) {\r\n\t\t\t\tif (typeof(params.cycle) !== 'undefined') {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Cycle number in the Han calendar.\r\n\t\t\t\t\t * @type number\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.cycle = parseInt(params.cycle, 10) || 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar year = (typeof(params.year) !== 'undefined' ? parseInt(params.year, 10) : parseInt(params.cycleYear, 10)) || 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Year in the Han calendar.\r\n\t\t\t\t\t * @type number\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.year = HanCal._getElapsedYear(year, this.cycle);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (typeof(params.year) !== 'undefined') {\r\n\t\t\t\t\t\tthis.year = parseInt(params.year, 10) || 0;\r\n\t\t\t\t\t\tthis.cycle = Math.floor((this.year - 1) / 60);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.year = this.cycle = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The month number, ranging from 1 to 13\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.month = parseInt(params.month, 10) || 1;\r\n\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The day of the month. This ranges from 1 to 30.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.day = parseInt(params.day, 10) || 1;\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\r\n\t\t\t\t * stored unambiguously in the 24-hour clock.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\r\n\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\r\n\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\r\n\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\r\n\t\t\t\r\n\t\t\t\t// derived properties\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * Year in the cycle of the Han calendar\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.cycleYear = MathUtils.amod(this.year, 60); \r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The day of the year. Ranges from 1 to 384.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\r\n\t\r\n\t\t\t\tif (typeof(params.dst) === 'boolean') {\r\n\t\t\t\t\tthis.dst = params.dst;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis.newRd({\r\n\t\t\t\t\tcal: this.cal,\r\n\t\t\t\t\tcycle: this.cycle,\r\n\t\t\t\t\tyear: this.year,\r\n\t\t\t\t\tmonth: this.month,\r\n\t\t\t\t\tday: this.day,\r\n\t\t\t\t\thour: this.hour,\r\n\t\t\t\t\tminute: this.minute,\r\n\t\t\t\t\tsecond: this.second,\r\n\t\t\t\t\tmillisecond: this.millisecond,\r\n\t\t\t\t\tsync: params && typeof(params.sync) === 'boolean' ? params.sync : true,\r\n\t\t\t\t\tloadParams: params && params.loadParams,\r\n\t\t\t\t\tcallback: ilib.bind(this, function (rd) {\r\n\t\t\t\t\t\tif (rd) {\r\n\t\t\t\t\t\t\tthis.rd = rd;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// add the time zone offset to the rd to convert to UTC\r\n\t\t\t\t\t\t\tif (!this.tz) {\r\n\t\t\t\t\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \r\n\t\t\t\t\t\t\t// are set in order to figure out which time zone rules apply and \r\n\t\t\t\t\t\t\t// what the offset is at that point in the year\r\n\t\t\t\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\r\n\t\t\t\t\t\t\tif (this.offset !== 0) {\r\n\t\t\t\t\t\t\t\tthis.rd = this.newRd({\r\n\t\t\t\t\t\t\t\t\tcal: this.cal,\r\n\t\t\t\t\t\t\t\t\trd: this.rd.getRataDie() - this.offset\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tthis._calcLeap();\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t// re-use the derived properties from the RD calculations\r\n\t\t\t\t\t\t\t\tthis.leapMonth = this.rd.leapMonth;\r\n\t\t\t\t\t\t\t\tthis.priorLeapMonth = this.rd.priorLeapMonth;\r\n\t\t\t\t\t\t\t\tthis.leapYear = this.rd.leapYear;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!this.rd) {\r\n\t\t\t\t\t\t\tthis.rd = this.newRd(JSUtils.merge(params || {}, {\r\n\t\t\t\t\t\t\t\tcal: this.cal\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\tthis._calcDateComponents();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (params && typeof(params.onLoad) === 'function') {\r\n\t\t\t\t\t\t\tparams.onLoad(this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tif (!this.rd) {\r\n\t\t\t\t\tthis.rd = this.newRd(JSUtils.merge(params || {}, {\r\n\t\t\t\t\t\tcal: this.cal\r\n\t\t\t\t\t}));\r\n\t\t\t\t\tthis._calcDateComponents();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (params && typeof(params.onLoad) === 'function') {\r\n\t\t\t\t\tparams.onLoad(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n\r\n};\r\n\r\nHanDate.prototype = new IDate({noinstance: true});\r\nHanDate.prototype.parent = IDate;\r\nHanDate.prototype.constructor = HanDate;\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @protected\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nHanDate.prototype.newRd = function (params) {\r\n\treturn new HanRataDie(params);\r\n};\r\n\r\n/**\r\n * Return the year for the given RD\r\n * @protected\r\n * @param {number} rd RD to calculate from \r\n * @returns {number} the year for the RD\r\n */\r\nHanDate.prototype._calcYear = function(rd) {\r\n\tvar gregdate = new GregorianDate({\r\n\t\trd: rd,\r\n\t\ttimezone: this.timezone\r\n\t});\r\n\tvar hanyear = gregdate.year + 2697;\r\n\tvar newYears = this.cal.newYears(hanyear);\r\n\treturn hanyear - ((rd + RataDie.gregorianEpoch < newYears) ? 1 : 0);\r\n};\r\n\r\n/** \r\n * @private \r\n * Calculate the leap year and months from the RD.\r\n */\r\nHanDate.prototype._calcLeap = function() {\r\n\tvar jd = this.rd.getRataDie() + RataDie.gregorianEpoch;\r\n\t\r\n\tvar calc = HanCal._leapYearCalc(this.year);\r\n\tvar m2 = HanCal._newMoonOnOrAfter(calc.m1+1);\r\n\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\r\n\t\r\n\tvar newYears = (this.leapYear &&\r\n\t\t(HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) ?\r\n\t\t\t\tHanCal._newMoonOnOrAfter(m2+1) : m2;\r\n\t\r\n\tvar m = HanCal._newMoonBefore(jd + 1);\r\n\tthis.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(m));\r\n\tthis.leapMonth = (this.leapYear && HanCal._noMajorST(m) && !this.priorLeapMonth);\r\n};\r\n\r\n/**\r\n * @private\r\n * Calculate date components for the given RD date.\r\n */\r\nHanDate.prototype._calcDateComponents = function () {\r\n\tvar remainder,\r\n\t\tjd = this.rd.getRataDie() + RataDie.gregorianEpoch;\r\n\r\n\t// console.log(\"HanDate._calcDateComponents: calculating for jd \" + jd);\r\n\r\n\tif (typeof(this.offset) === \"undefined\") {\r\n\t\t// now offset the jd by the time zone, then recalculate in case we were \r\n\t\t// near the year boundary\r\n\t\tif (!this.tz) {\r\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t}\r\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\r\n\t}\r\n\t\r\n\tif (this.offset !== 0) {\r\n\t\tjd += this.offset;\r\n\t}\r\n\r\n\t// use the Gregorian calendar objects as a convenient way to short-cut some\r\n\t// of the date calculations\r\n\t\r\n\tvar gregyear = GregorianDate._calcYear(this.rd.getRataDie());\r\n\tthis.year = gregyear + 2697;\r\n\tvar calc = HanCal._leapYearCalc(this.year);\r\n\tvar m2 = HanCal._newMoonOnOrAfter(calc.m1+1);\r\n\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\r\n\tvar newYears = (this.leapYear &&\r\n\t\t(HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) ?\r\n\t\t\t\tHanCal._newMoonOnOrAfter(m2+1) : m2;\r\n\t\r\n\t// See if it's between Jan 1 and the Chinese new years of that Gregorian year. If\r\n\t// so, then the Han year is actually the previous one\r\n\tif (jd < newYears) {\r\n\t\tthis.year--;\r\n\t\tcalc = HanCal._leapYearCalc(this.year);\r\n\t\tm2 = HanCal._newMoonOnOrAfter(calc.m1+1);\r\n\t\tthis.leapYear = Math.round((calc.m2 - calc.m1) / 29.530588853000001) === 12;\r\n\t\tnewYears = (this.leapYear &&\r\n\t\t\t(HanCal._noMajorST(calc.m1) || HanCal._noMajorST(m2))) ?\r\n\t\t\t\t\tHanCal._newMoonOnOrAfter(m2+1) : m2;\r\n\t}\r\n\t// month is elapsed month, not the month number + leap month boolean\r\n\tvar m = HanCal._newMoonBefore(jd + 1);\r\n\tthis.month = Math.round((m - calc.m1) / 29.530588853000001);\r\n\t\r\n\tthis.priorLeapMonth = HanRataDie._priorLeapMonth(newYears, HanCal._newMoonBefore(m));\r\n\tthis.leapMonth = (this.leapYear && HanCal._noMajorST(m) && !this.priorLeapMonth);\r\n\t\r\n\tthis.cycle = Math.floor((this.year - 1) / 60);\r\n\tthis.cycleYear = MathUtils.amod(this.year, 60);\r\n\tthis.day = Astro._floorToJD(jd) - m + 1;\r\n\r\n\t/*\r\n\tconsole.log(\"HanDate._calcDateComponents: year is \" + this.year);\r\n\tconsole.log(\"HanDate._calcDateComponents: isLeapYear is \" + this.leapYear);\r\n\tconsole.log(\"HanDate._calcDateComponents: cycle is \" + this.cycle);\r\n\tconsole.log(\"HanDate._calcDateComponents: cycleYear is \" + this.cycleYear);\r\n\tconsole.log(\"HanDate._calcDateComponents: month is \" + this.month);\r\n\tconsole.log(\"HanDate._calcDateComponents: isLeapMonth is \" + this.leapMonth);\r\n\tconsole.log(\"HanDate._calcDateComponents: day is \" + this.day);\r\n\t*/\r\n\r\n\t// floor to the start of the julian day\r\n\tremainder = jd - Astro._floorToJD(jd);\r\n\t\r\n\t// console.log(\"HanDate._calcDateComponents: time remainder is \" + remainder);\r\n\t\r\n\t// now convert to milliseconds for the rest of the calculation\r\n\tremainder = Math.round(remainder * 86400000);\r\n\t\r\n\tthis.hour = Math.floor(remainder/3600000);\r\n\tremainder -= this.hour * 3600000;\r\n\t\r\n\tthis.minute = Math.floor(remainder/60000);\r\n\tremainder -= this.minute * 60000;\r\n\t\r\n\tthis.second = Math.floor(remainder/1000);\r\n\tremainder -= this.second * 1000;\r\n\t\r\n\tthis.millisecond = remainder;\r\n};\r\n\r\n/**\r\n * Return the year within the Chinese cycle of this date. Cycles are 60 \r\n * years long, and the value returned from this method is the number of the year \r\n * within this cycle. The year returned from getYear() is the total elapsed \r\n * years since the beginning of the Chinese epoch and does not include \r\n * the cycles. \r\n * \r\n * @return {number} the year within the current Chinese cycle\r\n */\r\nHanDate.prototype.getCycleYears = function() {\r\n\treturn this.cycleYear;\r\n};\r\n\r\n/**\r\n * Return the Chinese cycle number of this date. Cycles are 60 years long,\r\n * and the value returned from getCycleYear() is the number of the year \r\n * within this cycle. The year returned from getYear() is the total elapsed \r\n * years since the beginning of the Chinese epoch and does not include \r\n * the cycles. \r\n * \r\n * @return {number} the current Chinese cycle\r\n */\r\nHanDate.prototype.getCycles = function() {\r\n\treturn this.cycle;\r\n};\r\n\r\n/**\r\n * Return whether the year of this date is a leap year in the Chinese Han \r\n * calendar. \r\n * \r\n * @return {boolean} true if the year of this date is a leap year in the \r\n * Chinese Han calendar. \r\n */\r\nHanDate.prototype.isLeapYear = function() {\r\n\treturn this.leapYear;\r\n};\r\n\r\n/**\r\n * Return whether the month of this date is a leap month in the Chinese Han \r\n * calendar.\r\n * \r\n * @return {boolean} true if the month of this date is a leap month in the \r\n * Chinese Han calendar.\r\n */\r\nHanDate.prototype.isLeapMonth = function() {\r\n\treturn this.leapMonth;\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nHanDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));\r\n\treturn MathUtils.mod(rd, 7);\r\n};\r\n\r\n/**\r\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \r\n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and \r\n * December 31st is 365 in regular years, or 366 in leap years.\r\n * @return {number} the ordinal day of the year\r\n */\r\nHanDate.prototype.getDayOfYear = function() {\r\n\tvar newYears = this.cal.newYears(this.year);\r\n\tvar priorNewMoon = HanCal._newMoonOnOrAfter(newYears + (this.month -1) * 29);\r\n\treturn priorNewMoon - newYears + this.day;\r\n};\r\n\r\n/**\r\n * Return the era for this date as a number. The value for the era for Han \r\n * calendars is -1 for \"before the han era\" (BP) and 1 for \"the han era\" (anno \r\n * persico or AP). \r\n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Han calendar, \r\n * there is a year 0, so any years that are negative or zero are BP.\r\n * @return {number} 1 if this date is in the common era, -1 if it is before the \r\n * common era \r\n */\r\nHanDate.prototype.getEra = function() {\r\n\treturn (this.year < 1) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nHanDate.prototype.getCalendar = function() {\r\n\treturn \"han\";\r\n};\r\n\r\n// register with the factory method\r\nIDate._constructors[\"han\"] = HanDate;\r\n\r\nmodule.exports = HanDate;","/*\r\n * PersianDate.js - Represent a date in the Persian astronomical (Hijjri) calendar\r\n * \r\n * Copyright © 2014-2015, JEDLSoft\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* !depends \r\nilib.js\r\nLocale.js\r\nTimeZone.js\r\nIDate.js\r\nPersRataDie.js\r\nPersianCal.js \r\nSearchUtils.js\r\nMathUtils.js\r\nLocaleInfo.js \r\nAstro.js\r\n*/\r\n\r\n// !data astro\r\n\r\nvar ilib = require(\"./ilib.js\");\r\nvar SearchUtils = require(\"./SearchUtils.js\");\r\nvar MathUtils = require(\"./MathUtils.js\");\r\n\r\nvar Locale = require(\"./Locale.js\");\r\nvar LocaleInfo = require(\"./LocaleInfo.js\");\r\nvar TimeZone = require(\"./TimeZone.js\");\r\nvar IDate = require(\"./IDate.js\");\r\nvar Calendar = require(\"./Calendar.js\");\r\n\r\nvar Astro = require(\"./Astro.js\");\r\nvar PersianCal = require(\"./PersianCal.js\");\r\nvar PersRataDie = require(\"./PersRataDie.js\");\r\n\r\n/**\r\n * @class\r\n * \r\n * Construct a new Persian astronomical date object. The constructor parameters can \r\n * contain any of the following properties:\r\n * \r\n * <ul>\r\n * <li><i>unixtime<i> - sets the time of this instance according to the given \r\n * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian\r\n * \r\n * <li><i>julianday</i> - sets the time of this instance according to the given\r\n * Julian Day instance or the Julian Day given as a float\r\n * \r\n * <li><i>year</i> - any integer, including 0\r\n * \r\n * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.\r\n * \r\n * <li><i>day</i> - 1 to 31\r\n * \r\n * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation \r\n * is always done with an unambiguous 24 hour representation\r\n * \r\n * <li><i>minute</i> - 0 to 59\r\n * \r\n * <li><i>second</i> - 0 to 59\r\n * \r\n * <li><i>millisecond</i> - 0 to 999\r\n * \r\n * <li><i>timezone</i> - the TimeZone instance or time zone name as a string \r\n * of this persian date. The date/time is kept in the local time. The time zone\r\n * is used later if this date is formatted according to a different time zone and\r\n * the difference has to be calculated, or when the date format has a time zone\r\n * component in it.\r\n * \r\n * <li><i>locale</i> - locale for this persian date. If the time zone is not \r\n * given, it can be inferred from this locale. For locales that span multiple\r\n * time zones, the one with the largest population is chosen as the one that \r\n * represents the locale.\r\n * \r\n * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.\r\n * </ul>\r\n *\r\n * If the constructor is called with another Persian date instance instead of\r\n * a parameter block, the other instance acts as a parameter block and its\r\n * settings are copied into the current instance.<p>\r\n * \r\n * If the constructor is called with no arguments at all or if none of the \r\n * properties listed above \r\n * from <i>unixtime</i> through <i>millisecond</i> are present, then the date \r\n * components are \r\n * filled in with the current date at the time of instantiation. Note that if\r\n * you do not give the time zone when defaulting to the current time and the \r\n * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the\r\n * time zone will default to UTC (\"Universal Time, Coordinated\" or \"Greenwich \r\n * Mean Time\").<p>\r\n * \r\n * If any of the properties from <i>year</i> through <i>millisecond</i> are not\r\n * specified in the params, it is assumed that they have the smallest possible\r\n * value in the range for the property (zero or one).<p>\r\n * \r\n * \r\n * @constructor\r\n * @extends IDate\r\n * @param {Object=} params parameters that govern the settings and behaviour of this Persian date\r\n */\r\nvar PersianDate = function(params) {\r\n\tthis.cal = new PersianCal();\r\n\tthis.timezone = \"local\";\r\n\t\r\n\tif (params) {\r\n\t\tif (params.locale) {\r\n\t\t\tthis.locale = (typeof(params.locale) === 'string') ? new Locale(params.locale) : params.locale;\r\n\t\t\tvar li = new LocaleInfo(this.locale);\r\n\t\t\tthis.timezone = li.getTimeZone(); \r\n\t\t}\r\n\t\tif (params.timezone) {\r\n\t\t\tthis.timezone = params.timezone;\r\n\t\t}\r\n\t}\r\n\t\r\n\tAstro.initAstro(\r\n\t\tparams && typeof(params.sync) === 'boolean' ? params.sync : true,\r\n\t\tparams && params.loadParams,\r\n\t\tilib.bind(this, function (x) {\r\n\t\t\tif (params && (params.year || params.month || params.day || params.hour ||\r\n\t\t\t\t\tparams.minute || params.second || params.millisecond)) {\r\n\t\t\t\t/**\r\n\t\t\t\t * Year in the Persian calendar.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.year = parseInt(params.year, 10) || 0;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The month number, ranging from 1 to 12\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.month = parseInt(params.month, 10) || 1;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The day of the month. This ranges from 1 to 31.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.day = parseInt(params.day, 10) || 1;\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The hour of the day. This can be a number from 0 to 23, as times are\r\n\t\t\t\t * stored unambiguously in the 24-hour clock.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.hour = parseInt(params.hour, 10) || 0;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The minute of the hours. Ranges from 0 to 59.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.minute = parseInt(params.minute, 10) || 0;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The second of the minute. Ranges from 0 to 59.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.second = parseInt(params.second, 10) || 0;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * The millisecond of the second. Ranges from 0 to 999.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.millisecond = parseInt(params.millisecond, 10) || 0;\r\n\t\t\t\t\r\n\t\t\t\t/**\r\n\t\t\t\t * The day of the year. Ranges from 1 to 366.\r\n\t\t\t\t * @type number\r\n\t\t\t\t */\r\n\t\t\t\tthis.dayOfYear = parseInt(params.dayOfYear, 10);\r\n\r\n\t\t\t\tif (typeof(params.dst) === 'boolean') {\r\n\t\t\t\t\tthis.dst = params.dst;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis.rd = this.newRd(this);\r\n\t\t\t\t\r\n\t\t\t\t// add the time zone offset to the rd to convert to UTC\r\n\t\t\t\tif (!this.tz) {\r\n\t\t\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t\t\t}\r\n\t\t\t\t// getOffsetMillis requires that this.year, this.rd, and this.dst \r\n\t\t\t\t// are set in order to figure out which time zone rules apply and \r\n\t\t\t\t// what the offset is at that point in the year\r\n\t\t\t\tthis.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;\r\n\t\t\t\tif (this.offset !== 0) {\r\n\t\t\t\t\tthis.rd = this.newRd({\r\n\t\t\t\t\t\trd: this.rd.getRataDie() - this.offset\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!this.rd) {\r\n\t\t\t\tthis.rd = this.newRd(params);\r\n\t\t\t\tthis._calcDateComponents();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (params && typeof(params.onLoad) === 'function') {\r\n\t\t\t\tparams.onLoad(this);\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n};\r\n\r\nPersianDate.prototype = new IDate({noinstance: true});\r\nPersianDate.prototype.parent = IDate;\r\nPersianDate.prototype.constructor = PersianDate;\r\n\r\n/**\r\n * @private\r\n * @const\r\n * @type Array.<number>\r\n * the cumulative lengths of each month, for a non-leap year \r\n */\r\nPersianDate.cumMonthLengths = [\r\n    0,    // Farvardin\r\n\t31,   // Ordibehesht\r\n\t62,   // Khordad\r\n\t93,   // Tir\r\n\t124,  // Mordad\r\n\t155,  // Shahrivar\r\n\t186,  // Mehr\r\n\t216,  // Aban\r\n\t246,  // Azar\r\n\t276,  // Dey\r\n\t306,  // Bahman\r\n\t336,  // Esfand\r\n\t366\r\n];\r\n\r\n/**\r\n * Return a new RD for this date type using the given params.\r\n * @protected\r\n * @param {Object=} params the parameters used to create this rata die instance\r\n * @returns {RataDie} the new RD instance for the given params\r\n */\r\nPersianDate.prototype.newRd = function (params) {\r\n\treturn new PersRataDie(params);\r\n};\r\n\r\n/**\r\n * Return the year for the given RD\r\n * @protected\r\n * @param {number} rd RD to calculate from \r\n * @returns {number} the year for the RD\r\n */\r\nPersianDate.prototype._calcYear = function(rd) {\r\n\tvar julianday = rd + this.rd.epoch;\r\n\treturn this.rd._getYear(julianday).year;\r\n};\r\n\r\n/**\r\n * @private\r\n * Calculate date components for the given RD date.\r\n */\r\nPersianDate.prototype._calcDateComponents = function () {\r\n\tvar remainder,\r\n\t\trd = this.rd.getRataDie();\r\n\t\r\n\tthis.year = this._calcYear(rd);\r\n\t\r\n\tif (typeof(this.offset) === \"undefined\") {\r\n\t\t// now offset the RD by the time zone, then recalculate in case we were \r\n\t\t// near the year boundary\r\n\t\tif (!this.tz) {\r\n\t\t\tthis.tz = new TimeZone({id: this.timezone});\r\n\t\t}\r\n\t\tthis.offset = this.tz.getOffsetMillis(this) / 86400000;\r\n\t}\r\n\t\r\n\tif (this.offset !== 0) {\r\n\t\trd += this.offset;\r\n\t\tthis.year = this._calcYear(rd);\r\n\t}\r\n\t\r\n\t//console.log(\"PersDate.calcComponent: calculating for rd \" + rd);\r\n\t//console.log(\"PersDate.calcComponent: year is \" + ret.year);\r\n\tvar yearStart = this.newRd({\r\n\t\tyear: this.year,\r\n\t\tmonth: 1,\r\n\t\tday: 1,\r\n\t\thour: 0,\r\n\t\tminute: 0,\r\n\t\tsecond: 0,\r\n\t\tmillisecond: 0\r\n\t});\r\n\tremainder = rd - yearStart.getRataDie() + 1;\r\n\t\r\n\tthis.dayOfYear = remainder;\r\n\t\r\n\t//console.log(\"PersDate.calcComponent: remainder is \" + remainder);\r\n\t\r\n\tthis.month = SearchUtils.bsearch(Math.floor(remainder), PersianDate.cumMonthLengths);\r\n\tremainder -= PersianDate.cumMonthLengths[this.month-1];\r\n\t\r\n\t//console.log(\"PersDate.calcComponent: month is \" + this.month + \" and remainder is \" + remainder);\r\n\t\r\n\tthis.day = Math.floor(remainder);\r\n\tremainder -= this.day;\r\n\t\r\n\t//console.log(\"PersDate.calcComponent: day is \" + this.day + \" and remainder is \" + remainder);\r\n\t\r\n\t// now convert to milliseconds for the rest of the calculation\r\n\tremainder = Math.round(remainder * 86400000);\r\n\t\r\n\tthis.hour = Math.floor(remainder/3600000);\r\n\tremainder -= this.hour * 3600000;\r\n\t\r\n\tthis.minute = Math.floor(remainder/60000);\r\n\tremainder -= this.minute * 60000;\r\n\t\r\n\tthis.second = Math.floor(remainder/1000);\r\n\tremainder -= this.second * 1000;\r\n\t\r\n\tthis.millisecond = remainder;\r\n};\r\n\r\n/**\r\n * Return the day of the week of this date. The day of the week is encoded\r\n * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.\r\n * \r\n * @return {number} the day of the week\r\n */\r\nPersianDate.prototype.getDayOfWeek = function() {\r\n\tvar rd = Math.floor(this.getRataDie());\r\n\treturn MathUtils.mod(rd-3, 7);\r\n};\r\n\r\n/**\r\n * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to \r\n * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and \r\n * December 31st is 365 in regular years, or 366 in leap years.\r\n * @return {number} the ordinal day of the year\r\n */\r\nPersianDate.prototype.getDayOfYear = function() {\r\n\treturn PersianDate.cumMonthLengths[this.month-1] + this.day;\r\n};\r\n\r\n/**\r\n * Return the era for this date as a number. The value for the era for Persian \r\n * calendars is -1 for \"before the persian era\" (BP) and 1 for \"the persian era\" (anno \r\n * persico or AP). \r\n * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, \r\n * there is a year 0, so any years that are negative or zero are BP.\r\n * @return {number} 1 if this date is in the common era, -1 if it is before the \r\n * common era \r\n */\r\nPersianDate.prototype.getEra = function() {\r\n\treturn (this.year < 1) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Return the name of the calendar that governs this date.\r\n * \r\n * @return {string} a string giving the name of the calendar\r\n */\r\nPersianDate.prototype.getCalendar = function() {\r\n\treturn \"persian\";\r\n};\r\n\r\n// register with the factory method\r\nIDate._constructors[\"persian\"] = PersianDate;\r\n\r\nmodule.exports = PersianDate;","// ilib doesn't load the non-Gregorian calendars and dates initially. To ensure they are packaged\r\n// by enyo-dev, we've added explicit requires for each Date (which in turn requires the relevant\r\n// Calendar). This is only necessary for builds not using the library-mode build of enyo-ilib which\r\n// would have included everything\r\n\r\nrequire('../ilib/lib/GregorianDate');   // not required (rimshot) but included for completeness\r\nrequire('../ilib/lib/CopticDate');\r\nrequire('../ilib/lib/EthiopicDate');\r\nrequire('../ilib/lib/GregorianDate');\r\nrequire('../ilib/lib/HanDate');\r\nrequire('../ilib/lib/HebrewDate');\r\nrequire('../ilib/lib/IslamicDate');\r\nrequire('../ilib/lib/JulianDate');\r\nrequire('../ilib/lib/PersianDate');\r\nrequire('../ilib/lib/PersianAlgoDate');\r\nrequire('../ilib/lib/ThaiSolarDate');","/*\r\n * glue.js - glue code to fit ilib into enyo\r\n *\r\n * Copyright © 2013-2014 LG Electronics, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the 'License');\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an 'AS IS' BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar\r\n\tdom = require('enyo/dom'),\r\n\ti18n = require('enyo/i18n'),\r\n\tplatform = require('enyo/platform'),\r\n\tutils = require('enyo/utils'),\r\n\tAjax = require('enyo/Ajax'),\r\n\tControl = require('enyo/Control');\r\n\r\nvar\r\n\tilib = require('../ilib/lib/ilib'),\r\n\tCaseMapper = require('../ilib/lib/CaseMapper'),\r\n\tResBundle = require('../ilib/lib/ResBundle'),\r\n\tLoader = require('../ilib/lib/Loader'),\r\n\tLocale = require('../ilib/lib/Locale'),\r\n\tLocaleInfo = require('../ilib/lib/LocaleInfo'),\r\n\tScriptInfo = require('../ilib/lib/ScriptInfo'),\r\n\tZoneInfoFile = require('./zoneinfo');\r\n\r\nfunction enyoLoader () {\r\n\tthis.base = '../moonstone/enyo-ilib/ilib/';\r\n\tif (platform.platformName === 'webos') {\r\n\t\tthis.webos = true;\r\n\t}\r\n};\r\n\r\nenyoLoader.prototype = new Loader();\r\nenyoLoader.prototype.constructor = enyoLoader;\r\n\r\nenyoLoader.prototype._createZoneFile = function (path) {\r\n\tvar zone = path.substring(path.indexOf('zoneinfo'));\r\n\r\n\t// remove the .json suffix to get the name of the zone\r\n\tzone = zone.substring(0, zone.length-5);\r\n\r\n\ttry {\r\n\t\tvar zif = new ZoneInfoFile('/usr/share/' + zone);\r\n\r\n\t\t// only get the info for this year. Later we can get the info\r\n\t\t// for any historical or future year too\r\n\t\treturn zif.getIlibZoneInfo(new Date());\r\n\t} catch (e) {\r\n\t\t// no file, so just return nothing\r\n\t\treturn undefined;\r\n\t}\r\n};\r\n\r\nenyoLoader.prototype._pathjoin = function (root, subpath) {\r\n\tif (!root || !root.length) {\r\n\t\treturn subpath;\r\n\t}\r\n\tif (!subpath || !subpath.length) {\r\n\t\treturn root;\r\n\t}\r\n\treturn root + (root.charAt(root.length-1) !== '/' ? '/' : '') + subpath;\r\n};\r\n\r\n/**\r\n * Load the list of files asynchronously. This uses recursion in\r\n * order to create a queue of files that will be loaded serially.\r\n * Each layer, starting at the bottom, loads a file and then loads\r\n * the layer on top of it. The very top file on the stack will have\r\n * zero files to load, so instead it will be the one to call the\r\n * callback to notify the caller that all the content is loaded.\r\n *\r\n * @param {Object} context function to call this method in the context of\r\n * @param {Array.<string>} paths array of strings containing relative paths for required locale data files\r\n * @param {Array} results empty array in which to place the resulting json when it is loaded from a file\r\n * @param {Object} params An object full of parameters that the caller is passing to this function to help load the files\r\n * @param {function(Array.<Object>)} callback callback to call when this function is finished attempting\r\n * to load all the files that exist and can be loaded\r\n */\r\nenyoLoader.prototype._loadFilesAsync = function (context, paths, results, params, callback) {\r\n\tvar root = 'resources';\r\n\tif (params && typeof(params.root) !== 'undefined') {\r\n\t\troot = params.root;\r\n\t}\r\n\tif (paths.length > 0) {\r\n\t\tvar path = paths.shift(),\r\n\t\t\turl;\r\n\r\n\t\tif (this.webos && path.indexOf('zoneinfo') !== -1) {\r\n\t\t\tresults.push(this._createZoneFile(path));\r\n\t\t} else {\r\n\t\t\tif (this.isAvailable(root, path)) {\r\n\t\t\t\turl = this._pathjoin(root, path);\r\n\t\t\t} else if (this.isAvailable(this.base + 'locale', path)) {\r\n\t\t\t\turl = this._pathjoin(this._pathjoin(this.base, 'locale'), path);\r\n\t\t\t}\r\n\r\n\t\t\tvar resultFunc = function(inSender, json) {\r\n                // console.log('enyo-ilib/glue: ' + (!inSender.failed && json ? 'success' : 'failed'));\r\n\t\t\t\tresults.push(!inSender.failed && (typeof(json) === 'object') ? json : undefined);\r\n\t\t\t\tif (paths.length > 0) {\r\n\t\t\t\t\tthis._loadFilesAsync(context, paths, results, params, callback);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// only the bottom item on the stack will call\r\n\t\t\t\t\t// the callback\r\n\t\t\t\t\tcallback.call(context, results);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif (url) {\r\n\t\t\t\tvar ajax = new Ajax({\r\n\t\t\t\t\turl: url,\r\n\t\t\t\t\tcacheBust: false\r\n\t\t\t\t});\r\n\t\t\t\t// console.log('enyo-ilib/glue: browser/async: attempting to load ' + url);\r\n\t\t\t\tajax.response(this, resultFunc);\r\n\t\t\t\tajax.error(this, resultFunc);\r\n\t\t\t\tajax.go();\r\n\t\t\t} else {\r\n\t\t\t\t// nothing to load, so go to the next file\r\n\t\t\t\tresultFunc({}, undefined);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nenyoLoader.prototype.loadFiles = function(paths, sync, params, callback) {\r\n\tif (sync) {\r\n\t\tvar ret = [];\r\n\t\tvar root = 'resources';\r\n\t\tvar locdata = this._pathjoin(this.base, 'locale');\r\n\t\tif (params && typeof(params.root) !== 'undefined') {\r\n\t\t\troot = params.root;\r\n\t\t}\r\n\t\t// synchronous\r\n\t\tutils.forEach(paths, function (path) {\r\n\t\t\tif (this.webos && path.indexOf('zoneinfo') !== -1) {\r\n\t\t\t\tret.push(this._createZoneFile(path));\r\n\t\t\t} else {\r\n\t\t\t\tvar found = false;\r\n\r\n\t\t\t\tvar handler = function(inSender, json) {\r\n                    // console.log((!inSender.failed && json ? 'success' : 'failed'));\r\n\t\t\t\t\tif (!inSender.failed && typeof(json) === 'object') {\r\n\t\t\t\t\t\tret.push(json);\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// console.log('browser/sync: attempting to load lib/enyo-ilib/ilib/locale/' + path);\r\n\t\t\t\tif (this.isAvailable(root, path)) {\r\n\t\t\t\t\tvar ajax = new Ajax({\r\n\t\t\t\t\t\turl: this._pathjoin(root, path),\r\n\t\t\t\t\t\tsync: true,\r\n\t\t\t\t\t\tcacheBust: false\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tajax.response(this, handler);\r\n\t\t\t\t\tajax.error(this, handler);\r\n\t\t\t\t\tajax.go();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!found && this.isAvailable(locdata, path)) {\r\n\t\t\t\t\tvar ajax = new Ajax({\r\n\t\t\t\t\t\turl: this._pathjoin(locdata, path),\r\n\t\t\t\t\t\tsync: true,\r\n\t\t\t\t\t\tcacheBust: false\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tajax.response(this, handler);\r\n\t\t\t\t\tajax.error(this, handler);\r\n\t\t\t\t\tajax.go();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!found) {\r\n\t\t\t\t\t// not there, so fill in a blank entry in the array\r\n\t\t\t\t\tret.push(undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\tif (typeof(callback) === 'function') {\r\n\t\t\tcallback.call(this, ret);\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t// asynchronous\r\n\tvar results = [];\r\n\tthis._loadFilesAsync(this, paths, results, params, callback);\r\n};\r\n\r\nenyoLoader.prototype._loadManifest = function (root, subpath) {\r\n\tif (!this.manifest) {\r\n\t\tthis.manifest = {};\r\n\t}\r\n\r\n\tvar dirpath = this._pathjoin(root, subpath);\r\n\tvar filepath = this._pathjoin(dirpath, 'ilibmanifest.json');\r\n\r\n\t// util.print('enyo loader: loading manifest ' + filepath + '\\n');\r\n\tvar ajax = new Ajax({\r\n\t\turl: filepath,\r\n\t\tsync: true,\r\n\t\tcacheBust: false,\r\n\t\thandleAs: 'json'\r\n\t});\r\n\r\n\tvar handler = function(inSender, json) {\r\n        // console.log((!inSender.failed && json ? 'success' : 'failed'));\r\n\t\t// star indicates there was no ilibmanifest.json, so always try to load files from that dir\r\n\t\tthis.manifest[dirpath] = (!inSender.failed && typeof(json) === 'object') ? json.files : '*';\r\n\t};\r\n\r\n\tajax.response(this, handler);\r\n\tajax.error(this, handler);\r\n\tajax.go();\r\n},\r\n\r\nenyoLoader.prototype._loadStandardManifests = function() {\r\n\t// util.print('enyo loader: load manifests\\n');\r\n\tif (!this.manifest) {\r\n\t\tthis._loadManifest(this.base, 'locale'); // standard ilib locale data\r\n\t\tthis._loadManifest('', 'resources');     // the app's resources dir\r\n\t}\r\n};\r\nenyoLoader.prototype.listAvailableFiles = function() {\r\n\t// util.print('enyo loader: list available files called\\n');\r\n\tthis._loadStandardManifests();\r\n\treturn this.manifest;\r\n};\r\nenyoLoader.prototype.isAvailable = function(root, path) {\r\n\tthis._loadStandardManifests();\r\n\r\n\tif (!this.manifest[root]) {\r\n\t\t// maybe it's a custom root? If so, try to load\r\n\t\t// the manifest file first in case it is there\r\n\t\tthis._loadManifest(root, '');\r\n\t}\r\n\r\n\t// util.print('enyo loader: isAvailable ' + path + '? ');\r\n\t// star means attempt to load everything because there was no manifest in that dir\r\n\tif (this.manifest[root] === '*' || utils.indexOf(this.manifest[root], path) !== -1) {\r\n\t\t// util.print('true\\n');\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// util.print('false\\n');\r\n\treturn false;\r\n};\r\n\r\nilib.setLoaderCallback(new enyoLoader());\r\n\r\nif (typeof(window.UILocale) !== 'undefined') {\r\n\t// this is a hack until GF-1581 is fixed\r\n\tilib.setLocale(window.UILocale);\r\n}\r\n\r\n/*\r\n * Tell whether or not the given locale is considered a non-Latin locale for webOS purposes. This controls\r\n * which fonts are used in various places to show the various languages. An undefined spec parameter means\r\n * to test the current locale.\r\n *\r\n * @param {ilib.Locale|string|undefined} spec locale specifier or locale object of the locale to test, or undefined\r\n * to test the current locale\r\n */\r\nfunction isNonLatinLocale (spec) {\r\n\tvar li = new LocaleInfo(spec),\r\n\t\tlocale = li.getLocale();\r\n\r\n    // We use the non-latin fonts for these languages (even though their scripts are technically considered latin)\r\n    var nonLatinLanguageOverrides = ['ha', 'hu', 'vi', 'en-JP'];\r\n    // We use the latin fonts (with non-Latin fallback) for these languages (even though their scripts are non-latin)\r\n    var latinLanguageOverrides = ['ko'];\r\n\treturn (\r\n\t\t(\r\n\t\t\tli.getScript() !== 'Latn' ||                                              // the language actually is non-latin\r\n\t\t\tutils.indexOf(locale.getLanguage(), nonLatinLanguageOverrides) !== -1 ||  // the language is treated as non-latin\r\n\t\t\tutils.indexOf(locale.toString(), nonLatinLanguageOverrides) !== -1        // the combination of language and region is treated as non-latin\r\n\t\t) && (\r\n\t\t\tutils.indexOf(locale.getLanguage(), latinLanguageOverrides) < 0           // the non-latin language should be treated as latin\r\n\t\t)\r\n\t);\r\n}\r\n\r\n// enyo.updateI18NClasses should be called after every setLocale, but there isn't such a callback in current version\r\nfunction updateI18NClasses () {\r\n    var li = new LocaleInfo(); // for the current locale\r\n    var locale = li.getLocale();\r\n\tvar base = 'enyo-locale-';\r\n\r\n    // Remove old style definitions (hack style becouse enyo.dom doesn't have methods like enyo.dom.getBodyClasses, enyo.dom.removeBodyClass)\r\n    if (document && document.body && document.body.className) {\r\n        document.body.className = document.body.className.replace(new RegExp('(^|\\\\s)'+ base +'\\\\S*', 'g'), '');\r\n    }\r\n\r\n\tif (isNonLatinLocale(locale)) {\r\n\t\t// allow enyo to define other fonts for non-Latin languages, or for certain\r\n\t\t// Latin-based languages where the characters with some accents don't appear in the\r\n\t\t// regular fonts, creating a strange 'ransom note' look with a mix of fonts in the\r\n\t\t// same word. So, treat it like a non-Latin language in order to get all the characters\r\n\t\t// to display with the same font.\r\n\t\tdom.addBodyClass(base + 'non-latin');\r\n\t}\r\n\r\n\tvar scriptName = li.getScript();\r\n\tif (scriptName !== 'Latn' && scriptName !== 'Cyrl' && scriptName !== 'Grek') {\r\n\t\t// GF-45884: allow enyo to avoid setting italic fonts for those scripts that do not\r\n\t\t// commonly use italics\r\n\t\tdom.addBodyClass(base + 'non-italic');\r\n\t}\r\n\r\n\t// allow enyo to apply right-to-left styles to the app and widgets if necessary\r\n\tvar script = new ScriptInfo(scriptName);\r\n\tif (script.getScriptDirection() === 'rtl') {\r\n\t\tdom.addBodyClass(base + 'right-to-left');\r\n\t\tControl.prototype.rtl = true;\r\n\t} else {\r\n\t\tControl.prototype.rtl = false;\r\n\t}\r\n\r\n\t// allow enyo or the apps to give CSS classes that are specific to the language, country, or script\r\n\tif (locale.getLanguage()) {\r\n\t\tdom.addBodyClass(base + locale.getLanguage());\r\n\t\tif (locale.getScript()) {\r\n\t\t\tdom.addBodyClass(base + locale.getLanguage() + '-' + locale.getScript());\r\n\t\t\tif (locale.getRegion()) {\r\n\t\t\t\tdom.addBodyClass(base + locale.getLanguage() + '-' + locale.getScript() + '-' + locale.getRegion());\r\n\t\t\t}\r\n\t\t} else if (locale.getRegion()) {\r\n\t\t\tdom.addBodyClass(base + locale.getLanguage() + '-' + locale.getRegion());\r\n\t\t}\r\n\t}\r\n\tif (locale.getScript()) {\r\n\t\tdom.addBodyClass(base + locale.getScript());\r\n\t}\r\n\tif (locale.getRegion()) {\r\n\t\tdom.addBodyClass(base + locale.getRegion());\r\n\t}\r\n\t// Recreate the case mappers to use the just-recently-set locale\r\n \tsetCaseMappers();\r\n}\r\n\r\n// The ilib.ResBundle for the active locale used by $L\r\nvar resBundle;\r\n\r\n/*\r\n * Reset the $L function to use ilib instead of the dummy function that enyo\r\n * comes with by default.\r\n */\r\ni18n.$L.extend(function (sup) {\r\n\treturn function (string) {\r\n\t\tvar str;\r\n\t\tif (!resBundle) setLocale();\r\n\t\tif (typeof(string) === 'string') {\r\n\t\t\tstr = resBundle ? resBundle.getString(string) : string;\r\n\t\t} else if (typeof(string) === 'object') {\r\n\t\t\tif (typeof(string.key) !== 'undefined' && typeof(string.value) !== 'undefined') {\r\n\t\t\t\tstr = resBundle ? resBundle.getString(string.value, string.key) : string.value;\r\n\t\t\t} else {\r\n\t\t\t\tstr = '';\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstr = string;\r\n\t\t}\r\n\t\treturn sup.call(this, str.toString());\r\n\t};\r\n});\r\n\r\n/**\r\n * Set the locale for the strings that $L loads. This may reload the\r\n * string resources if necessary.\r\n * @param {string} spec the locale specifier\r\n */\r\nfunction setLocale (spec) {\r\n\tvar locale = new Locale(spec);\r\n\tif (!resBundle || spec !== resBundle.getLocale().getSpec()) {\r\n\t\tresBundle = i18n.$L.rb = new ResBundle({\r\n\t\t\tlocale: locale,\r\n\t\t\ttype: 'html',\r\n\t\t\tname: 'strings',\r\n\t\t\tsync: true,\r\n\t\t\tlengthen: true\t\t// if pseudo-localizing, this tells it to lengthen strings\r\n\t\t});\r\n\t}\r\n}\r\n\r\nvar toLowerCaseMapper, toUpperCaseMapper;\r\n\r\n/**\r\n * Set CaseMapper object references to ilib's current locale (its most recently set, by default)\r\n */\r\nfunction setCaseMappers () {\r\n\ttoLowerCaseMapper = new CaseMapper({direction: 'tolower'});\r\n\ttoUpperCaseMapper = new CaseMapper({direction: 'toupper'});\r\n}\r\n\r\n/**\r\n * Override Enyo's toLowerCase and toUpperCase methods with these fancy ones\r\n * that call iLib's locale-safe case mapper.\r\n */\r\nutils.toLowerCase.extend(function (sup) {\r\n\treturn function (inString) {\r\n\t\tif (inString != null) {\r\n\t\t\treturn toLowerCaseMapper.map(inString.toString());\r\n\t\t}\r\n\t\treturn inString;\r\n\t};\r\n});\r\nutils.toUpperCase.extend(function (sup) {\r\n\treturn function (inString) {\r\n\t\tif (inString != null) {\r\n\t\t\treturn toUpperCaseMapper.map(inString.toString());\r\n\t\t}\r\n\t\treturn inString;\r\n\t};\r\n});\r\n\r\n/**\r\n * This Enyo hook lets us know that the system locale has changed and gives\r\n * us a chance to update the iLib locale before Enyo broadcasts its\r\n * `onlocalechange` signal.\r\n * Provide an inLocale string, like 'en-US' or 'ja-JP', to conveniently set\r\n * that locale immediately. Provide nothing, and reset the locale back to the\r\n * browser's default language.\r\n */\r\ni18n.updateLocale.extend(function (sup) {\r\n\treturn function(inLocale) {\r\n\t\t// blow away the cache to force it to reload the manifest files for the new app\r\n\t\tif (ilib._load) ilib._load.manifest = undefined;\r\n\t\t// ilib handles falsy values and automatically uses local locale when encountered which\r\n\t\t// is expected and desired\r\n\t\tilib.setLocale(inLocale);\r\n\t\t// we supply whatever ilib determined was actually the locale based on what was passed in\r\n\t\tsetLocale(ilib.getLocale());\r\n\t\tupdateI18NClasses();\r\n\t\tsup.call(this);\r\n\t};\r\n});\r\n\r\n/**\r\n * Invalidates the current locale's resource bundle, allowing for it to be reloaded.\r\n */\r\nfunction invalidateResources() {\r\n\tdelete ResBundle.strings;\r\n\tresBundle = i18n.$L.rb = undefined;\r\n}\r\n\r\n// we go ahead and run this once during loading of iLib settings are valid\r\n// during the loads of later libraries.\r\ni18n.updateLocale(null, true);\r\n\r\nmodule.exports = {\r\n\tupdateI18NClasses: updateI18NClasses,\r\n\tisNonLatinLocale: isNonLatinLocale,\r\n\tinvalidateResources: invalidateResources\r\n};\r\n","var\r\n\tglue = require('./src/glue'),\r\n\tilib = require('./ilib/lib/ilib');\r\n\r\n// ensure the locale-specific date types are included\r\nrequire('./src/dates');\r\n\r\nilib.enyo = glue;\r\nilib.enyo.version = '2.7.0';\r\n\r\nmodule.exports = ilib;\r\n"]}